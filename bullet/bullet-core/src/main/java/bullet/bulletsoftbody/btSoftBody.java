/*-------------------------------------------------------
 * This file was generated by JParser
 *
 * Do not make changes to this file
 *-------------------------------------------------------*/
package bullet.bulletsoftbody;

import bullet.bulletcollision.collisiondispatch.btCollisionObject;
import bullet.btSoftBodyWorldInfo;
import bullet.linearmath.btVector3;
import bullet.bulletdynamics.dynamics.btRigidBody;
import bullet.linearmath.btTransform;
import bullet.linearmath.btQuaternion;

public class btSoftBody extends btCollisionObject {

    private btSoftBody btSoftBody_TEMP_GEN_0;

    static public final btSoftBody NULL = btSoftBody.native_new();

    public btSoftBody(btSoftBodyWorldInfo worldInfo) {
        super((byte) 1, (char) 1);
        long addr = internal_native_create_btSoftBodyWorldInfo(worldInfo.native_address);
        internal_reset(addr, true);
    }

    /*[-JNI;-NATIVE]
return (jlong)new btSoftBody((btSoftBodyWorldInfo* )worldInfo_addr);
*/
    public static native long internal_native_create_btSoftBodyWorldInfo(long worldInfo_addr);

    /**
     * Dummy constructor, used internally to creates objects without C++ pointer
     */
    @Deprecated()
    protected btSoftBody(byte b, char c) {
        super((byte) 1, (char) 1);
    }

    /**
     * @return An empty instance without a native address
     */
    public static btSoftBody native_new() {
        return new btSoftBody((byte) 0, (char) 0);
    }

    protected void deleteNative() {
        internal_native_deleteNative(native_address);
    }

    /*[-JNI;-NATIVE]
btSoftBody* nativeObject = (btSoftBody*)this_addr;
delete nativeObject;
*/
    public static native void internal_native_deleteNative(long this_addr);

    public boolean checkLink(int node0, int node1) {
        return internal_native_checkLink(native_address, node0, node1);
    }

    /*[-JNI;-NATIVE]
btSoftBody* nativeObject = (btSoftBody*)this_addr;
return nativeObject->checkLink((int)node0, (int)node1);
*/
    public static native boolean internal_native_checkLink(long this_addr, int node0, int node1);

    public boolean checkFace(int node0, int node1, int node2) {
        return internal_native_checkFace(native_address, node0, node1, node2);
    }

    /*[-JNI;-NATIVE]
btSoftBody* nativeObject = (btSoftBody*)this_addr;
return nativeObject->checkFace((int)node0, (int)node1, (int)node2);
*/
    public static native boolean internal_native_checkFace(long this_addr, int node0, int node1, int node2);

    public void appendNode(btVector3 x, float m) {
        internal_native_appendNode(native_address, x.native_address, m);
    }

    /*[-JNI;-NATIVE]
btSoftBody* nativeObject = (btSoftBody*)this_addr;
nativeObject->appendNode(*((btVector3* )x_addr), (float)m);
*/
    public static native void internal_native_appendNode(long this_addr, long x_addr, float m);

    public void appendAnchor(int node, btRigidBody body, boolean disableCollisionBetweenLinkedBodies, float influence) {
        internal_native_appendAnchor(native_address, node, body.native_address, disableCollisionBetweenLinkedBodies, influence);
    }

    /*[-JNI;-NATIVE]
btSoftBody* nativeObject = (btSoftBody*)this_addr;
nativeObject->appendAnchor((int)node, (btRigidBody* )body_addr, disableCollisionBetweenLinkedBodies, (float)influence);
*/
    public static native void internal_native_appendAnchor(long this_addr, int node, long body_addr, boolean disableCollisionBetweenLinkedBodies, float influence);

    public float getTotalMass() {
        return internal_native_getTotalMass(native_address);
    }

    /*[-JNI;-NATIVE]
btSoftBody* nativeObject = (btSoftBody*)this_addr;
return nativeObject->getTotalMass();
*/
    public static native float internal_native_getTotalMass(long this_addr);

    public void setTotalMass(float mass, boolean fromfaces) {
        internal_native_setTotalMass(native_address, mass, fromfaces);
    }

    /*[-JNI;-NATIVE]
btSoftBody* nativeObject = (btSoftBody*)this_addr;
nativeObject->setTotalMass((float)mass, fromfaces);
*/
    public static native void internal_native_setTotalMass(long this_addr, float mass, boolean fromfaces);

    public void setTotalMass(float mass) {
        internal_native_setTotalMass(native_address, mass);
    }

    /*[-JNI;-NATIVE]
btSoftBody* nativeObject = (btSoftBody*)this_addr;
nativeObject->setTotalMass((float)mass);
*/
    public static native void internal_native_setTotalMass(long this_addr, float mass);

    public void setMass(int node, float mass) {
        internal_native_setMass(native_address, node, mass);
    }

    /*[-JNI;-NATIVE]
btSoftBody* nativeObject = (btSoftBody*)this_addr;
nativeObject->setMass((int)node, (float)mass);
*/
    public static native void internal_native_setMass(long this_addr, int node, float mass);

    public void transform(btTransform trs) {
        internal_native_transform(native_address, trs.native_address);
    }

    /*[-JNI;-NATIVE]
btSoftBody* nativeObject = (btSoftBody*)this_addr;
nativeObject->transform(*((btTransform* )trs_addr));
*/
    public static native void internal_native_transform(long this_addr, long trs_addr);

    public void translate(btVector3 trs) {
        internal_native_translate(native_address, trs.native_address);
    }

    /*[-JNI;-NATIVE]
btSoftBody* nativeObject = (btSoftBody*)this_addr;
nativeObject->translate(*((btVector3* )trs_addr));
*/
    public static native void internal_native_translate(long this_addr, long trs_addr);

    public void rotate(btQuaternion rot) {
        internal_native_rotate(native_address, rot.native_address);
    }

    /*[-JNI;-NATIVE]
btSoftBody* nativeObject = (btSoftBody*)this_addr;
nativeObject->rotate(*((btQuaternion* )rot_addr));
*/
    public static native void internal_native_rotate(long this_addr, long rot_addr);

    public void scale(btVector3 scl) {
        internal_native_scale(native_address, scl.native_address);
    }

    /*[-JNI;-NATIVE]
btSoftBody* nativeObject = (btSoftBody*)this_addr;
nativeObject->scale(*((btVector3* )scl_addr));
*/
    public static native void internal_native_scale(long this_addr, long scl_addr);

    public int generateClusters(int k, int maxiterations) {
        return internal_native_generateClusters(native_address, k, maxiterations);
    }

    /*[-JNI;-NATIVE]
btSoftBody* nativeObject = (btSoftBody*)this_addr;
return nativeObject->generateClusters((int)k, (int)maxiterations);
*/
    public static native int internal_native_generateClusters(long this_addr, int k, int maxiterations);

    public int generateClusters(int k) {
        return internal_native_generateClusters(native_address, k);
    }

    /*[-JNI;-NATIVE]
btSoftBody* nativeObject = (btSoftBody*)this_addr;
return nativeObject->generateClusters((int)k);
*/
    public static native int internal_native_generateClusters(long this_addr, int k);

    public void randomizeConstraints() {
        internal_native_randomizeConstraints(native_address);
    }

    /*[-JNI;-NATIVE]
btSoftBody* nativeObject = (btSoftBody*)this_addr;
nativeObject->randomizeConstraints();
*/
    public static native void internal_native_randomizeConstraints(long this_addr);

    public btSoftBody upcast(btCollisionObject colObj) {
        long pointer = internal_native_upcast(native_address, colObj.native_address);
        if (pointer == 0)
            return btSoftBody.NULL;
        if (btSoftBody_TEMP_GEN_0 == null)
            btSoftBody_TEMP_GEN_0 = btSoftBody.native_new();
        btSoftBody_TEMP_GEN_0.internal_reset(pointer, false);
        return btSoftBody_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
btSoftBody* nativeObject = (btSoftBody*)this_addr;
btSoftBody* obj = nativeObject->upcast((btCollisionObject* )colObj_addr);
return (jlong)obj;
*/
    public static native long internal_native_upcast(long this_addr, long colObj_addr);
}
