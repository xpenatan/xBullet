/*-------------------------------------------------------
 * This file was generated by JParser
 *
 * Do not make changes to this file
 *-------------------------------------------------------*/
package bullet.linearmath;

import com.github.xpenatan.jParser.idl.IDLBase;

public class btIDebugDraw extends IDLBase {

    static private btVector3 btVector3_TEMP_STATIC_GEN_0;

    static private btVector3 btVector3_TEMP_STATIC_GEN_1;

    static private btVector3 btVector3_TEMP_STATIC_GEN_2;

    static private btVector3 btVector3_TEMP_STATIC_GEN_3;

    static private btVector3 btVector3_TEMP_STATIC_GEN_4;

    static private btVector3 btVector3_TEMP_STATIC_GEN_5;

    static private btVector3 btVector3_TEMP_STATIC_GEN_6;

    static public final btIDebugDraw NULL = btIDebugDraw.native_new();

    /*[-JNI;-NATIVE]
class DebugDrawImpl : public btIDebugDraw {
private:
	JNIEnv* env;
	jobject obj;
public:
	inline static jclass jClassID = 0;
	inline static jmethodID drawLineJJJ_ID = 0;
	inline static jmethodID drawContactPointJJFIJ_ID = 0;
	inline static jmethodID reportErrorWarningS_ID = 0;
	inline static jmethodID draw3dTextJS_ID = 0;
	inline static jmethodID setDebugModeI_ID = 0;
	inline static jmethodID getDebugMode_ID = 0;

void setupCallback(JNIEnv* env, jobject obj) {
	this->env = env;
	this->obj = env->NewGlobalRef(obj);
	if(DebugDrawImpl::jClassID == 0) {
		DebugDrawImpl::jClassID = (jclass)env->NewGlobalRef(env->GetObjectClass(obj));
		DebugDrawImpl::drawLineJJJ_ID = env->GetMethodID(jClassID, "internal_drawLine", "(JJJ)V");
		DebugDrawImpl::drawContactPointJJFIJ_ID = env->GetMethodID(jClassID, "internal_drawContactPoint", "(JJFIJ)V");
		DebugDrawImpl::reportErrorWarningS_ID = env->GetMethodID(jClassID, "internal_reportErrorWarning", "(Ljava/lang/String;)V");
		DebugDrawImpl::draw3dTextJS_ID = env->GetMethodID(jClassID, "internal_draw3dText", "(JLjava/lang/String;)V");
		DebugDrawImpl::setDebugModeI_ID = env->GetMethodID(jClassID, "internal_setDebugMode", "(I)V");
		DebugDrawImpl::getDebugMode_ID = env->GetMethodID(jClassID, "internal_getDebugMode", "()I");
	}
}
virtual void drawLine(const btVector3& vecFrom, const btVector3& vecTo, const btVector3& color) {
   env->CallVoidMethod(obj, DebugDrawImpl::drawLineJJJ_ID, (jlong)&vecFrom, (jlong)&vecTo, (jlong)&color);
}
virtual void drawContactPoint(const btVector3& PointOnB, const btVector3& normalOnB, float distance, int lifeTime, const btVector3& color) {
   env->CallVoidMethod(obj, DebugDrawImpl::drawContactPointJJFIJ_ID, (jlong)&PointOnB, (jlong)&normalOnB, distance, lifeTime, (jlong)&color);
}
virtual void reportErrorWarning(const char* warningString) {
   env->CallVoidMethod(obj, DebugDrawImpl::reportErrorWarningS_ID, env->NewStringUTF(warningString));
}
virtual void draw3dText(const btVector3& location, const char* textString) {
   env->CallVoidMethod(obj, DebugDrawImpl::draw3dTextJS_ID, (jlong)&location, env->NewStringUTF(textString));
}
virtual void setDebugMode(int debugMode) {
   env->CallVoidMethod(obj, DebugDrawImpl::setDebugModeI_ID, debugMode);
}
virtual int getDebugMode() const {
   return env->CallIntMethod(obj, DebugDrawImpl::getDebugMode_ID);
}
};
*/
    @Deprecated()
    protected btIDebugDraw(byte b, char c) {
    }

    /**
     * @return An empty instance without a native address
     */
    public static btIDebugDraw native_new() {
        return new btIDebugDraw((byte) 0, (char) 0);
    }

    protected void deleteNative() {
        internal_native_deleteNative(native_address);
    }

    /*[-JNI;-NATIVE]
DebugDrawImpl* nativeObject = (DebugDrawImpl*)this_addr;
delete nativeObject;
*/
    public static native void internal_native_deleteNative(long this_addr);

    public btIDebugDraw() {
        long addr = internal_native_create();
        internal_reset(addr, true);
        setupCallback();
    }

    private void setupCallback() {
        internal_native_setupCallback(native_address);
    }

    protected void drawLine(btVector3 vecFrom, btVector3 vecTo, btVector3 color) {
    }

    private void internal_drawLine(long vecFrom_addr, long vecTo_addr, long color_addr) {
        if (btVector3_TEMP_STATIC_GEN_0 == null)
            btVector3_TEMP_STATIC_GEN_0 = btVector3.native_new();
        btVector3_TEMP_STATIC_GEN_0.internal_reset(vecFrom_addr, false);
        if (btVector3_TEMP_STATIC_GEN_1 == null)
            btVector3_TEMP_STATIC_GEN_1 = btVector3.native_new();
        btVector3_TEMP_STATIC_GEN_1.internal_reset(vecTo_addr, false);
        if (btVector3_TEMP_STATIC_GEN_2 == null)
            btVector3_TEMP_STATIC_GEN_2 = btVector3.native_new();
        btVector3_TEMP_STATIC_GEN_2.internal_reset(color_addr, false);
        drawLine(btVector3_TEMP_STATIC_GEN_0, btVector3_TEMP_STATIC_GEN_1, btVector3_TEMP_STATIC_GEN_2);
    }

    protected void drawContactPoint(btVector3 PointOnB, btVector3 normalOnB, float distance, int lifeTime, btVector3 color) {
    }

    private void internal_drawContactPoint(long PointOnB_addr, long normalOnB_addr, float distance, int lifeTime, long color_addr) {
        if (btVector3_TEMP_STATIC_GEN_3 == null)
            btVector3_TEMP_STATIC_GEN_3 = btVector3.native_new();
        btVector3_TEMP_STATIC_GEN_3.internal_reset(PointOnB_addr, false);
        if (btVector3_TEMP_STATIC_GEN_4 == null)
            btVector3_TEMP_STATIC_GEN_4 = btVector3.native_new();
        btVector3_TEMP_STATIC_GEN_4.internal_reset(normalOnB_addr, false);
        if (btVector3_TEMP_STATIC_GEN_5 == null)
            btVector3_TEMP_STATIC_GEN_5 = btVector3.native_new();
        btVector3_TEMP_STATIC_GEN_5.internal_reset(color_addr, false);
        drawContactPoint(btVector3_TEMP_STATIC_GEN_3, btVector3_TEMP_STATIC_GEN_4, distance, lifeTime, btVector3_TEMP_STATIC_GEN_5);
    }

    protected void reportErrorWarning(String warningString) {
    }

    private void internal_reportErrorWarning(String warningString_addr) {
        reportErrorWarning(warningString_addr);
    }

    protected void draw3dText(btVector3 location, String textString) {
    }

    private void internal_draw3dText(long location_addr, String textString_addr) {
        if (btVector3_TEMP_STATIC_GEN_6 == null)
            btVector3_TEMP_STATIC_GEN_6 = btVector3.native_new();
        btVector3_TEMP_STATIC_GEN_6.internal_reset(location_addr, false);
        draw3dText(btVector3_TEMP_STATIC_GEN_6, textString_addr);
    }

    protected void setDebugMode(int debugMode) {
    }

    private void internal_setDebugMode(int debugMode) {
        setDebugMode(debugMode);
    }

    protected int getDebugMode() {
        return 0;
    }

    private int internal_getDebugMode() {
        return getDebugMode();
    }

    /*[-JNI;-NATIVE]
return (jlong)new DebugDrawImpl();
*/
    public static native long internal_native_create();

    /*[-JNI;-NATIVE]
DebugDrawImpl* nativeObject = (DebugDrawImpl*)this_addr;
nativeObject->setupCallback(env, object);
*/
    public native void internal_native_setupCallback(long this_addr);
}
