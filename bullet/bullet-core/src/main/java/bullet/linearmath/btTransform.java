/*-------------------------------------------------------
 * This file was generated by JParser
 *
 * Do not make changes to this file
 *-------------------------------------------------------*/
package bullet.linearmath;

import com.github.xpenatan.jParser.idl.IDLBase;
import bullet.idl.helper.IDLFloatArray;

public class btTransform extends IDLBase {

    private btVector3 btVector3_TEMP_GEN_0;

    private btQuaternion btQuaternion_TEMP_GEN_0;

    private btMatrix3x3 btMatrix3x3_TEMP_GEN_0;

    static public final btTransform NULL = btTransform.native_new();

    public btTransform() {
        long addr = internal_native_create();
        internal_reset(addr, true);
    }

    /*[-JNI;-NATIVE]
return (jlong)new btTransform();
*/
    public static native long internal_native_create();

    public btTransform(btQuaternion q, btVector3 v) {
        long addr = internal_native_create_btQuaternion_btVector3(q.native_address, v.native_address);
        internal_reset(addr, true);
    }

    /*[-JNI;-NATIVE]
return (jlong)new btTransform(*((btQuaternion* )q_addr), *((btVector3* )v_addr));
*/
    public static native long internal_native_create_btQuaternion_btVector3(long q_addr, long v_addr);

    /**
     * Dummy constructor, used internally to creates objects without C++ pointer
     */
    @Deprecated()
    protected btTransform(byte b, char c) {
    }

    /**
     * @return An empty instance without a native address
     */
    public static btTransform native_new() {
        return new btTransform((byte) 0, (char) 0);
    }

    protected void deleteNative() {
        internal_native_deleteNative(native_address);
    }

    /*[-JNI;-NATIVE]
btTransform* nativeObject = (btTransform*)this_addr;
delete nativeObject;
*/
    public static native void internal_native_deleteNative(long this_addr);

    public void setIdentity() {
        internal_native_setIdentity(native_address);
    }

    /*[-JNI;-NATIVE]
btTransform* nativeObject = (btTransform*)this_addr;
nativeObject->setIdentity();
*/
    public static native void internal_native_setIdentity(long this_addr);

    public void setOrigin(btVector3 origin) {
        internal_native_setOrigin(native_address, origin.native_address);
    }

    /*[-JNI;-NATIVE]
btTransform* nativeObject = (btTransform*)this_addr;
nativeObject->setOrigin(*((btVector3* )origin_addr));
*/
    public static native void internal_native_setOrigin(long this_addr, long origin_addr);

    public void setRotation(btQuaternion rotation) {
        internal_native_setRotation(native_address, rotation.native_address);
    }

    /*[-JNI;-NATIVE]
btTransform* nativeObject = (btTransform*)this_addr;
nativeObject->setRotation(*((btQuaternion* )rotation_addr));
*/
    public static native void internal_native_setRotation(long this_addr, long rotation_addr);

    public btVector3 getOrigin() {
        long pointer = internal_native_getOrigin(native_address);
        if (pointer == 0)
            return btVector3.NULL;
        if (btVector3_TEMP_GEN_0 == null)
            btVector3_TEMP_GEN_0 = btVector3.native_new();
        btVector3_TEMP_GEN_0.internal_reset(pointer, false);
        return btVector3_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
btTransform* nativeObject = (btTransform*)this_addr;
return (jlong)&nativeObject->getOrigin();
*/
    public static native long internal_native_getOrigin(long this_addr);

    public btQuaternion getRotation() {
        long pointer = internal_native_getRotation(native_address);
        if (pointer == 0)
            return btQuaternion.NULL;
        if (btQuaternion_TEMP_GEN_0 == null)
            btQuaternion_TEMP_GEN_0 = btQuaternion.native_new();
        btQuaternion_TEMP_GEN_0.internal_reset(pointer, false);
        return btQuaternion_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
btTransform* nativeObject = (btTransform*)this_addr;
static btQuaternion copy_addr;
copy_addr = nativeObject->getRotation();
return (jlong)&copy_addr;*/
    public static native long internal_native_getRotation(long this_addr);

    public btMatrix3x3 getBasis() {
        long pointer = internal_native_getBasis(native_address);
        if (pointer == 0)
            return btMatrix3x3.NULL;
        if (btMatrix3x3_TEMP_GEN_0 == null)
            btMatrix3x3_TEMP_GEN_0 = btMatrix3x3.native_new();
        btMatrix3x3_TEMP_GEN_0.internal_reset(pointer, false);
        return btMatrix3x3_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
btTransform* nativeObject = (btTransform*)this_addr;
return (jlong)&nativeObject->getBasis();
*/
    public static native long internal_native_getBasis(long this_addr);

    public void setFromOpenGLMatrix(IDLFloatArray m) {
        internal_native_setFromOpenGLMatrix(native_address, m.native_void_address);
    }

    /*[-JNI;-NATIVE]
btTransform* nativeObject = (btTransform*)this_addr;
nativeObject->setFromOpenGLMatrix((float*)m_addr);
*/
    public static native void internal_native_setFromOpenGLMatrix(long this_addr, long m_addr);

    public void getOpenGLMatrix(IDLFloatArray m) {
        internal_native_getOpenGLMatrix(native_address, m.native_void_address);
    }

    /*[-JNI;-NATIVE]
btTransform* nativeObject = (btTransform*)this_addr;
nativeObject->getOpenGLMatrix((float*)m_addr);
*/
    public static native void internal_native_getOpenGLMatrix(long this_addr, long m_addr);
}
