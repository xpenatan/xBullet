/*-------------------------------------------------------
 * This file was generated by JParser
 *
 * Do not make changes to this file
 *-------------------------------------------------------*/
package bullet.bulletdynamics.vehicle;

import bullet.bulletdynamics.dynamics.btActionInterface;
import bullet.btVehicleTuning;
import bullet.bulletdynamics.dynamics.btRigidBody;
import bullet.linearmath.btTransform;
import bullet.linearmath.btVector3;

public class btRaycastVehicle extends btActionInterface {

    private btTransform btTransform_TEMP_GEN_0;

    private btWheelInfo btWheelInfo_TEMP_GEN_0;

    private btRigidBody btRigidBody_TEMP_GEN_0;

    private btWheelInfo btWheelInfo_TEMP_GEN_1;

    private btVector3 btVector3_TEMP_GEN_0;

    static public final btRaycastVehicle NULL = btRaycastVehicle.native_new();

    public btRaycastVehicle(btVehicleTuning tuning, btRigidBody chassis, btVehicleRaycaster raycaster) {
        super((byte) 1, (char) 1);
        long addr = internal_native_create_btVehicleTuning_btRigidBody_btVehicleRaycaster(tuning.native_address, chassis.native_address, raycaster.native_address);
        internal_reset(addr, true);
    }

    /*[-JNI;-NATIVE]
return (jlong)new btRaycastVehicle(*((btRaycastVehicle::btVehicleTuning* )tuning_addr), (btRigidBody* )chassis_addr, (btVehicleRaycaster* )raycaster_addr);
*/
    public static native long internal_native_create_btVehicleTuning_btRigidBody_btVehicleRaycaster(long tuning_addr, long chassis_addr, long raycaster_addr);

    /**
     * Dummy constructor, used internally to creates objects without C++ pointer
     */
    @Deprecated()
    protected btRaycastVehicle(byte b, char c) {
        super((byte) 1, (char) 1);
    }

    /**
     * @return An empty instance without a native address
     */
    public static btRaycastVehicle native_new() {
        return new btRaycastVehicle((byte) 0, (char) 0);
    }

    protected void deleteNative() {
        internal_native_deleteNative(native_address);
    }

    /*[-JNI;-NATIVE]
btRaycastVehicle* nativeObject = (btRaycastVehicle*)this_addr;
delete nativeObject;
*/
    public static native void internal_native_deleteNative(long this_addr);

    public void applyEngineForce(float force, int wheel) {
        internal_native_applyEngineForce(native_address, force, wheel);
    }

    /*[-JNI;-NATIVE]
btRaycastVehicle* nativeObject = (btRaycastVehicle*)this_addr;
nativeObject->applyEngineForce((float)force, (int)wheel);
*/
    public static native void internal_native_applyEngineForce(long this_addr, float force, int wheel);

    public void updateVehicle(float step) {
        internal_native_updateVehicle(native_address, step);
    }

    /*[-JNI;-NATIVE]
btRaycastVehicle* nativeObject = (btRaycastVehicle*)this_addr;
nativeObject->updateVehicle((float)step);
*/
    public static native void internal_native_updateVehicle(long this_addr, float step);

    public void resetSuspension() {
        internal_native_resetSuspension(native_address);
    }

    /*[-JNI;-NATIVE]
btRaycastVehicle* nativeObject = (btRaycastVehicle*)this_addr;
nativeObject->resetSuspension();
*/
    public static native void internal_native_resetSuspension(long this_addr);

    public float rayCast(btWheelInfo wheel) {
        return internal_native_rayCast(native_address, wheel.native_address);
    }

    /*[-JNI;-NATIVE]
btRaycastVehicle* nativeObject = (btRaycastVehicle*)this_addr;
return nativeObject->rayCast(*((btWheelInfo* )wheel_addr));
*/
    public static native float internal_native_rayCast(long this_addr, long wheel_addr);

    public float getSteeringValue(int wheel) {
        return internal_native_getSteeringValue(native_address, wheel);
    }

    /*[-JNI;-NATIVE]
btRaycastVehicle* nativeObject = (btRaycastVehicle*)this_addr;
return nativeObject->getSteeringValue((int)wheel);
*/
    public static native float internal_native_getSteeringValue(long this_addr, int wheel);

    public void setSteeringValue(float steering, int wheel) {
        internal_native_setSteeringValue(native_address, steering, wheel);
    }

    /*[-JNI;-NATIVE]
btRaycastVehicle* nativeObject = (btRaycastVehicle*)this_addr;
nativeObject->setSteeringValue((float)steering, (int)wheel);
*/
    public static native void internal_native_setSteeringValue(long this_addr, float steering, int wheel);

    public btTransform getWheelTransformWS(int wheelIndex) {
        long pointer = internal_native_getWheelTransformWS(native_address, wheelIndex);
        if (pointer == 0)
            return btTransform.NULL;
        if (btTransform_TEMP_GEN_0 == null)
            btTransform_TEMP_GEN_0 = btTransform.native_new();
        btTransform_TEMP_GEN_0.internal_reset(pointer, false);
        return btTransform_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
btRaycastVehicle* nativeObject = (btRaycastVehicle*)this_addr;
return (jlong)&nativeObject->getWheelTransformWS((int)wheelIndex);
*/
    public static native long internal_native_getWheelTransformWS(long this_addr, int wheelIndex);

    public void updateWheelTransform(int wheelIndex, boolean interpolatedTransform) {
        internal_native_updateWheelTransform(native_address, wheelIndex, interpolatedTransform);
    }

    /*[-JNI;-NATIVE]
btRaycastVehicle* nativeObject = (btRaycastVehicle*)this_addr;
nativeObject->updateWheelTransform((int)wheelIndex, interpolatedTransform);
*/
    public static native void internal_native_updateWheelTransform(long this_addr, int wheelIndex, boolean interpolatedTransform);

    public void updateWheelTransform(int wheelIndex) {
        internal_native_updateWheelTransform(native_address, wheelIndex);
    }

    /*[-JNI;-NATIVE]
btRaycastVehicle* nativeObject = (btRaycastVehicle*)this_addr;
nativeObject->updateWheelTransform((int)wheelIndex);
*/
    public static native void internal_native_updateWheelTransform(long this_addr, int wheelIndex);

    public void updateWheelTransformsWS(btWheelInfo wheel, boolean interpolatedTransform) {
        internal_native_updateWheelTransformsWS(native_address, wheel.native_address, interpolatedTransform);
    }

    /*[-JNI;-NATIVE]
btRaycastVehicle* nativeObject = (btRaycastVehicle*)this_addr;
nativeObject->updateWheelTransformsWS(*((btWheelInfo* )wheel_addr), interpolatedTransform);
*/
    public static native void internal_native_updateWheelTransformsWS(long this_addr, long wheel_addr, boolean interpolatedTransform);

    public void updateWheelTransformsWS(btWheelInfo wheel) {
        internal_native_updateWheelTransformsWS(native_address, wheel.native_address);
    }

    /*[-JNI;-NATIVE]
btRaycastVehicle* nativeObject = (btRaycastVehicle*)this_addr;
nativeObject->updateWheelTransformsWS(*((btWheelInfo* )wheel_addr));
*/
    public static native void internal_native_updateWheelTransformsWS(long this_addr, long wheel_addr);

    public btWheelInfo addWheel(btVector3 connectionPointCS0, btVector3 wheelDirectionCS0, btVector3 wheelAxleCS, float suspensionRestLength, float wheelRadius, btVehicleTuning tuning, boolean isFrontWheel) {
        long pointer = internal_native_addWheel(native_address, connectionPointCS0.native_address, wheelDirectionCS0.native_address, wheelAxleCS.native_address, suspensionRestLength, wheelRadius, tuning.native_address, isFrontWheel);
        if (pointer == 0)
            return btWheelInfo.NULL;
        if (btWheelInfo_TEMP_GEN_0 == null)
            btWheelInfo_TEMP_GEN_0 = btWheelInfo.native_new();
        btWheelInfo_TEMP_GEN_0.internal_reset(pointer, false);
        return btWheelInfo_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
btRaycastVehicle* nativeObject = (btRaycastVehicle*)this_addr;
return (jlong)&nativeObject->addWheel(*((btVector3* )connectionPointCS0_addr), *((btVector3* )wheelDirectionCS0_addr), *((btVector3* )wheelAxleCS_addr), (float)suspensionRestLength, (float)wheelRadius, *((btRaycastVehicle::btVehicleTuning* )tuning_addr), isFrontWheel);
*/
    public static native long internal_native_addWheel(long this_addr, long connectionPointCS0_addr, long wheelDirectionCS0_addr, long wheelAxleCS_addr, float suspensionRestLength, float wheelRadius, long tuning_addr, boolean isFrontWheel);

    public int getNumWheels() {
        return internal_native_getNumWheels(native_address);
    }

    /*[-JNI;-NATIVE]
btRaycastVehicle* nativeObject = (btRaycastVehicle*)this_addr;
return nativeObject->getNumWheels();
*/
    public static native int internal_native_getNumWheels(long this_addr);

    public btRigidBody getRigidBody() {
        long pointer = internal_native_getRigidBody(native_address);
        if (pointer == 0)
            return btRigidBody.NULL;
        if (btRigidBody_TEMP_GEN_0 == null)
            btRigidBody_TEMP_GEN_0 = btRigidBody.native_new();
        btRigidBody_TEMP_GEN_0.internal_reset(pointer, false);
        return btRigidBody_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
btRaycastVehicle* nativeObject = (btRaycastVehicle*)this_addr;
btRigidBody* obj = nativeObject->getRigidBody();
return (jlong)obj;
*/
    public static native long internal_native_getRigidBody(long this_addr);

    public btWheelInfo getWheelInfo(int index) {
        long pointer = internal_native_getWheelInfo(native_address, index);
        if (pointer == 0)
            return btWheelInfo.NULL;
        if (btWheelInfo_TEMP_GEN_1 == null)
            btWheelInfo_TEMP_GEN_1 = btWheelInfo.native_new();
        btWheelInfo_TEMP_GEN_1.internal_reset(pointer, false);
        return btWheelInfo_TEMP_GEN_1;
    }

    /*[-JNI;-NATIVE]
btRaycastVehicle* nativeObject = (btRaycastVehicle*)this_addr;
return (jlong)&nativeObject->getWheelInfo((int)index);
*/
    public static native long internal_native_getWheelInfo(long this_addr, int index);

    public void setBrake(float brake, int wheelIndex) {
        internal_native_setBrake(native_address, brake, wheelIndex);
    }

    /*[-JNI;-NATIVE]
btRaycastVehicle* nativeObject = (btRaycastVehicle*)this_addr;
nativeObject->setBrake((float)brake, (int)wheelIndex);
*/
    public static native void internal_native_setBrake(long this_addr, float brake, int wheelIndex);

    public void setCoordinateSystem(int rightIndex, int upIndex, int forwardIndex) {
        internal_native_setCoordinateSystem(native_address, rightIndex, upIndex, forwardIndex);
    }

    /*[-JNI;-NATIVE]
btRaycastVehicle* nativeObject = (btRaycastVehicle*)this_addr;
nativeObject->setCoordinateSystem((int)rightIndex, (int)upIndex, (int)forwardIndex);
*/
    public static native void internal_native_setCoordinateSystem(long this_addr, int rightIndex, int upIndex, int forwardIndex);

    public float getCurrentSpeedKmHour() {
        return internal_native_getCurrentSpeedKmHour(native_address);
    }

    /*[-JNI;-NATIVE]
btRaycastVehicle* nativeObject = (btRaycastVehicle*)this_addr;
return nativeObject->getCurrentSpeedKmHour();
*/
    public static native float internal_native_getCurrentSpeedKmHour(long this_addr);

    public int getRightAxis() {
        return internal_native_getRightAxis(native_address);
    }

    /*[-JNI;-NATIVE]
btRaycastVehicle* nativeObject = (btRaycastVehicle*)this_addr;
return nativeObject->getRightAxis();
*/
    public static native int internal_native_getRightAxis(long this_addr);

    public int getUpAxis() {
        return internal_native_getUpAxis(native_address);
    }

    /*[-JNI;-NATIVE]
btRaycastVehicle* nativeObject = (btRaycastVehicle*)this_addr;
return nativeObject->getUpAxis();
*/
    public static native int internal_native_getUpAxis(long this_addr);

    public int getForwardAxis() {
        return internal_native_getForwardAxis(native_address);
    }

    /*[-JNI;-NATIVE]
btRaycastVehicle* nativeObject = (btRaycastVehicle*)this_addr;
return nativeObject->getForwardAxis();
*/
    public static native int internal_native_getForwardAxis(long this_addr);

    public btVector3 getForwardVector() {
        long pointer = internal_native_getForwardVector(native_address);
        if (pointer == 0)
            return btVector3.NULL;
        if (btVector3_TEMP_GEN_0 == null)
            btVector3_TEMP_GEN_0 = btVector3.native_new();
        btVector3_TEMP_GEN_0.internal_reset(pointer, false);
        return btVector3_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
btRaycastVehicle* nativeObject = (btRaycastVehicle*)this_addr;
static btVector3 copy_addr;
copy_addr = nativeObject->getForwardVector();
return (jlong)&copy_addr;*/
    public static native long internal_native_getForwardVector(long this_addr);

    public int getUserConstraintType() {
        return internal_native_getUserConstraintType(native_address);
    }

    /*[-JNI;-NATIVE]
btRaycastVehicle* nativeObject = (btRaycastVehicle*)this_addr;
return nativeObject->getUserConstraintType();
*/
    public static native int internal_native_getUserConstraintType(long this_addr);

    public void setUserConstraintType(int userConstraintType) {
        internal_native_setUserConstraintType(native_address, userConstraintType);
    }

    /*[-JNI;-NATIVE]
btRaycastVehicle* nativeObject = (btRaycastVehicle*)this_addr;
nativeObject->setUserConstraintType((int)userConstraintType);
*/
    public static native void internal_native_setUserConstraintType(long this_addr, int userConstraintType);

    public void setUserConstraintId(int uid) {
        internal_native_setUserConstraintId(native_address, uid);
    }

    /*[-JNI;-NATIVE]
btRaycastVehicle* nativeObject = (btRaycastVehicle*)this_addr;
nativeObject->setUserConstraintId((int)uid);
*/
    public static native void internal_native_setUserConstraintId(long this_addr, int uid);

    public int getUserConstraintId() {
        return internal_native_getUserConstraintId(native_address);
    }

    /*[-JNI;-NATIVE]
btRaycastVehicle* nativeObject = (btRaycastVehicle*)this_addr;
return nativeObject->getUserConstraintId();
*/
    public static native int internal_native_getUserConstraintId(long this_addr);

    public void updateFriction(float timeStep) {
        internal_native_updateFriction(native_address, timeStep);
    }

    /*[-JNI;-NATIVE]
btRaycastVehicle* nativeObject = (btRaycastVehicle*)this_addr;
nativeObject->updateFriction((float)timeStep);
*/
    public static native void internal_native_updateFriction(long this_addr, float timeStep);

    public void updateSuspension(float deltaTime) {
        internal_native_updateSuspension(native_address, deltaTime);
    }

    /*[-JNI;-NATIVE]
btRaycastVehicle* nativeObject = (btRaycastVehicle*)this_addr;
nativeObject->updateSuspension((float)deltaTime);
*/
    public static native void internal_native_updateSuspension(long this_addr, float deltaTime);

    public void setPitchControl(float pitch) {
        internal_native_setPitchControl(native_address, pitch);
    }

    /*[-JNI;-NATIVE]
btRaycastVehicle* nativeObject = (btRaycastVehicle*)this_addr;
nativeObject->setPitchControl((float)pitch);
*/
    public static native void internal_native_setPitchControl(long this_addr, float pitch);
}
