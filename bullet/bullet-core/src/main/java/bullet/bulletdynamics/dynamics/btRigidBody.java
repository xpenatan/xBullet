/*-------------------------------------------------------
 * This file was generated by JParser
 *
 * Do not make changes to this file
 *-------------------------------------------------------*/
package bullet.bulletdynamics.dynamics;

import bullet.bulletcollision.collisiondispatch.btCollisionObject;
import bullet.btRigidBodyConstructionInfo;
import bullet.linearmath.btMotionState;
import bullet.bulletcollision.collisionshapes.btCollisionShape;
import bullet.linearmath.btVector3;
import bullet.linearmath.btTransform;
import bullet.linearmath.btMatrix3x3;
import bullet.bulletdynamics.constraintsolver.btTypedConstraint;
import bullet.linearmath.btQuaternion;

public class btRigidBody extends btCollisionObject {

    private btVector3 btVector3_TEMP_GEN_0;

    private btVector3 btVector3_TEMP_GEN_1;

    private btMatrix3x3 btMatrix3x3_TEMP_GEN_0;

    private btVector3 btVector3_TEMP_GEN_2;

    private btVector3 btVector3_TEMP_GEN_3;

    private btVector3 btVector3_TEMP_GEN_4;

    private btVector3 btVector3_TEMP_GEN_5;

    private btTransform btTransform_TEMP_GEN_0;

    private btVector3 btVector3_TEMP_GEN_6;

    private btVector3 btVector3_TEMP_GEN_7;

    private btMotionState btMotionState_TEMP_GEN_0;

    private btVector3 btVector3_TEMP_GEN_8;

    private btTypedConstraint btTypedConstraint_TEMP_GEN_0;

    private btQuaternion btQuaternion_TEMP_GEN_0;

    private btVector3 btVector3_TEMP_GEN_9;

    private btVector3 btVector3_TEMP_GEN_10;

    private btVector3 btVector3_TEMP_GEN_11;

    private btVector3 btVector3_TEMP_GEN_12;

    private btVector3 btVector3_TEMP_GEN_13;

    static public final btRigidBody NULL = btRigidBody.native_new();

    public btRigidBody(btRigidBodyConstructionInfo constructionInfo) {
        super((byte) 1, (char) 1);
        long addr = internal_native_create_btRigidBodyConstructionInfo(constructionInfo.native_address);
        internal_reset(addr, true);
    }

    /*[-JNI;-NATIVE]
return (jlong)new btRigidBody(*((btRigidBody::btRigidBodyConstructionInfo* )constructionInfo_addr));
*/
    public static native long internal_native_create_btRigidBodyConstructionInfo(long constructionInfo_addr);

    public btRigidBody(float mass, btMotionState motionState, btCollisionShape collisionShape, btVector3 localInertia) {
        super((byte) 1, (char) 1);
        long addr = internal_native_create_float_btMotionState_btCollisionShape_btVector3(mass, motionState.native_address, collisionShape.native_address, localInertia.native_address);
        internal_reset(addr, true);
    }

    /*[-JNI;-NATIVE]
return (jlong)new btRigidBody((float)mass, (btMotionState* )motionState_addr, (btCollisionShape* )collisionShape_addr, *((btVector3* )localInertia_addr));
*/
    public static native long internal_native_create_float_btMotionState_btCollisionShape_btVector3(float mass, long motionState_addr, long collisionShape_addr, long localInertia_addr);

    public btRigidBody(float mass, btMotionState motionState, btCollisionShape collisionShape) {
        super((byte) 1, (char) 1);
        long addr = internal_native_create_float_btMotionState_btCollisionShape(mass, motionState.native_address, collisionShape.native_address);
        internal_reset(addr, true);
    }

    /*[-JNI;-NATIVE]
return (jlong)new btRigidBody((float)mass, (btMotionState* )motionState_addr, (btCollisionShape* )collisionShape_addr);
*/
    public static native long internal_native_create_float_btMotionState_btCollisionShape(float mass, long motionState_addr, long collisionShape_addr);

    /**
     * Dummy constructor, used internally to creates objects without C++ pointer
     */
    @Deprecated()
    protected btRigidBody(byte b, char c) {
        super((byte) 1, (char) 1);
    }

    /**
     * @return An empty instance without a native address
     */
    public static btRigidBody native_new() {
        return new btRigidBody((byte) 0, (char) 0);
    }

    protected void deleteNative() {
        internal_native_deleteNative(native_address);
    }

    /*[-JNI;-NATIVE]
btRigidBody* nativeObject = (btRigidBody*)this_addr;
delete nativeObject;
*/
    public static native void internal_native_deleteNative(long this_addr);

    public void proceedToTransform(btTransform newTrans) {
        internal_native_proceedToTransform(native_address, newTrans.native_address);
    }

    /*[-JNI;-NATIVE]
btRigidBody* nativeObject = (btRigidBody*)this_addr;
nativeObject->proceedToTransform(*((btTransform* )newTrans_addr));
*/
    public static native void internal_native_proceedToTransform(long this_addr, long newTrans_addr);

    public void predictIntegratedTransform(float step, btTransform predictedTransform) {
        internal_native_predictIntegratedTransform(native_address, step, predictedTransform.native_address);
    }

    /*[-JNI;-NATIVE]
btRigidBody* nativeObject = (btRigidBody*)this_addr;
nativeObject->predictIntegratedTransform((float)step, *((btTransform* )predictedTransform_addr));
*/
    public static native void internal_native_predictIntegratedTransform(long this_addr, float step, long predictedTransform_addr);

    public void saveKinematicState(float step) {
        internal_native_saveKinematicState(native_address, step);
    }

    /*[-JNI;-NATIVE]
btRigidBody* nativeObject = (btRigidBody*)this_addr;
nativeObject->saveKinematicState((float)step);
*/
    public static native void internal_native_saveKinematicState(long this_addr, float step);

    public void applyGravity() {
        internal_native_applyGravity(native_address);
    }

    /*[-JNI;-NATIVE]
btRigidBody* nativeObject = (btRigidBody*)this_addr;
nativeObject->applyGravity();
*/
    public static native void internal_native_applyGravity(long this_addr);

    public void setGravity(btVector3 acceleration) {
        internal_native_setGravity(native_address, acceleration.native_address);
    }

    /*[-JNI;-NATIVE]
btRigidBody* nativeObject = (btRigidBody*)this_addr;
nativeObject->setGravity(*((btVector3* )acceleration_addr));
*/
    public static native void internal_native_setGravity(long this_addr, long acceleration_addr);

    public btVector3 getGravity() {
        long pointer = internal_native_getGravity(native_address);
        if (pointer == 0)
            return btVector3.NULL;
        if (btVector3_TEMP_GEN_0 == null)
            btVector3_TEMP_GEN_0 = btVector3.native_new();
        btVector3_TEMP_GEN_0.internal_reset(pointer, false);
        return btVector3_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
btRigidBody* nativeObject = (btRigidBody*)this_addr;
return (jlong)&nativeObject->getGravity();
*/
    public static native long internal_native_getGravity(long this_addr);

    public void setDamping(float lin_damping, float ang_damping) {
        internal_native_setDamping(native_address, lin_damping, ang_damping);
    }

    /*[-JNI;-NATIVE]
btRigidBody* nativeObject = (btRigidBody*)this_addr;
nativeObject->setDamping((float)lin_damping, (float)ang_damping);
*/
    public static native void internal_native_setDamping(long this_addr, float lin_damping, float ang_damping);

    public float getLinearDamping() {
        return internal_native_getLinearDamping(native_address);
    }

    /*[-JNI;-NATIVE]
btRigidBody* nativeObject = (btRigidBody*)this_addr;
return nativeObject->getLinearDamping();
*/
    public static native float internal_native_getLinearDamping(long this_addr);

    public float getAngularDamping() {
        return internal_native_getAngularDamping(native_address);
    }

    /*[-JNI;-NATIVE]
btRigidBody* nativeObject = (btRigidBody*)this_addr;
return nativeObject->getAngularDamping();
*/
    public static native float internal_native_getAngularDamping(long this_addr);

    public float getLinearSleepingThreshold() {
        return internal_native_getLinearSleepingThreshold(native_address);
    }

    /*[-JNI;-NATIVE]
btRigidBody* nativeObject = (btRigidBody*)this_addr;
return nativeObject->getLinearSleepingThreshold();
*/
    public static native float internal_native_getLinearSleepingThreshold(long this_addr);

    public float getAngularSleepingThreshold() {
        return internal_native_getAngularSleepingThreshold(native_address);
    }

    /*[-JNI;-NATIVE]
btRigidBody* nativeObject = (btRigidBody*)this_addr;
return nativeObject->getAngularSleepingThreshold();
*/
    public static native float internal_native_getAngularSleepingThreshold(long this_addr);

    public void applyDamping(float timeStep) {
        internal_native_applyDamping(native_address, timeStep);
    }

    /*[-JNI;-NATIVE]
btRigidBody* nativeObject = (btRigidBody*)this_addr;
nativeObject->applyDamping((float)timeStep);
*/
    public static native void internal_native_applyDamping(long this_addr, float timeStep);

    public void setMassProps(float mass, btVector3 inertia) {
        internal_native_setMassProps(native_address, mass, inertia.native_address);
    }

    /*[-JNI;-NATIVE]
btRigidBody* nativeObject = (btRigidBody*)this_addr;
nativeObject->setMassProps((float)mass, *((btVector3* )inertia_addr));
*/
    public static native void internal_native_setMassProps(long this_addr, float mass, long inertia_addr);

    public btVector3 getLinearFactor() {
        long pointer = internal_native_getLinearFactor(native_address);
        if (pointer == 0)
            return btVector3.NULL;
        if (btVector3_TEMP_GEN_1 == null)
            btVector3_TEMP_GEN_1 = btVector3.native_new();
        btVector3_TEMP_GEN_1.internal_reset(pointer, false);
        return btVector3_TEMP_GEN_1;
    }

    /*[-JNI;-NATIVE]
btRigidBody* nativeObject = (btRigidBody*)this_addr;
return (jlong)&nativeObject->getLinearFactor();
*/
    public static native long internal_native_getLinearFactor(long this_addr);

    public void setLinearFactor(btVector3 linearFactor) {
        internal_native_setLinearFactor(native_address, linearFactor.native_address);
    }

    /*[-JNI;-NATIVE]
btRigidBody* nativeObject = (btRigidBody*)this_addr;
nativeObject->setLinearFactor(*((btVector3* )linearFactor_addr));
*/
    public static native void internal_native_setLinearFactor(long this_addr, long linearFactor_addr);

    public float getInvMass() {
        return internal_native_getInvMass(native_address);
    }

    /*[-JNI;-NATIVE]
btRigidBody* nativeObject = (btRigidBody*)this_addr;
return nativeObject->getInvMass();
*/
    public static native float internal_native_getInvMass(long this_addr);

    public btMatrix3x3 getInvInertiaTensorWorld() {
        long pointer = internal_native_getInvInertiaTensorWorld(native_address);
        if (pointer == 0)
            return btMatrix3x3.NULL;
        if (btMatrix3x3_TEMP_GEN_0 == null)
            btMatrix3x3_TEMP_GEN_0 = btMatrix3x3.native_new();
        btMatrix3x3_TEMP_GEN_0.internal_reset(pointer, false);
        return btMatrix3x3_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
btRigidBody* nativeObject = (btRigidBody*)this_addr;
return (jlong)&nativeObject->getInvInertiaTensorWorld();
*/
    public static native long internal_native_getInvInertiaTensorWorld(long this_addr);

    public void integrateVelocities(float step) {
        internal_native_integrateVelocities(native_address, step);
    }

    /*[-JNI;-NATIVE]
btRigidBody* nativeObject = (btRigidBody*)this_addr;
nativeObject->integrateVelocities((float)step);
*/
    public static native void internal_native_integrateVelocities(long this_addr, float step);

    public void setCenterOfMassTransform(btTransform xform) {
        internal_native_setCenterOfMassTransform(native_address, xform.native_address);
    }

    /*[-JNI;-NATIVE]
btRigidBody* nativeObject = (btRigidBody*)this_addr;
nativeObject->setCenterOfMassTransform(*((btTransform* )xform_addr));
*/
    public static native void internal_native_setCenterOfMassTransform(long this_addr, long xform_addr);

    public void applyCentralForce(btVector3 force) {
        internal_native_applyCentralForce(native_address, force.native_address);
    }

    /*[-JNI;-NATIVE]
btRigidBody* nativeObject = (btRigidBody*)this_addr;
nativeObject->applyCentralForce(*((btVector3* )force_addr));
*/
    public static native void internal_native_applyCentralForce(long this_addr, long force_addr);

    public btVector3 getTotalForce() {
        long pointer = internal_native_getTotalForce(native_address);
        if (pointer == 0)
            return btVector3.NULL;
        if (btVector3_TEMP_GEN_2 == null)
            btVector3_TEMP_GEN_2 = btVector3.native_new();
        btVector3_TEMP_GEN_2.internal_reset(pointer, false);
        return btVector3_TEMP_GEN_2;
    }

    /*[-JNI;-NATIVE]
btRigidBody* nativeObject = (btRigidBody*)this_addr;
return (jlong)&nativeObject->getTotalForce();
*/
    public static native long internal_native_getTotalForce(long this_addr);

    public btVector3 getTotalTorque() {
        long pointer = internal_native_getTotalTorque(native_address);
        if (pointer == 0)
            return btVector3.NULL;
        if (btVector3_TEMP_GEN_3 == null)
            btVector3_TEMP_GEN_3 = btVector3.native_new();
        btVector3_TEMP_GEN_3.internal_reset(pointer, false);
        return btVector3_TEMP_GEN_3;
    }

    /*[-JNI;-NATIVE]
btRigidBody* nativeObject = (btRigidBody*)this_addr;
return (jlong)&nativeObject->getTotalTorque();
*/
    public static native long internal_native_getTotalTorque(long this_addr);

    public btVector3 getInvInertiaDiagLocal() {
        long pointer = internal_native_getInvInertiaDiagLocal(native_address);
        if (pointer == 0)
            return btVector3.NULL;
        if (btVector3_TEMP_GEN_4 == null)
            btVector3_TEMP_GEN_4 = btVector3.native_new();
        btVector3_TEMP_GEN_4.internal_reset(pointer, false);
        return btVector3_TEMP_GEN_4;
    }

    /*[-JNI;-NATIVE]
btRigidBody* nativeObject = (btRigidBody*)this_addr;
return (jlong)&nativeObject->getInvInertiaDiagLocal();
*/
    public static native long internal_native_getInvInertiaDiagLocal(long this_addr);

    public void setInvInertiaDiagLocal(btVector3 diagInvInertia) {
        internal_native_setInvInertiaDiagLocal(native_address, diagInvInertia.native_address);
    }

    /*[-JNI;-NATIVE]
btRigidBody* nativeObject = (btRigidBody*)this_addr;
nativeObject->setInvInertiaDiagLocal(*((btVector3* )diagInvInertia_addr));
*/
    public static native void internal_native_setInvInertiaDiagLocal(long this_addr, long diagInvInertia_addr);

    public void setSleepingThresholds(float linear, float angular) {
        internal_native_setSleepingThresholds(native_address, linear, angular);
    }

    /*[-JNI;-NATIVE]
btRigidBody* nativeObject = (btRigidBody*)this_addr;
nativeObject->setSleepingThresholds((float)linear, (float)angular);
*/
    public static native void internal_native_setSleepingThresholds(long this_addr, float linear, float angular);

    public void applyTorque(btVector3 torque) {
        internal_native_applyTorque(native_address, torque.native_address);
    }

    /*[-JNI;-NATIVE]
btRigidBody* nativeObject = (btRigidBody*)this_addr;
nativeObject->applyTorque(*((btVector3* )torque_addr));
*/
    public static native void internal_native_applyTorque(long this_addr, long torque_addr);

    public void applyForce(btVector3 force, btVector3 rel_pos) {
        internal_native_applyForce(native_address, force.native_address, rel_pos.native_address);
    }

    /*[-JNI;-NATIVE]
btRigidBody* nativeObject = (btRigidBody*)this_addr;
nativeObject->applyForce(*((btVector3* )force_addr), *((btVector3* )rel_pos_addr));
*/
    public static native void internal_native_applyForce(long this_addr, long force_addr, long rel_pos_addr);

    public void applyCentralImpulse(btVector3 impulse) {
        internal_native_applyCentralImpulse(native_address, impulse.native_address);
    }

    /*[-JNI;-NATIVE]
btRigidBody* nativeObject = (btRigidBody*)this_addr;
nativeObject->applyCentralImpulse(*((btVector3* )impulse_addr));
*/
    public static native void internal_native_applyCentralImpulse(long this_addr, long impulse_addr);

    public void applyTorqueImpulse(btVector3 torque) {
        internal_native_applyTorqueImpulse(native_address, torque.native_address);
    }

    /*[-JNI;-NATIVE]
btRigidBody* nativeObject = (btRigidBody*)this_addr;
nativeObject->applyTorqueImpulse(*((btVector3* )torque_addr));
*/
    public static native void internal_native_applyTorqueImpulse(long this_addr, long torque_addr);

    public void applyImpulse(btVector3 impulse, btVector3 rel_pos) {
        internal_native_applyImpulse(native_address, impulse.native_address, rel_pos.native_address);
    }

    /*[-JNI;-NATIVE]
btRigidBody* nativeObject = (btRigidBody*)this_addr;
nativeObject->applyImpulse(*((btVector3* )impulse_addr), *((btVector3* )rel_pos_addr));
*/
    public static native void internal_native_applyImpulse(long this_addr, long impulse_addr, long rel_pos_addr);

    public void clearForces() {
        internal_native_clearForces(native_address);
    }

    /*[-JNI;-NATIVE]
btRigidBody* nativeObject = (btRigidBody*)this_addr;
nativeObject->clearForces();
*/
    public static native void internal_native_clearForces(long this_addr);

    public void updateInertiaTensor() {
        internal_native_updateInertiaTensor(native_address);
    }

    /*[-JNI;-NATIVE]
btRigidBody* nativeObject = (btRigidBody*)this_addr;
nativeObject->updateInertiaTensor();
*/
    public static native void internal_native_updateInertiaTensor(long this_addr);

    public btVector3 getCenterOfMassPosition() {
        long pointer = internal_native_getCenterOfMassPosition(native_address);
        if (pointer == 0)
            return btVector3.NULL;
        if (btVector3_TEMP_GEN_5 == null)
            btVector3_TEMP_GEN_5 = btVector3.native_new();
        btVector3_TEMP_GEN_5.internal_reset(pointer, false);
        return btVector3_TEMP_GEN_5;
    }

    /*[-JNI;-NATIVE]
btRigidBody* nativeObject = (btRigidBody*)this_addr;
return (jlong)&nativeObject->getCenterOfMassPosition();
*/
    public static native long internal_native_getCenterOfMassPosition(long this_addr);

    public btTransform getCenterOfMassTransform() {
        long pointer = internal_native_getCenterOfMassTransform(native_address);
        if (pointer == 0)
            return btTransform.NULL;
        if (btTransform_TEMP_GEN_0 == null)
            btTransform_TEMP_GEN_0 = btTransform.native_new();
        btTransform_TEMP_GEN_0.internal_reset(pointer, false);
        return btTransform_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
btRigidBody* nativeObject = (btRigidBody*)this_addr;
return (jlong)&nativeObject->getCenterOfMassTransform();
*/
    public static native long internal_native_getCenterOfMassTransform(long this_addr);

    public btVector3 getLinearVelocity() {
        long pointer = internal_native_getLinearVelocity(native_address);
        if (pointer == 0)
            return btVector3.NULL;
        if (btVector3_TEMP_GEN_6 == null)
            btVector3_TEMP_GEN_6 = btVector3.native_new();
        btVector3_TEMP_GEN_6.internal_reset(pointer, false);
        return btVector3_TEMP_GEN_6;
    }

    /*[-JNI;-NATIVE]
btRigidBody* nativeObject = (btRigidBody*)this_addr;
return (jlong)&nativeObject->getLinearVelocity();
*/
    public static native long internal_native_getLinearVelocity(long this_addr);

    public btVector3 getAngularVelocity() {
        long pointer = internal_native_getAngularVelocity(native_address);
        if (pointer == 0)
            return btVector3.NULL;
        if (btVector3_TEMP_GEN_7 == null)
            btVector3_TEMP_GEN_7 = btVector3.native_new();
        btVector3_TEMP_GEN_7.internal_reset(pointer, false);
        return btVector3_TEMP_GEN_7;
    }

    /*[-JNI;-NATIVE]
btRigidBody* nativeObject = (btRigidBody*)this_addr;
return (jlong)&nativeObject->getAngularVelocity();
*/
    public static native long internal_native_getAngularVelocity(long this_addr);

    public void setLinearVelocity(btVector3 lin_vel) {
        internal_native_setLinearVelocity(native_address, lin_vel.native_address);
    }

    /*[-JNI;-NATIVE]
btRigidBody* nativeObject = (btRigidBody*)this_addr;
nativeObject->setLinearVelocity(*((btVector3* )lin_vel_addr));
*/
    public static native void internal_native_setLinearVelocity(long this_addr, long lin_vel_addr);

    public void setAngularVelocity(btVector3 ang_vel) {
        internal_native_setAngularVelocity(native_address, ang_vel.native_address);
    }

    /*[-JNI;-NATIVE]
btRigidBody* nativeObject = (btRigidBody*)this_addr;
nativeObject->setAngularVelocity(*((btVector3* )ang_vel_addr));
*/
    public static native void internal_native_setAngularVelocity(long this_addr, long ang_vel_addr);

    public void translate(btVector3 trs) {
        internal_native_translate(native_address, trs.native_address);
    }

    /*[-JNI;-NATIVE]
btRigidBody* nativeObject = (btRigidBody*)this_addr;
nativeObject->translate(*((btVector3* )trs_addr));
*/
    public static native void internal_native_translate(long this_addr, long trs_addr);

    public void getAabb(btVector3 aabbMin, btVector3 aabbMax) {
        internal_native_getAabb(native_address, aabbMin.native_address, aabbMax.native_address);
    }

    /*[-JNI;-NATIVE]
btRigidBody* nativeObject = (btRigidBody*)this_addr;
nativeObject->getAabb(*((btVector3* )aabbMin_addr), *((btVector3* )aabbMax_addr));
*/
    public static native void internal_native_getAabb(long this_addr, long aabbMin_addr, long aabbMax_addr);

    public float computeImpulseDenominator(btVector3 pos, btVector3 normal) {
        return internal_native_computeImpulseDenominator(native_address, pos.native_address, normal.native_address);
    }

    /*[-JNI;-NATIVE]
btRigidBody* nativeObject = (btRigidBody*)this_addr;
return nativeObject->computeImpulseDenominator(*((btVector3* )pos_addr), *((btVector3* )normal_addr));
*/
    public static native float internal_native_computeImpulseDenominator(long this_addr, long pos_addr, long normal_addr);

    public float computeAngularImpulseDenominator(btVector3 axis) {
        return internal_native_computeAngularImpulseDenominator(native_address, axis.native_address);
    }

    /*[-JNI;-NATIVE]
btRigidBody* nativeObject = (btRigidBody*)this_addr;
return nativeObject->computeAngularImpulseDenominator(*((btVector3* )axis_addr));
*/
    public static native float internal_native_computeAngularImpulseDenominator(long this_addr, long axis_addr);

    public void updateDeactivation(float timeStep) {
        internal_native_updateDeactivation(native_address, timeStep);
    }

    /*[-JNI;-NATIVE]
btRigidBody* nativeObject = (btRigidBody*)this_addr;
nativeObject->updateDeactivation((float)timeStep);
*/
    public static native void internal_native_updateDeactivation(long this_addr, float timeStep);

    public boolean wantsSleeping() {
        return internal_native_wantsSleeping(native_address);
    }

    /*[-JNI;-NATIVE]
btRigidBody* nativeObject = (btRigidBody*)this_addr;
return nativeObject->wantsSleeping();
*/
    public static native boolean internal_native_wantsSleeping(long this_addr);

    public btMotionState getMotionState() {
        long pointer = internal_native_getMotionState(native_address);
        if (pointer == 0)
            return btMotionState.NULL;
        if (btMotionState_TEMP_GEN_0 == null)
            btMotionState_TEMP_GEN_0 = btMotionState.native_new();
        btMotionState_TEMP_GEN_0.internal_reset(pointer, false);
        return btMotionState_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
btRigidBody* nativeObject = (btRigidBody*)this_addr;
btMotionState* obj = nativeObject->getMotionState();
return (jlong)obj;
*/
    public static native long internal_native_getMotionState(long this_addr);

    public void setMotionState(btMotionState motionState) {
        internal_native_setMotionState(native_address, motionState.native_address);
    }

    /*[-JNI;-NATIVE]
btRigidBody* nativeObject = (btRigidBody*)this_addr;
nativeObject->setMotionState((btMotionState* )motionState_addr);
*/
    public static native void internal_native_setMotionState(long this_addr, long motionState_addr);

    public void setAngularFactor(btVector3 angFac) {
        internal_native_setAngularFactor(native_address, angFac.native_address);
    }

    /*[-JNI;-NATIVE]
btRigidBody* nativeObject = (btRigidBody*)this_addr;
nativeObject->setAngularFactor(*((btVector3* )angFac_addr));
*/
    public static native void internal_native_setAngularFactor(long this_addr, long angFac_addr);

    public btVector3 getAngularFactor() {
        long pointer = internal_native_getAngularFactor(native_address);
        if (pointer == 0)
            return btVector3.NULL;
        if (btVector3_TEMP_GEN_8 == null)
            btVector3_TEMP_GEN_8 = btVector3.native_new();
        btVector3_TEMP_GEN_8.internal_reset(pointer, false);
        return btVector3_TEMP_GEN_8;
    }

    /*[-JNI;-NATIVE]
btRigidBody* nativeObject = (btRigidBody*)this_addr;
return (jlong)&nativeObject->getAngularFactor();
*/
    public static native long internal_native_getAngularFactor(long this_addr);

    public boolean isInWorld() {
        return internal_native_isInWorld(native_address);
    }

    /*[-JNI;-NATIVE]
btRigidBody* nativeObject = (btRigidBody*)this_addr;
return nativeObject->isInWorld();
*/
    public static native boolean internal_native_isInWorld(long this_addr);

    public void addConstraintRef(btTypedConstraint c) {
        internal_native_addConstraintRef(native_address, c.native_address);
    }

    /*[-JNI;-NATIVE]
btRigidBody* nativeObject = (btRigidBody*)this_addr;
nativeObject->addConstraintRef((btTypedConstraint* )c_addr);
*/
    public static native void internal_native_addConstraintRef(long this_addr, long c_addr);

    public void removeConstraintRef(btTypedConstraint c) {
        internal_native_removeConstraintRef(native_address, c.native_address);
    }

    /*[-JNI;-NATIVE]
btRigidBody* nativeObject = (btRigidBody*)this_addr;
nativeObject->removeConstraintRef((btTypedConstraint* )c_addr);
*/
    public static native void internal_native_removeConstraintRef(long this_addr, long c_addr);

    public btTypedConstraint getConstraintRef(int index) {
        long pointer = internal_native_getConstraintRef(native_address, index);
        if (pointer == 0)
            return btTypedConstraint.NULL;
        if (btTypedConstraint_TEMP_GEN_0 == null)
            btTypedConstraint_TEMP_GEN_0 = btTypedConstraint.native_new();
        btTypedConstraint_TEMP_GEN_0.internal_reset(pointer, false);
        return btTypedConstraint_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
btRigidBody* nativeObject = (btRigidBody*)this_addr;
btTypedConstraint* obj = nativeObject->getConstraintRef((int)index);
return (jlong)obj;
*/
    public static native long internal_native_getConstraintRef(long this_addr, int index);

    public int getNumConstraintRefs() {
        return internal_native_getNumConstraintRefs(native_address);
    }

    /*[-JNI;-NATIVE]
btRigidBody* nativeObject = (btRigidBody*)this_addr;
return nativeObject->getNumConstraintRefs();
*/
    public static native int internal_native_getNumConstraintRefs(long this_addr);

    public void setFlags(int flags) {
        internal_native_setFlags(native_address, flags);
    }

    /*[-JNI;-NATIVE]
btRigidBody* nativeObject = (btRigidBody*)this_addr;
nativeObject->setFlags((int)flags);
*/
    public static native void internal_native_setFlags(long this_addr, int flags);

    public int getFlags() {
        return internal_native_getFlags(native_address);
    }

    /*[-JNI;-NATIVE]
btRigidBody* nativeObject = (btRigidBody*)this_addr;
return nativeObject->getFlags();
*/
    public static native int internal_native_getFlags(long this_addr);

    public btQuaternion getOrientation() {
        long pointer = internal_native_getOrientation(native_address);
        if (pointer == 0)
            return btQuaternion.NULL;
        if (btQuaternion_TEMP_GEN_0 == null)
            btQuaternion_TEMP_GEN_0 = btQuaternion.native_new();
        btQuaternion_TEMP_GEN_0.internal_reset(pointer, false);
        return btQuaternion_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
btRigidBody* nativeObject = (btRigidBody*)this_addr;
static btQuaternion copy_addr;
copy_addr = nativeObject->getOrientation();
return (jlong)&copy_addr;*/
    public static native long internal_native_getOrientation(long this_addr);

    public btVector3 getVelocityInLocalPoint(btVector3 rel_pos) {
        long pointer = internal_native_getVelocityInLocalPoint(native_address, rel_pos.native_address);
        if (pointer == 0)
            return btVector3.NULL;
        if (btVector3_TEMP_GEN_9 == null)
            btVector3_TEMP_GEN_9 = btVector3.native_new();
        btVector3_TEMP_GEN_9.internal_reset(pointer, false);
        return btVector3_TEMP_GEN_9;
    }

    /*[-JNI;-NATIVE]
btRigidBody* nativeObject = (btRigidBody*)this_addr;
static btVector3 copy_addr;
copy_addr = nativeObject->getVelocityInLocalPoint(*((btVector3* )rel_pos_addr));
return (jlong)&copy_addr;*/
    public static native long internal_native_getVelocityInLocalPoint(long this_addr, long rel_pos_addr);

    public btVector3 computeGyroscopicImpulseImplicit_World(float dt) {
        long pointer = internal_native_computeGyroscopicImpulseImplicit_World(native_address, dt);
        if (pointer == 0)
            return btVector3.NULL;
        if (btVector3_TEMP_GEN_10 == null)
            btVector3_TEMP_GEN_10 = btVector3.native_new();
        btVector3_TEMP_GEN_10.internal_reset(pointer, false);
        return btVector3_TEMP_GEN_10;
    }

    /*[-JNI;-NATIVE]
btRigidBody* nativeObject = (btRigidBody*)this_addr;
static btVector3 copy_addr;
copy_addr = nativeObject->computeGyroscopicImpulseImplicit_World((float)dt);
return (jlong)&copy_addr;*/
    public static native long internal_native_computeGyroscopicImpulseImplicit_World(long this_addr, float dt);

    public btVector3 computeGyroscopicImpulseImplicit_Body(float step) {
        long pointer = internal_native_computeGyroscopicImpulseImplicit_Body(native_address, step);
        if (pointer == 0)
            return btVector3.NULL;
        if (btVector3_TEMP_GEN_11 == null)
            btVector3_TEMP_GEN_11 = btVector3.native_new();
        btVector3_TEMP_GEN_11.internal_reset(pointer, false);
        return btVector3_TEMP_GEN_11;
    }

    /*[-JNI;-NATIVE]
btRigidBody* nativeObject = (btRigidBody*)this_addr;
static btVector3 copy_addr;
copy_addr = nativeObject->computeGyroscopicImpulseImplicit_Body((float)step);
return (jlong)&copy_addr;*/
    public static native long internal_native_computeGyroscopicImpulseImplicit_Body(long this_addr, float step);

    public btVector3 computeGyroscopicForceExplicit(float maxGyroscopicForce) {
        long pointer = internal_native_computeGyroscopicForceExplicit(native_address, maxGyroscopicForce);
        if (pointer == 0)
            return btVector3.NULL;
        if (btVector3_TEMP_GEN_12 == null)
            btVector3_TEMP_GEN_12 = btVector3.native_new();
        btVector3_TEMP_GEN_12.internal_reset(pointer, false);
        return btVector3_TEMP_GEN_12;
    }

    /*[-JNI;-NATIVE]
btRigidBody* nativeObject = (btRigidBody*)this_addr;
static btVector3 copy_addr;
copy_addr = nativeObject->computeGyroscopicForceExplicit((float)maxGyroscopicForce);
return (jlong)&copy_addr;*/
    public static native long internal_native_computeGyroscopicForceExplicit(long this_addr, float maxGyroscopicForce);

    public btVector3 getLocalInertia() {
        long pointer = internal_native_getLocalInertia(native_address);
        if (pointer == 0)
            return btVector3.NULL;
        if (btVector3_TEMP_GEN_13 == null)
            btVector3_TEMP_GEN_13 = btVector3.native_new();
        btVector3_TEMP_GEN_13.internal_reset(pointer, false);
        return btVector3_TEMP_GEN_13;
    }

    /*[-JNI;-NATIVE]
btRigidBody* nativeObject = (btRigidBody*)this_addr;
static btVector3 copy_addr;
copy_addr = nativeObject->getLocalInertia();
return (jlong)&copy_addr;*/
    public static native long internal_native_getLocalInertia(long this_addr);

    public int get_m_contactSolverType() {
        return internal_native_get_m_contactSolverType(native_address);
    }

    /*[-JNI;-NATIVE]
btRigidBody* nativeObject = (btRigidBody*)this_addr;
return nativeObject->m_contactSolverType;
*/
    public static native int internal_native_get_m_contactSolverType(long this_addr);

    public void set_m_contactSolverType(int m_contactSolverType) {
        internal_native_set_m_contactSolverType(native_address, m_contactSolverType);
    }

    /*[-JNI;-NATIVE]
btRigidBody* nativeObject = (btRigidBody*)this_addr;
nativeObject->m_contactSolverType = m_contactSolverType;
*/
    public static native void internal_native_set_m_contactSolverType(long this_addr, int m_contactSolverType);

    public int get_m_frictionSolverType() {
        return internal_native_get_m_frictionSolverType(native_address);
    }

    /*[-JNI;-NATIVE]
btRigidBody* nativeObject = (btRigidBody*)this_addr;
return nativeObject->m_frictionSolverType;
*/
    public static native int internal_native_get_m_frictionSolverType(long this_addr);

    public void set_m_frictionSolverType(int m_frictionSolverType) {
        internal_native_set_m_frictionSolverType(native_address, m_frictionSolverType);
    }

    /*[-JNI;-NATIVE]
btRigidBody* nativeObject = (btRigidBody*)this_addr;
nativeObject->m_frictionSolverType = m_frictionSolverType;
*/
    public static native void internal_native_set_m_frictionSolverType(long this_addr, int m_frictionSolverType);
}
