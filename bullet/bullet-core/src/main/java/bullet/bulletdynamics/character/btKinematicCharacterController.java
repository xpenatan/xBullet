/*-------------------------------------------------------
 * This file was generated by JParser
 *
 * Do not make changes to this file
 *-------------------------------------------------------*/
package bullet.bulletdynamics.character;

import bullet.bulletdynamics.dynamics.btActionInterface;
import bullet.btPairCachingGhostObject;
import bullet.bulletcollision.collisionshapes.btConvexShape;
import bullet.linearmath.btVector3;
import bullet.bulletcollision.collisiondispatch.btCollisionWorld;

public class btKinematicCharacterController extends btActionInterface {

    private btVector3 btVector3_TEMP_GEN_0;

    private btPairCachingGhostObject btPairCachingGhostObject_TEMP_GEN_0;

    static public final btKinematicCharacterController NULL = btKinematicCharacterController.native_new();

    public btKinematicCharacterController(btPairCachingGhostObject ghostObject, btConvexShape convexShape, float stepHeight, btVector3 upAxis) {
        super((byte) 1, (char) 1);
        long addr = internal_native_create_btPairCachingGhostObject_btConvexShape_float_btVector3(ghostObject.native_address, convexShape.native_address, stepHeight, upAxis.native_address);
        internal_reset(addr, true);
    }

    /*[-JNI;-NATIVE]
return (jlong)new btKinematicCharacterController((btPairCachingGhostObject* )ghostObject_addr, (btConvexShape* )convexShape_addr, (float)stepHeight, *((btVector3* )upAxis_addr));
*/
    public static native long internal_native_create_btPairCachingGhostObject_btConvexShape_float_btVector3(long ghostObject_addr, long convexShape_addr, float stepHeight, long upAxis_addr);

    public btKinematicCharacterController(btPairCachingGhostObject ghostObject, btConvexShape convexShape, float stepHeight) {
        super((byte) 1, (char) 1);
        long addr = internal_native_create_btPairCachingGhostObject_btConvexShape_float(ghostObject.native_address, convexShape.native_address, stepHeight);
        internal_reset(addr, true);
    }

    /*[-JNI;-NATIVE]
return (jlong)new btKinematicCharacterController((btPairCachingGhostObject* )ghostObject_addr, (btConvexShape* )convexShape_addr, (float)stepHeight);
*/
    public static native long internal_native_create_btPairCachingGhostObject_btConvexShape_float(long ghostObject_addr, long convexShape_addr, float stepHeight);

    /**
     * Dummy constructor, used internally to creates objects without C++ pointer
     */
    @Deprecated()
    protected btKinematicCharacterController(byte b, char c) {
        super((byte) 1, (char) 1);
    }

    /**
     * @return An empty instance without a native address
     */
    public static btKinematicCharacterController native_new() {
        return new btKinematicCharacterController((byte) 0, (char) 0);
    }

    protected void deleteNative() {
        internal_native_deleteNative(native_address);
    }

    /*[-JNI;-NATIVE]
btKinematicCharacterController* nativeObject = (btKinematicCharacterController*)this_addr;
delete nativeObject;
*/
    public static native void internal_native_deleteNative(long this_addr);

    public void setUp(btVector3 up) {
        internal_native_setUp(native_address, up.native_address);
    }

    /*[-JNI;-NATIVE]
btKinematicCharacterController* nativeObject = (btKinematicCharacterController*)this_addr;
nativeObject->setUp(*((btVector3* )up_addr));
*/
    public static native void internal_native_setUp(long this_addr, long up_addr);

    public void setWalkDirection(btVector3 walkDirection) {
        internal_native_setWalkDirection(native_address, walkDirection.native_address);
    }

    /*[-JNI;-NATIVE]
btKinematicCharacterController* nativeObject = (btKinematicCharacterController*)this_addr;
nativeObject->setWalkDirection(*((btVector3* )walkDirection_addr));
*/
    public static native void internal_native_setWalkDirection(long this_addr, long walkDirection_addr);

    public void setVelocityForTimeInterval(btVector3 velocity, float timeInterval) {
        internal_native_setVelocityForTimeInterval(native_address, velocity.native_address, timeInterval);
    }

    /*[-JNI;-NATIVE]
btKinematicCharacterController* nativeObject = (btKinematicCharacterController*)this_addr;
nativeObject->setVelocityForTimeInterval(*((btVector3* )velocity_addr), (float)timeInterval);
*/
    public static native void internal_native_setVelocityForTimeInterval(long this_addr, long velocity_addr, float timeInterval);

    public void warp(btVector3 origin) {
        internal_native_warp(native_address, origin.native_address);
    }

    /*[-JNI;-NATIVE]
btKinematicCharacterController* nativeObject = (btKinematicCharacterController*)this_addr;
nativeObject->warp(*((btVector3* )origin_addr));
*/
    public static native void internal_native_warp(long this_addr, long origin_addr);

    public void preStep(btCollisionWorld collisionWorld) {
        internal_native_preStep(native_address, collisionWorld.native_address);
    }

    /*[-JNI;-NATIVE]
btKinematicCharacterController* nativeObject = (btKinematicCharacterController*)this_addr;
nativeObject->preStep((btCollisionWorld* )collisionWorld_addr);
*/
    public static native void internal_native_preStep(long this_addr, long collisionWorld_addr);

    public void playerStep(btCollisionWorld collisionWorld, float dt) {
        internal_native_playerStep(native_address, collisionWorld.native_address, dt);
    }

    /*[-JNI;-NATIVE]
btKinematicCharacterController* nativeObject = (btKinematicCharacterController*)this_addr;
nativeObject->playerStep((btCollisionWorld* )collisionWorld_addr, (float)dt);
*/
    public static native void internal_native_playerStep(long this_addr, long collisionWorld_addr, float dt);

    public void setFallSpeed(float fallSpeed) {
        internal_native_setFallSpeed(native_address, fallSpeed);
    }

    /*[-JNI;-NATIVE]
btKinematicCharacterController* nativeObject = (btKinematicCharacterController*)this_addr;
nativeObject->setFallSpeed((float)fallSpeed);
*/
    public static native void internal_native_setFallSpeed(long this_addr, float fallSpeed);

    public void setJumpSpeed(float jumpSpeed) {
        internal_native_setJumpSpeed(native_address, jumpSpeed);
    }

    /*[-JNI;-NATIVE]
btKinematicCharacterController* nativeObject = (btKinematicCharacterController*)this_addr;
nativeObject->setJumpSpeed((float)jumpSpeed);
*/
    public static native void internal_native_setJumpSpeed(long this_addr, float jumpSpeed);

    public void setMaxJumpHeight(float maxJumpHeight) {
        internal_native_setMaxJumpHeight(native_address, maxJumpHeight);
    }

    /*[-JNI;-NATIVE]
btKinematicCharacterController* nativeObject = (btKinematicCharacterController*)this_addr;
nativeObject->setMaxJumpHeight((float)maxJumpHeight);
*/
    public static native void internal_native_setMaxJumpHeight(long this_addr, float maxJumpHeight);

    public boolean canJump() {
        return internal_native_canJump(native_address);
    }

    /*[-JNI;-NATIVE]
btKinematicCharacterController* nativeObject = (btKinematicCharacterController*)this_addr;
return nativeObject->canJump();
*/
    public static native boolean internal_native_canJump(long this_addr);

    public void jump(btVector3 v) {
        internal_native_jump(native_address, v.native_address);
    }

    /*[-JNI;-NATIVE]
btKinematicCharacterController* nativeObject = (btKinematicCharacterController*)this_addr;
nativeObject->jump(*((btVector3* )v_addr));
*/
    public static native void internal_native_jump(long this_addr, long v_addr);

    public void jump() {
        internal_native_jump(native_address);
    }

    /*[-JNI;-NATIVE]
btKinematicCharacterController* nativeObject = (btKinematicCharacterController*)this_addr;
nativeObject->jump();
*/
    public static native void internal_native_jump(long this_addr);

    public void setGravity(btVector3 gravity) {
        internal_native_setGravity(native_address, gravity.native_address);
    }

    /*[-JNI;-NATIVE]
btKinematicCharacterController* nativeObject = (btKinematicCharacterController*)this_addr;
nativeObject->setGravity(*((btVector3* )gravity_addr));
*/
    public static native void internal_native_setGravity(long this_addr, long gravity_addr);

    public btVector3 getGravity() {
        long pointer = internal_native_getGravity(native_address);
        if (pointer == 0)
            return btVector3.NULL;
        if (btVector3_TEMP_GEN_0 == null)
            btVector3_TEMP_GEN_0 = btVector3.native_new();
        btVector3_TEMP_GEN_0.internal_reset(pointer, false);
        return btVector3_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
btKinematicCharacterController* nativeObject = (btKinematicCharacterController*)this_addr;
static btVector3 copy_addr;
copy_addr = nativeObject->getGravity();
return (jlong)&copy_addr;*/
    public static native long internal_native_getGravity(long this_addr);

    public void setMaxSlope(float slopeRadians) {
        internal_native_setMaxSlope(native_address, slopeRadians);
    }

    /*[-JNI;-NATIVE]
btKinematicCharacterController* nativeObject = (btKinematicCharacterController*)this_addr;
nativeObject->setMaxSlope((float)slopeRadians);
*/
    public static native void internal_native_setMaxSlope(long this_addr, float slopeRadians);

    public float getMaxSlope() {
        return internal_native_getMaxSlope(native_address);
    }

    /*[-JNI;-NATIVE]
btKinematicCharacterController* nativeObject = (btKinematicCharacterController*)this_addr;
return nativeObject->getMaxSlope();
*/
    public static native float internal_native_getMaxSlope(long this_addr);

    public btPairCachingGhostObject getGhostObject() {
        long pointer = internal_native_getGhostObject(native_address);
        if (pointer == 0)
            return btPairCachingGhostObject.NULL;
        if (btPairCachingGhostObject_TEMP_GEN_0 == null)
            btPairCachingGhostObject_TEMP_GEN_0 = btPairCachingGhostObject.native_new();
        btPairCachingGhostObject_TEMP_GEN_0.internal_reset(pointer, false);
        return btPairCachingGhostObject_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
btKinematicCharacterController* nativeObject = (btKinematicCharacterController*)this_addr;
btPairCachingGhostObject* obj = nativeObject->getGhostObject();
return (jlong)obj;
*/
    public static native long internal_native_getGhostObject(long this_addr);

    public void setUseGhostSweepTest(boolean useGhostObjectSweepTest) {
        internal_native_setUseGhostSweepTest(native_address, useGhostObjectSweepTest);
    }

    /*[-JNI;-NATIVE]
btKinematicCharacterController* nativeObject = (btKinematicCharacterController*)this_addr;
nativeObject->setUseGhostSweepTest(useGhostObjectSweepTest);
*/
    public static native void internal_native_setUseGhostSweepTest(long this_addr, boolean useGhostObjectSweepTest);

    public boolean onGround() {
        return internal_native_onGround(native_address);
    }

    /*[-JNI;-NATIVE]
btKinematicCharacterController* nativeObject = (btKinematicCharacterController*)this_addr;
return nativeObject->onGround();
*/
    public static native boolean internal_native_onGround(long this_addr);
}
