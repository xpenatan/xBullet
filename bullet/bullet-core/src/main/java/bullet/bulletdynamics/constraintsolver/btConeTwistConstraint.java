/*-------------------------------------------------------
 * This file was generated by JParser
 *
 * Do not make changes to this file
 *-------------------------------------------------------*/
package bullet.bulletdynamics.constraintsolver;

import bullet.bulletdynamics.dynamics.btRigidBody;
import bullet.linearmath.btTransform;
import bullet.linearmath.btQuaternion;

public class btConeTwistConstraint extends btTypedConstraint {

    static public final btConeTwistConstraint NULL = btConeTwistConstraint.native_new();

    public btConeTwistConstraint(btRigidBody rbA, btRigidBody rbB, btTransform rbAFrame, btTransform rbBFrame) {
        super((byte) 1, (char) 1);
        long addr = internal_native_create_btRigidBody_btRigidBody_btTransform_btTransform(rbA.native_address, rbB.native_address, rbAFrame.native_address, rbBFrame.native_address);
        internal_reset(addr, true);
    }

    /*[-JNI;-NATIVE]
return (jlong)new btConeTwistConstraint(*((btRigidBody* )rbA_addr), *((btRigidBody* )rbB_addr), *((btTransform* )rbAFrame_addr), *((btTransform* )rbBFrame_addr));
*/
    public static native long internal_native_create_btRigidBody_btRigidBody_btTransform_btTransform(long rbA_addr, long rbB_addr, long rbAFrame_addr, long rbBFrame_addr);

    public btConeTwistConstraint(btRigidBody rbA, btTransform rbAFrame) {
        super((byte) 1, (char) 1);
        long addr = internal_native_create_btRigidBody_btTransform(rbA.native_address, rbAFrame.native_address);
        internal_reset(addr, true);
    }

    /*[-JNI;-NATIVE]
return (jlong)new btConeTwistConstraint(*((btRigidBody* )rbA_addr), *((btTransform* )rbAFrame_addr));
*/
    public static native long internal_native_create_btRigidBody_btTransform(long rbA_addr, long rbAFrame_addr);

    /**
     * Dummy constructor, used internally to creates objects without C++ pointer
     */
    @Deprecated()
    protected btConeTwistConstraint(byte b, char c) {
        super((byte) 1, (char) 1);
    }

    /**
     * @return An empty instance without a native address
     */
    public static btConeTwistConstraint native_new() {
        return new btConeTwistConstraint((byte) 0, (char) 0);
    }

    protected void deleteNative() {
        internal_native_deleteNative(native_address);
    }

    /*[-JNI;-NATIVE]
btConeTwistConstraint* nativeObject = (btConeTwistConstraint*)this_addr;
delete nativeObject;
*/
    public static native void internal_native_deleteNative(long this_addr);

    public void setLimit(int limitIndex, float limitValue) {
        internal_native_setLimit(native_address, limitIndex, limitValue);
    }

    /*[-JNI;-NATIVE]
btConeTwistConstraint* nativeObject = (btConeTwistConstraint*)this_addr;
nativeObject->setLimit((int)limitIndex, (float)limitValue);
*/
    public static native void internal_native_setLimit(long this_addr, int limitIndex, float limitValue);

    public void setLimit(float _swingSpan1, float _swingSpan2, float _twistSpan, float _softness, float _biasFactor, float _relaxationFactor) {
        internal_native_setLimit(native_address, _swingSpan1, _swingSpan2, _twistSpan, _softness, _biasFactor, _relaxationFactor);
    }

    /*[-JNI;-NATIVE]
btConeTwistConstraint* nativeObject = (btConeTwistConstraint*)this_addr;
nativeObject->setLimit((float)_swingSpan1, (float)_swingSpan2, (float)_twistSpan, (float)_softness, (float)_biasFactor, (float)_relaxationFactor);
*/
    public static native void internal_native_setLimit(long this_addr, float _swingSpan1, float _swingSpan2, float _twistSpan, float _softness, float _biasFactor, float _relaxationFactor);

    public void setLimit(float _swingSpan1, float _swingSpan2, float _twistSpan, float _softness, float _biasFactor) {
        internal_native_setLimit(native_address, _swingSpan1, _swingSpan2, _twistSpan, _softness, _biasFactor);
    }

    /*[-JNI;-NATIVE]
btConeTwistConstraint* nativeObject = (btConeTwistConstraint*)this_addr;
nativeObject->setLimit((float)_swingSpan1, (float)_swingSpan2, (float)_twistSpan, (float)_softness, (float)_biasFactor);
*/
    public static native void internal_native_setLimit(long this_addr, float _swingSpan1, float _swingSpan2, float _twistSpan, float _softness, float _biasFactor);

    public void setLimit(float _swingSpan1, float _swingSpan2, float _twistSpan, float _softness) {
        internal_native_setLimit(native_address, _swingSpan1, _swingSpan2, _twistSpan, _softness);
    }

    /*[-JNI;-NATIVE]
btConeTwistConstraint* nativeObject = (btConeTwistConstraint*)this_addr;
nativeObject->setLimit((float)_swingSpan1, (float)_swingSpan2, (float)_twistSpan, (float)_softness);
*/
    public static native void internal_native_setLimit(long this_addr, float _swingSpan1, float _swingSpan2, float _twistSpan, float _softness);

    public void setLimit(float _swingSpan1, float _swingSpan2, float _twistSpan) {
        internal_native_setLimit(native_address, _swingSpan1, _swingSpan2, _twistSpan);
    }

    /*[-JNI;-NATIVE]
btConeTwistConstraint* nativeObject = (btConeTwistConstraint*)this_addr;
nativeObject->setLimit((float)_swingSpan1, (float)_swingSpan2, (float)_twistSpan);
*/
    public static native void internal_native_setLimit(long this_addr, float _swingSpan1, float _swingSpan2, float _twistSpan);

    public void setAngularOnly(boolean angularOnly) {
        internal_native_setAngularOnly(native_address, angularOnly);
    }

    /*[-JNI;-NATIVE]
btConeTwistConstraint* nativeObject = (btConeTwistConstraint*)this_addr;
nativeObject->setAngularOnly(angularOnly);
*/
    public static native void internal_native_setAngularOnly(long this_addr, boolean angularOnly);

    public void setDamping(float damping) {
        internal_native_setDamping(native_address, damping);
    }

    /*[-JNI;-NATIVE]
btConeTwistConstraint* nativeObject = (btConeTwistConstraint*)this_addr;
nativeObject->setDamping((float)damping);
*/
    public static native void internal_native_setDamping(long this_addr, float damping);

    public void enableMotor(boolean b) {
        internal_native_enableMotor(native_address, b);
    }

    /*[-JNI;-NATIVE]
btConeTwistConstraint* nativeObject = (btConeTwistConstraint*)this_addr;
nativeObject->enableMotor(b);
*/
    public static native void internal_native_enableMotor(long this_addr, boolean b);

    public void setMaxMotorImpulse(float maxMotorImpulse) {
        internal_native_setMaxMotorImpulse(native_address, maxMotorImpulse);
    }

    /*[-JNI;-NATIVE]
btConeTwistConstraint* nativeObject = (btConeTwistConstraint*)this_addr;
nativeObject->setMaxMotorImpulse((float)maxMotorImpulse);
*/
    public static native void internal_native_setMaxMotorImpulse(long this_addr, float maxMotorImpulse);

    public void setMaxMotorImpulseNormalized(float maxMotorImpulse) {
        internal_native_setMaxMotorImpulseNormalized(native_address, maxMotorImpulse);
    }

    /*[-JNI;-NATIVE]
btConeTwistConstraint* nativeObject = (btConeTwistConstraint*)this_addr;
nativeObject->setMaxMotorImpulseNormalized((float)maxMotorImpulse);
*/
    public static native void internal_native_setMaxMotorImpulseNormalized(long this_addr, float maxMotorImpulse);

    public void setMotorTarget(btQuaternion q) {
        internal_native_setMotorTarget(native_address, q.native_address);
    }

    /*[-JNI;-NATIVE]
btConeTwistConstraint* nativeObject = (btConeTwistConstraint*)this_addr;
nativeObject->setMotorTarget(*((btQuaternion* )q_addr));
*/
    public static native void internal_native_setMotorTarget(long this_addr, long q_addr);

    public void setMotorTargetInConstraintSpace(btQuaternion q) {
        internal_native_setMotorTargetInConstraintSpace(native_address, q.native_address);
    }

    /*[-JNI;-NATIVE]
btConeTwistConstraint* nativeObject = (btConeTwistConstraint*)this_addr;
nativeObject->setMotorTargetInConstraintSpace(*((btQuaternion* )q_addr));
*/
    public static native void internal_native_setMotorTargetInConstraintSpace(long this_addr, long q_addr);
}
