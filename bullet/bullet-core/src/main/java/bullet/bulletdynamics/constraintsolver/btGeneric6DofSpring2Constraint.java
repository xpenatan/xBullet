/*-------------------------------------------------------
 * This file was generated by JParser
 *
 * Do not make changes to this file
 *-------------------------------------------------------*/
package bullet.bulletdynamics.constraintsolver;

import bullet.bulletdynamics.dynamics.btRigidBody;
import bullet.linearmath.btTransform;
import bullet.linearmath.btVector3;
import bullet.btRotationalLimitMotor2;
import bullet.btTranslationalLimitMotor2;

public class btGeneric6DofSpring2Constraint extends btTypedConstraint {

    private btRotationalLimitMotor2 btRotationalLimitMotor2_TEMP_GEN_0;

    private btTranslationalLimitMotor2 btTranslationalLimitMotor2_TEMP_GEN_0;

    static public final btGeneric6DofSpring2Constraint NULL = btGeneric6DofSpring2Constraint.native_new();

    public btGeneric6DofSpring2Constraint(btRigidBody rbA, btRigidBody rbB, btTransform frameInA, btTransform frameInB) {
        super((byte) 1, (char) 1);
        long addr = internal_native_create_btRigidBody_btRigidBody_btTransform_btTransform(rbA.native_address, rbB.native_address, frameInA.native_address, frameInB.native_address);
        internal_reset(addr, true);
    }

    /*[-JNI;-NATIVE]
return (jlong)new btGeneric6DofSpring2Constraint(*((btRigidBody* )rbA_addr), *((btRigidBody* )rbB_addr), *((btTransform* )frameInA_addr), *((btTransform* )frameInB_addr));
*/
    public static native long internal_native_create_btRigidBody_btRigidBody_btTransform_btTransform(long rbA_addr, long rbB_addr, long frameInA_addr, long frameInB_addr);

    /**
     * Dummy constructor, used internally to creates objects without C++ pointer
     */
    @Deprecated()
    protected btGeneric6DofSpring2Constraint(byte b, char c) {
        super((byte) 1, (char) 1);
    }

    /**
     * @return An empty instance without a native address
     */
    public static btGeneric6DofSpring2Constraint native_new() {
        return new btGeneric6DofSpring2Constraint((byte) 0, (char) 0);
    }

    protected void deleteNative() {
        internal_native_deleteNative(native_address);
    }

    /*[-JNI;-NATIVE]
btGeneric6DofSpring2Constraint* nativeObject = (btGeneric6DofSpring2Constraint*)this_addr;
delete nativeObject;
*/
    public static native void internal_native_deleteNative(long this_addr);

    public void setDbgDrawSize(float dbgDrawSize) {
        internal_native_setDbgDrawSize(native_address, dbgDrawSize);
    }

    /*[-JNI;-NATIVE]
btGeneric6DofSpring2Constraint* nativeObject = (btGeneric6DofSpring2Constraint*)this_addr;
nativeObject->setDbgDrawSize((float)dbgDrawSize);
*/
    public static native void internal_native_setDbgDrawSize(long this_addr, float dbgDrawSize);

    public void setLinearLowerLimit(btVector3 linearLower) {
        internal_native_setLinearLowerLimit(native_address, linearLower.native_address);
    }

    /*[-JNI;-NATIVE]
btGeneric6DofSpring2Constraint* nativeObject = (btGeneric6DofSpring2Constraint*)this_addr;
nativeObject->setLinearLowerLimit(*((btVector3* )linearLower_addr));
*/
    public static native void internal_native_setLinearLowerLimit(long this_addr, long linearLower_addr);

    public void setLinearUpperLimit(btVector3 linearUpper) {
        internal_native_setLinearUpperLimit(native_address, linearUpper.native_address);
    }

    /*[-JNI;-NATIVE]
btGeneric6DofSpring2Constraint* nativeObject = (btGeneric6DofSpring2Constraint*)this_addr;
nativeObject->setLinearUpperLimit(*((btVector3* )linearUpper_addr));
*/
    public static native void internal_native_setLinearUpperLimit(long this_addr, long linearUpper_addr);

    public void setAngularLowerLimit(btVector3 linearLower) {
        internal_native_setAngularLowerLimit(native_address, linearLower.native_address);
    }

    /*[-JNI;-NATIVE]
btGeneric6DofSpring2Constraint* nativeObject = (btGeneric6DofSpring2Constraint*)this_addr;
nativeObject->setAngularLowerLimit(*((btVector3* )linearLower_addr));
*/
    public static native void internal_native_setAngularLowerLimit(long this_addr, long linearLower_addr);

    public void setAngularUpperLimit(btVector3 linearUpper) {
        internal_native_setAngularUpperLimit(native_address, linearUpper.native_address);
    }

    /*[-JNI;-NATIVE]
btGeneric6DofSpring2Constraint* nativeObject = (btGeneric6DofSpring2Constraint*)this_addr;
nativeObject->setAngularUpperLimit(*((btVector3* )linearUpper_addr));
*/
    public static native void internal_native_setAngularUpperLimit(long this_addr, long linearUpper_addr);

    public void setLimit(int axis, float lo, float hi) {
        internal_native_setLimit(native_address, axis, lo, hi);
    }

    /*[-JNI;-NATIVE]
btGeneric6DofSpring2Constraint* nativeObject = (btGeneric6DofSpring2Constraint*)this_addr;
nativeObject->setLimit((int)axis, (float)lo, (float)hi);
*/
    public static native void internal_native_setLimit(long this_addr, int axis, float lo, float hi);

    public void setStiffness(int index, float stiffness) {
        internal_native_setStiffness(native_address, index, stiffness);
    }

    /*[-JNI;-NATIVE]
btGeneric6DofSpring2Constraint* nativeObject = (btGeneric6DofSpring2Constraint*)this_addr;
nativeObject->setStiffness((int)index, (float)stiffness);
*/
    public static native void internal_native_setStiffness(long this_addr, int index, float stiffness);

    public void setDamping(int index, float damping) {
        internal_native_setDamping(native_address, index, damping);
    }

    /*[-JNI;-NATIVE]
btGeneric6DofSpring2Constraint* nativeObject = (btGeneric6DofSpring2Constraint*)this_addr;
nativeObject->setDamping((int)index, (float)damping);
*/
    public static native void internal_native_setDamping(long this_addr, int index, float damping);

    public void setBounce(int index, float bounce) {
        internal_native_setBounce(native_address, index, bounce);
    }

    /*[-JNI;-NATIVE]
btGeneric6DofSpring2Constraint* nativeObject = (btGeneric6DofSpring2Constraint*)this_addr;
nativeObject->setBounce((int)index, (float)bounce);
*/
    public static native void internal_native_setBounce(long this_addr, int index, float bounce);

    public void setServo(int index, boolean onOff) {
        internal_native_setServo(native_address, index, onOff);
    }

    /*[-JNI;-NATIVE]
btGeneric6DofSpring2Constraint* nativeObject = (btGeneric6DofSpring2Constraint*)this_addr;
nativeObject->setServo((int)index, onOff);
*/
    public static native void internal_native_setServo(long this_addr, int index, boolean onOff);

    public void setServoTarget(int index, float target) {
        internal_native_setServoTarget(native_address, index, target);
    }

    /*[-JNI;-NATIVE]
btGeneric6DofSpring2Constraint* nativeObject = (btGeneric6DofSpring2Constraint*)this_addr;
nativeObject->setServoTarget((int)index, (float)target);
*/
    public static native void internal_native_setServoTarget(long this_addr, int index, float target);

    public void enableMotor(int index, boolean onOff) {
        internal_native_enableMotor(native_address, index, onOff);
    }

    /*[-JNI;-NATIVE]
btGeneric6DofSpring2Constraint* nativeObject = (btGeneric6DofSpring2Constraint*)this_addr;
nativeObject->enableMotor((int)index, onOff);
*/
    public static native void internal_native_enableMotor(long this_addr, int index, boolean onOff);

    public void enableSpring(int index, boolean onOff) {
        internal_native_enableSpring(native_address, index, onOff);
    }

    /*[-JNI;-NATIVE]
btGeneric6DofSpring2Constraint* nativeObject = (btGeneric6DofSpring2Constraint*)this_addr;
nativeObject->enableSpring((int)index, onOff);
*/
    public static native void internal_native_enableSpring(long this_addr, int index, boolean onOff);

    public void setTargetVelocity(int index, float velocity) {
        internal_native_setTargetVelocity(native_address, index, velocity);
    }

    /*[-JNI;-NATIVE]
btGeneric6DofSpring2Constraint* nativeObject = (btGeneric6DofSpring2Constraint*)this_addr;
nativeObject->setTargetVelocity((int)index, (float)velocity);
*/
    public static native void internal_native_setTargetVelocity(long this_addr, int index, float velocity);

    public void setMaxMotorForce(int index, float force) {
        internal_native_setMaxMotorForce(native_address, index, force);
    }

    /*[-JNI;-NATIVE]
btGeneric6DofSpring2Constraint* nativeObject = (btGeneric6DofSpring2Constraint*)this_addr;
nativeObject->setMaxMotorForce((int)index, (float)force);
*/
    public static native void internal_native_setMaxMotorForce(long this_addr, int index, float force);

    public void setEquilibriumPoint() {
        internal_native_setEquilibriumPoint(native_address);
    }

    /*[-JNI;-NATIVE]
btGeneric6DofSpring2Constraint* nativeObject = (btGeneric6DofSpring2Constraint*)this_addr;
nativeObject->setEquilibriumPoint();
*/
    public static native void internal_native_setEquilibriumPoint(long this_addr);

    public void setEquilibriumPoint(int index) {
        internal_native_setEquilibriumPoint(native_address, index);
    }

    /*[-JNI;-NATIVE]
btGeneric6DofSpring2Constraint* nativeObject = (btGeneric6DofSpring2Constraint*)this_addr;
nativeObject->setEquilibriumPoint((int)index);
*/
    public static native void internal_native_setEquilibriumPoint(long this_addr, int index);

    public void setEquilibriumPoint(int index, float val) {
        internal_native_setEquilibriumPoint(native_address, index, val);
    }

    /*[-JNI;-NATIVE]
btGeneric6DofSpring2Constraint* nativeObject = (btGeneric6DofSpring2Constraint*)this_addr;
nativeObject->setEquilibriumPoint((int)index, (float)val);
*/
    public static native void internal_native_setEquilibriumPoint(long this_addr, int index, float val);

    public void setFrames(btTransform frameA, btTransform frameB) {
        internal_native_setFrames(native_address, frameA.native_address, frameB.native_address);
    }

    /*[-JNI;-NATIVE]
btGeneric6DofSpring2Constraint* nativeObject = (btGeneric6DofSpring2Constraint*)this_addr;
nativeObject->setFrames(*((btTransform* )frameA_addr), *((btTransform* )frameB_addr));
*/
    public static native void internal_native_setFrames(long this_addr, long frameA_addr, long frameB_addr);

    public btRotationalLimitMotor2 getRotationalLimitMotor(int index) {
        long pointer = internal_native_getRotationalLimitMotor(native_address, index);
        if (pointer == 0)
            return btRotationalLimitMotor2.NULL;
        if (btRotationalLimitMotor2_TEMP_GEN_0 == null)
            btRotationalLimitMotor2_TEMP_GEN_0 = btRotationalLimitMotor2.native_new();
        btRotationalLimitMotor2_TEMP_GEN_0.internal_reset(pointer, false);
        return btRotationalLimitMotor2_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
btGeneric6DofSpring2Constraint* nativeObject = (btGeneric6DofSpring2Constraint*)this_addr;
btRotationalLimitMotor2* obj = nativeObject->getRotationalLimitMotor((int)index);
return (jlong)obj;
*/
    public static native long internal_native_getRotationalLimitMotor(long this_addr, int index);

    public btTranslationalLimitMotor2 getTranslationalLimitMotor() {
        long pointer = internal_native_getTranslationalLimitMotor(native_address);
        if (pointer == 0)
            return btTranslationalLimitMotor2.NULL;
        if (btTranslationalLimitMotor2_TEMP_GEN_0 == null)
            btTranslationalLimitMotor2_TEMP_GEN_0 = btTranslationalLimitMotor2.native_new();
        btTranslationalLimitMotor2_TEMP_GEN_0.internal_reset(pointer, false);
        return btTranslationalLimitMotor2_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
btGeneric6DofSpring2Constraint* nativeObject = (btGeneric6DofSpring2Constraint*)this_addr;
btTranslationalLimitMotor2* obj = nativeObject->getTranslationalLimitMotor();
return (jlong)obj;
*/
    public static native long internal_native_getTranslationalLimitMotor(long this_addr);
}
