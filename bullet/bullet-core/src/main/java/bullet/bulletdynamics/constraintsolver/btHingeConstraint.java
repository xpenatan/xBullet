/*-------------------------------------------------------
 * This file was generated by JParser
 *
 * Do not make changes to this file
 *-------------------------------------------------------*/
package bullet.bulletdynamics.constraintsolver;

import bullet.bulletdynamics.dynamics.btRigidBody;
import bullet.linearmath.btVector3;
import bullet.linearmath.btTransform;

public class btHingeConstraint extends btTypedConstraint {

    static public final btHingeConstraint NULL = btHingeConstraint.native_new();

    public btHingeConstraint(btRigidBody rbA, btRigidBody rbB, btVector3 pivotInA, btVector3 pivotInB, btVector3 axisInA, btVector3 axisInB, boolean useReferenceFrameA) {
        super((byte) 1, (char) 1);
        long addr = internal_native_create_btRigidBody_btRigidBody_btVector3_btVector3_btVector3_btVector3_boolean(rbA.native_address, rbB.native_address, pivotInA.native_address, pivotInB.native_address, axisInA.native_address, axisInB.native_address, useReferenceFrameA);
        internal_reset(addr, true);
    }

    /*[-JNI;-NATIVE]
return (jlong)new btHingeConstraint(*((btRigidBody* )rbA_addr), *((btRigidBody* )rbB_addr), *((btVector3* )pivotInA_addr), *((btVector3* )pivotInB_addr), *((btVector3* )axisInA_addr), *((btVector3* )axisInB_addr), useReferenceFrameA);
*/
    public static native long internal_native_create_btRigidBody_btRigidBody_btVector3_btVector3_btVector3_btVector3_boolean(long rbA_addr, long rbB_addr, long pivotInA_addr, long pivotInB_addr, long axisInA_addr, long axisInB_addr, boolean useReferenceFrameA);

    public btHingeConstraint(btRigidBody rbA, btRigidBody rbB, btVector3 pivotInA, btVector3 pivotInB, btVector3 axisInA, btVector3 axisInB) {
        super((byte) 1, (char) 1);
        long addr = internal_native_create_btRigidBody_btRigidBody_btVector3_btVector3_btVector3_btVector3(rbA.native_address, rbB.native_address, pivotInA.native_address, pivotInB.native_address, axisInA.native_address, axisInB.native_address);
        internal_reset(addr, true);
    }

    /*[-JNI;-NATIVE]
return (jlong)new btHingeConstraint(*((btRigidBody* )rbA_addr), *((btRigidBody* )rbB_addr), *((btVector3* )pivotInA_addr), *((btVector3* )pivotInB_addr), *((btVector3* )axisInA_addr), *((btVector3* )axisInB_addr));
*/
    public static native long internal_native_create_btRigidBody_btRigidBody_btVector3_btVector3_btVector3_btVector3(long rbA_addr, long rbB_addr, long pivotInA_addr, long pivotInB_addr, long axisInA_addr, long axisInB_addr);

    public btHingeConstraint(btRigidBody rbA, btVector3 pivotInA, btVector3 axisInA, boolean useReferenceFrameA) {
        super((byte) 1, (char) 1);
        long addr = internal_native_create_btRigidBody_btVector3_btVector3_boolean(rbA.native_address, pivotInA.native_address, axisInA.native_address, useReferenceFrameA);
        internal_reset(addr, true);
    }

    /*[-JNI;-NATIVE]
return (jlong)new btHingeConstraint(*((btRigidBody* )rbA_addr), *((btVector3* )pivotInA_addr), *((btVector3* )axisInA_addr), useReferenceFrameA);
*/
    public static native long internal_native_create_btRigidBody_btVector3_btVector3_boolean(long rbA_addr, long pivotInA_addr, long axisInA_addr, boolean useReferenceFrameA);

    public btHingeConstraint(btRigidBody rbA, btRigidBody rbB, btTransform rbAFrame, btTransform rbBFrame, boolean useReferenceFrameA) {
        super((byte) 1, (char) 1);
        long addr = internal_native_create_btRigidBody_btRigidBody_btTransform_btTransform_boolean(rbA.native_address, rbB.native_address, rbAFrame.native_address, rbBFrame.native_address, useReferenceFrameA);
        internal_reset(addr, true);
    }

    /*[-JNI;-NATIVE]
return (jlong)new btHingeConstraint(*((btRigidBody* )rbA_addr), *((btRigidBody* )rbB_addr), *((btTransform* )rbAFrame_addr), *((btTransform* )rbBFrame_addr), useReferenceFrameA);
*/
    public static native long internal_native_create_btRigidBody_btRigidBody_btTransform_btTransform_boolean(long rbA_addr, long rbB_addr, long rbAFrame_addr, long rbBFrame_addr, boolean useReferenceFrameA);

    public btHingeConstraint(btRigidBody rbA, btTransform rbAFrame, boolean useReferenceFrameA) {
        super((byte) 1, (char) 1);
        long addr = internal_native_create_btRigidBody_btTransform_boolean(rbA.native_address, rbAFrame.native_address, useReferenceFrameA);
        internal_reset(addr, true);
    }

    /*[-JNI;-NATIVE]
return (jlong)new btHingeConstraint(*((btRigidBody* )rbA_addr), *((btTransform* )rbAFrame_addr), useReferenceFrameA);
*/
    public static native long internal_native_create_btRigidBody_btTransform_boolean(long rbA_addr, long rbAFrame_addr, boolean useReferenceFrameA);

    /**
     * Dummy constructor, used internally to creates objects without C++ pointer
     */
    @Deprecated()
    protected btHingeConstraint(byte b, char c) {
        super((byte) 1, (char) 1);
    }

    /**
     * @return An empty instance without a native address
     */
    public static btHingeConstraint native_new() {
        return new btHingeConstraint((byte) 0, (char) 0);
    }

    protected void deleteNative() {
        internal_native_deleteNative(native_address);
    }

    /*[-JNI;-NATIVE]
btHingeConstraint* nativeObject = (btHingeConstraint*)this_addr;
delete nativeObject;
*/
    public static native void internal_native_deleteNative(long this_addr);

    public void setLimit(float low, float high, float softness, float biasFactor, float relaxationFactor) {
        internal_native_setLimit(native_address, low, high, softness, biasFactor, relaxationFactor);
    }

    /*[-JNI;-NATIVE]
btHingeConstraint* nativeObject = (btHingeConstraint*)this_addr;
nativeObject->setLimit((float)low, (float)high, (float)softness, (float)biasFactor, (float)relaxationFactor);
*/
    public static native void internal_native_setLimit(long this_addr, float low, float high, float softness, float biasFactor, float relaxationFactor);

    public void setLimit(float low, float high, float softness, float biasFactor) {
        internal_native_setLimit(native_address, low, high, softness, biasFactor);
    }

    /*[-JNI;-NATIVE]
btHingeConstraint* nativeObject = (btHingeConstraint*)this_addr;
nativeObject->setLimit((float)low, (float)high, (float)softness, (float)biasFactor);
*/
    public static native void internal_native_setLimit(long this_addr, float low, float high, float softness, float biasFactor);

    public void setLimit(float low, float high, float softness) {
        internal_native_setLimit(native_address, low, high, softness);
    }

    /*[-JNI;-NATIVE]
btHingeConstraint* nativeObject = (btHingeConstraint*)this_addr;
nativeObject->setLimit((float)low, (float)high, (float)softness);
*/
    public static native void internal_native_setLimit(long this_addr, float low, float high, float softness);

    public void setLimit(float low, float high) {
        internal_native_setLimit(native_address, low, high);
    }

    /*[-JNI;-NATIVE]
btHingeConstraint* nativeObject = (btHingeConstraint*)this_addr;
nativeObject->setLimit((float)low, (float)high);
*/
    public static native void internal_native_setLimit(long this_addr, float low, float high);

    public void enableAngularMotor(boolean enableMotor, float targetVelocity, float maxMotorImpulse) {
        internal_native_enableAngularMotor(native_address, enableMotor, targetVelocity, maxMotorImpulse);
    }

    /*[-JNI;-NATIVE]
btHingeConstraint* nativeObject = (btHingeConstraint*)this_addr;
nativeObject->enableAngularMotor(enableMotor, (float)targetVelocity, (float)maxMotorImpulse);
*/
    public static native void internal_native_enableAngularMotor(long this_addr, boolean enableMotor, float targetVelocity, float maxMotorImpulse);
}
