/*-------------------------------------------------------
 * This file was generated by JParser
 *
 * Do not make changes to this file
 *-------------------------------------------------------*/
package bullet.bulletdynamics.constraintsolver;

import bullet.bulletdynamics.dynamics.btRigidBody;
import bullet.linearmath.btTransform;
import bullet.linearmath.btVector3;

public class btGeneric6DofConstraint extends btTypedConstraint {

    static public final btGeneric6DofConstraint NULL = btGeneric6DofConstraint.native_new();

    public btGeneric6DofConstraint(btRigidBody rbA, btRigidBody rbB, btTransform frameInA, btTransform frameInB, boolean useLinearFrameReferenceFrameA) {
        super((byte) 1, (char) 1);
        long addr = internal_native_create_btRigidBody_btRigidBody_btTransform_btTransform_boolean(rbA.native_address, rbB.native_address, frameInA.native_address, frameInB.native_address, useLinearFrameReferenceFrameA);
        internal_reset(addr, true);
    }

    /*[-JNI;-NATIVE]
return (jlong)new btGeneric6DofConstraint(*((btRigidBody* )rbA_addr), *((btRigidBody* )rbB_addr), *((btTransform* )frameInA_addr), *((btTransform* )frameInB_addr), useLinearFrameReferenceFrameA);
*/
    public static native long internal_native_create_btRigidBody_btRigidBody_btTransform_btTransform_boolean(long rbA_addr, long rbB_addr, long frameInA_addr, long frameInB_addr, boolean useLinearFrameReferenceFrameA);

    public btGeneric6DofConstraint(btRigidBody rbB, btTransform frameInB, boolean useLinearFrameReferenceFrameB) {
        super((byte) 1, (char) 1);
        long addr = internal_native_create_btRigidBody_btTransform_boolean(rbB.native_address, frameInB.native_address, useLinearFrameReferenceFrameB);
        internal_reset(addr, true);
    }

    /*[-JNI;-NATIVE]
return (jlong)new btGeneric6DofConstraint(*((btRigidBody* )rbB_addr), *((btTransform* )frameInB_addr), useLinearFrameReferenceFrameB);
*/
    public static native long internal_native_create_btRigidBody_btTransform_boolean(long rbB_addr, long frameInB_addr, boolean useLinearFrameReferenceFrameB);

    /**
     * Dummy constructor, used internally to creates objects without C++ pointer
     */
    @Deprecated()
    protected btGeneric6DofConstraint(byte b, char c) {
        super((byte) 1, (char) 1);
    }

    /**
     * @return An empty instance without a native address
     */
    public static btGeneric6DofConstraint native_new() {
        return new btGeneric6DofConstraint((byte) 0, (char) 0);
    }

    protected void deleteNative() {
        internal_native_deleteNative(native_address);
    }

    /*[-JNI;-NATIVE]
btGeneric6DofConstraint* nativeObject = (btGeneric6DofConstraint*)this_addr;
delete nativeObject;
*/
    public static native void internal_native_deleteNative(long this_addr);

    public void setLinearLowerLimit(btVector3 linearLower) {
        internal_native_setLinearLowerLimit(native_address, linearLower.native_address);
    }

    /*[-JNI;-NATIVE]
btGeneric6DofConstraint* nativeObject = (btGeneric6DofConstraint*)this_addr;
nativeObject->setLinearLowerLimit(*((btVector3* )linearLower_addr));
*/
    public static native void internal_native_setLinearLowerLimit(long this_addr, long linearLower_addr);

    public void setLinearUpperLimit(btVector3 linearUpper) {
        internal_native_setLinearUpperLimit(native_address, linearUpper.native_address);
    }

    /*[-JNI;-NATIVE]
btGeneric6DofConstraint* nativeObject = (btGeneric6DofConstraint*)this_addr;
nativeObject->setLinearUpperLimit(*((btVector3* )linearUpper_addr));
*/
    public static native void internal_native_setLinearUpperLimit(long this_addr, long linearUpper_addr);

    public void setAngularLowerLimit(btVector3 angularLower) {
        internal_native_setAngularLowerLimit(native_address, angularLower.native_address);
    }

    /*[-JNI;-NATIVE]
btGeneric6DofConstraint* nativeObject = (btGeneric6DofConstraint*)this_addr;
nativeObject->setAngularLowerLimit(*((btVector3* )angularLower_addr));
*/
    public static native void internal_native_setAngularLowerLimit(long this_addr, long angularLower_addr);

    public void setAngularUpperLimit(btVector3 angularUpper) {
        internal_native_setAngularUpperLimit(native_address, angularUpper.native_address);
    }

    /*[-JNI;-NATIVE]
btGeneric6DofConstraint* nativeObject = (btGeneric6DofConstraint*)this_addr;
nativeObject->setAngularUpperLimit(*((btVector3* )angularUpper_addr));
*/
    public static native void internal_native_setAngularUpperLimit(long this_addr, long angularUpper_addr);
}
