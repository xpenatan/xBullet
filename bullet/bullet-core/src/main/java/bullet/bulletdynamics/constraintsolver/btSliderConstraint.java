/*-------------------------------------------------------
 * This file was generated by JParser
 *
 * Do not make changes to this file
 *-------------------------------------------------------*/
package bullet.bulletdynamics.constraintsolver;

import bullet.bulletdynamics.dynamics.btRigidBody;
import bullet.linearmath.btTransform;

public class btSliderConstraint extends btTypedConstraint {

    static public final btSliderConstraint NULL = btSliderConstraint.native_new();

    public btSliderConstraint(btRigidBody rbA, btRigidBody rbB, btTransform frameInA, btTransform frameInB, boolean useLinearReferenceFrameA) {
        super((byte) 1, (char) 1);
        long addr = internal_native_create_btRigidBody_btRigidBody_btTransform_btTransform_boolean(rbA.native_address, rbB.native_address, frameInA.native_address, frameInB.native_address, useLinearReferenceFrameA);
        internal_reset(addr, true);
    }

    /*[-JNI;-NATIVE]
return (jlong)new btSliderConstraint(*((btRigidBody* )rbA_addr), *((btRigidBody* )rbB_addr), *((btTransform* )frameInA_addr), *((btTransform* )frameInB_addr), useLinearReferenceFrameA);
*/
    public static native long internal_native_create_btRigidBody_btRigidBody_btTransform_btTransform_boolean(long rbA_addr, long rbB_addr, long frameInA_addr, long frameInB_addr, boolean useLinearReferenceFrameA);

    public btSliderConstraint(btRigidBody rbB, btTransform frameInB, boolean uesLinearReferenceFrameA) {
        super((byte) 1, (char) 1);
        long addr = internal_native_create_btRigidBody_btTransform_boolean(rbB.native_address, frameInB.native_address, uesLinearReferenceFrameA);
        internal_reset(addr, true);
    }

    /*[-JNI;-NATIVE]
return (jlong)new btSliderConstraint(*((btRigidBody* )rbB_addr), *((btTransform* )frameInB_addr), uesLinearReferenceFrameA);
*/
    public static native long internal_native_create_btRigidBody_btTransform_boolean(long rbB_addr, long frameInB_addr, boolean uesLinearReferenceFrameA);

    /**
     * Dummy constructor, used internally to creates objects without C++ pointer
     */
    @Deprecated()
    protected btSliderConstraint(byte b, char c) {
        super((byte) 1, (char) 1);
    }

    /**
     * @return An empty instance without a native address
     */
    public static btSliderConstraint native_new() {
        return new btSliderConstraint((byte) 0, (char) 0);
    }

    protected void deleteNative() {
        internal_native_deleteNative(native_address);
    }

    /*[-JNI;-NATIVE]
btSliderConstraint* nativeObject = (btSliderConstraint*)this_addr;
delete nativeObject;
*/
    public static native void internal_native_deleteNative(long this_addr);

    public void setLowerLinLimit(float lowerLimit) {
        internal_native_setLowerLinLimit(native_address, lowerLimit);
    }

    /*[-JNI;-NATIVE]
btSliderConstraint* nativeObject = (btSliderConstraint*)this_addr;
nativeObject->setLowerLinLimit((float)lowerLimit);
*/
    public static native void internal_native_setLowerLinLimit(long this_addr, float lowerLimit);

    public void setUpperLinLimit(float upperLimit) {
        internal_native_setUpperLinLimit(native_address, upperLimit);
    }

    /*[-JNI;-NATIVE]
btSliderConstraint* nativeObject = (btSliderConstraint*)this_addr;
nativeObject->setUpperLinLimit((float)upperLimit);
*/
    public static native void internal_native_setUpperLinLimit(long this_addr, float upperLimit);

    public void setLowerAngLimit(float lowerAngLimit) {
        internal_native_setLowerAngLimit(native_address, lowerAngLimit);
    }

    /*[-JNI;-NATIVE]
btSliderConstraint* nativeObject = (btSliderConstraint*)this_addr;
nativeObject->setLowerAngLimit((float)lowerAngLimit);
*/
    public static native void internal_native_setLowerAngLimit(long this_addr, float lowerAngLimit);

    public void setUpperAngLimit(float upperAngLimit) {
        internal_native_setUpperAngLimit(native_address, upperAngLimit);
    }

    /*[-JNI;-NATIVE]
btSliderConstraint* nativeObject = (btSliderConstraint*)this_addr;
nativeObject->setUpperAngLimit((float)upperAngLimit);
*/
    public static native void internal_native_setUpperAngLimit(long this_addr, float upperAngLimit);
}
