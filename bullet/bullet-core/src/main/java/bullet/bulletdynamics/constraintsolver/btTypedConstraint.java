/*-------------------------------------------------------
 * This file was generated by JParser
 *
 * Do not make changes to this file
 *-------------------------------------------------------*/
package bullet.bulletdynamics.constraintsolver;

import com.github.xpenatan.jParser.idl.IDLBase;
import bullet.bulletdynamics.dynamics.btRigidBody;

public class btTypedConstraint extends IDLBase {

    private btRigidBody btRigidBody_TEMP_GEN_0;

    private btRigidBody btRigidBody_TEMP_GEN_1;

    static public final btTypedConstraint NULL = btTypedConstraint.native_new();

    /**
     * Dummy constructor, used internally to creates objects without C++ pointer
     */
    @Deprecated()
    protected btTypedConstraint(byte b, char c) {
    }

    /**
     * @return An empty instance without a native address
     */
    public static btTypedConstraint native_new() {
        return new btTypedConstraint((byte) 0, (char) 0);
    }

    protected void deleteNative() {
        internal_native_deleteNative(native_address);
    }

    /*[-JNI;-NATIVE]
btTypedConstraint* nativeObject = (btTypedConstraint*)this_addr;
delete nativeObject;
*/
    public static native void internal_native_deleteNative(long this_addr);

    public void enableFeedback(boolean needsFeedback) {
        internal_native_enableFeedback(native_address, needsFeedback);
    }

    /*[-JNI;-NATIVE]
btTypedConstraint* nativeObject = (btTypedConstraint*)this_addr;
nativeObject->enableFeedback(needsFeedback);
*/
    public static native void internal_native_enableFeedback(long this_addr, boolean needsFeedback);

    public float getBreakingImpulseThreshold() {
        return internal_native_getBreakingImpulseThreshold(native_address);
    }

    /*[-JNI;-NATIVE]
btTypedConstraint* nativeObject = (btTypedConstraint*)this_addr;
return nativeObject->getBreakingImpulseThreshold();
*/
    public static native float internal_native_getBreakingImpulseThreshold(long this_addr);

    public void setBreakingImpulseThreshold(float threshold) {
        internal_native_setBreakingImpulseThreshold(native_address, threshold);
    }

    /*[-JNI;-NATIVE]
btTypedConstraint* nativeObject = (btTypedConstraint*)this_addr;
nativeObject->setBreakingImpulseThreshold((float)threshold);
*/
    public static native void internal_native_setBreakingImpulseThreshold(long this_addr, float threshold);

    public btRigidBody getRigidBodyA() {
        long pointer = internal_native_getRigidBodyA(native_address);
        if (pointer == 0)
            return btRigidBody.NULL;
        if (btRigidBody_TEMP_GEN_0 == null)
            btRigidBody_TEMP_GEN_0 = btRigidBody.native_new();
        btRigidBody_TEMP_GEN_0.internal_reset(pointer, false);
        return btRigidBody_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
btTypedConstraint* nativeObject = (btTypedConstraint*)this_addr;
return (jlong)&nativeObject->getRigidBodyA();
*/
    public static native long internal_native_getRigidBodyA(long this_addr);

    public btRigidBody getRigidBodyB() {
        long pointer = internal_native_getRigidBodyB(native_address);
        if (pointer == 0)
            return btRigidBody.NULL;
        if (btRigidBody_TEMP_GEN_1 == null)
            btRigidBody_TEMP_GEN_1 = btRigidBody.native_new();
        btRigidBody_TEMP_GEN_1.internal_reset(pointer, false);
        return btRigidBody_TEMP_GEN_1;
    }

    /*[-JNI;-NATIVE]
btTypedConstraint* nativeObject = (btTypedConstraint*)this_addr;
return (jlong)&nativeObject->getRigidBodyB();
*/
    public static native long internal_native_getRigidBodyB(long this_addr);
}
