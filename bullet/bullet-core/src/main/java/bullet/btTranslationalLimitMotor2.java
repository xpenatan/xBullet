/*-------------------------------------------------------
 * This file was generated by JParser
 *
 * Do not make changes to this file
 *-------------------------------------------------------*/
package bullet;

import com.github.xpenatan.jParser.idl.IDLBase;
import bullet.linearmath.btVector3;

public class btTranslationalLimitMotor2 extends IDLBase {

    private btVector3 btVector3_TEMP_GEN_0;

    private btVector3 btVector3_TEMP_GEN_1;

    private btVector3 btVector3_TEMP_GEN_2;

    private btVector3 btVector3_TEMP_GEN_3;

    private btVector3 btVector3_TEMP_GEN_4;

    private btVector3 btVector3_TEMP_GEN_5;

    private btVector3 btVector3_TEMP_GEN_6;

    private btVector3 btVector3_TEMP_GEN_7;

    private btVector3 btVector3_TEMP_GEN_8;

    private btVector3 btVector3_TEMP_GEN_9;

    private btVector3 btVector3_TEMP_GEN_10;

    private btVector3 btVector3_TEMP_GEN_11;

    private btVector3 btVector3_TEMP_GEN_12;

    static public final btTranslationalLimitMotor2 NULL = btTranslationalLimitMotor2.native_new();

    /**
     * Dummy constructor, used internally to creates objects without C++ pointer
     */
    @Deprecated()
    protected btTranslationalLimitMotor2(byte b, char c) {
    }

    /**
     * @return An empty instance without a native address
     */
    public static btTranslationalLimitMotor2 native_new() {
        return new btTranslationalLimitMotor2((byte) 0, (char) 0);
    }

    protected void deleteNative() {
        internal_native_deleteNative(native_address);
    }

    /*[-JNI;-NATIVE]
btTranslationalLimitMotor2* nativeObject = (btTranslationalLimitMotor2*)this_addr;
delete nativeObject;
*/
    public static native void internal_native_deleteNative(long this_addr);

    public boolean isLimited(int limitIndex) {
        return internal_native_isLimited(native_address, limitIndex);
    }

    /*[-JNI;-NATIVE]
btTranslationalLimitMotor2* nativeObject = (btTranslationalLimitMotor2*)this_addr;
return nativeObject->isLimited((int)limitIndex);
*/
    public static native boolean internal_native_isLimited(long this_addr, int limitIndex);

    public void testLimitValue(int limitIndex, float test_value) {
        internal_native_testLimitValue(native_address, limitIndex, test_value);
    }

    /*[-JNI;-NATIVE]
btTranslationalLimitMotor2* nativeObject = (btTranslationalLimitMotor2*)this_addr;
nativeObject->testLimitValue((int)limitIndex, (float)test_value);
*/
    public static native void internal_native_testLimitValue(long this_addr, int limitIndex, float test_value);

    public btVector3 get_m_lowerLimit() {
        long pointer = internal_native_get_m_lowerLimit(native_address);
        if (pointer == 0)
            return btVector3.NULL;
        if (btVector3_TEMP_GEN_0 == null)
            btVector3_TEMP_GEN_0 = btVector3.native_new();
        btVector3_TEMP_GEN_0.internal_reset(pointer, false);
        return btVector3_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
btTranslationalLimitMotor2* nativeObject = (btTranslationalLimitMotor2*)this_addr;
return (jlong)&nativeObject->m_lowerLimit;
*/
    public static native long internal_native_get_m_lowerLimit(long this_addr);

    public void set_m_lowerLimit(btVector3 m_lowerLimit) {
        internal_native_set_m_lowerLimit(native_address, m_lowerLimit.native_address);
    }

    /*[-JNI;-NATIVE]
btTranslationalLimitMotor2* nativeObject = (btTranslationalLimitMotor2*)this_addr;
nativeObject->m_lowerLimit = *((btVector3*)m_lowerLimit_addr);
*/
    public static native void internal_native_set_m_lowerLimit(long this_addr, long m_lowerLimit_addr);

    public btVector3 get_m_upperLimit() {
        long pointer = internal_native_get_m_upperLimit(native_address);
        if (pointer == 0)
            return btVector3.NULL;
        if (btVector3_TEMP_GEN_1 == null)
            btVector3_TEMP_GEN_1 = btVector3.native_new();
        btVector3_TEMP_GEN_1.internal_reset(pointer, false);
        return btVector3_TEMP_GEN_1;
    }

    /*[-JNI;-NATIVE]
btTranslationalLimitMotor2* nativeObject = (btTranslationalLimitMotor2*)this_addr;
return (jlong)&nativeObject->m_upperLimit;
*/
    public static native long internal_native_get_m_upperLimit(long this_addr);

    public void set_m_upperLimit(btVector3 m_upperLimit) {
        internal_native_set_m_upperLimit(native_address, m_upperLimit.native_address);
    }

    /*[-JNI;-NATIVE]
btTranslationalLimitMotor2* nativeObject = (btTranslationalLimitMotor2*)this_addr;
nativeObject->m_upperLimit = *((btVector3*)m_upperLimit_addr);
*/
    public static native void internal_native_set_m_upperLimit(long this_addr, long m_upperLimit_addr);

    public btVector3 get_m_bounce() {
        long pointer = internal_native_get_m_bounce(native_address);
        if (pointer == 0)
            return btVector3.NULL;
        if (btVector3_TEMP_GEN_2 == null)
            btVector3_TEMP_GEN_2 = btVector3.native_new();
        btVector3_TEMP_GEN_2.internal_reset(pointer, false);
        return btVector3_TEMP_GEN_2;
    }

    /*[-JNI;-NATIVE]
btTranslationalLimitMotor2* nativeObject = (btTranslationalLimitMotor2*)this_addr;
return (jlong)&nativeObject->m_bounce;
*/
    public static native long internal_native_get_m_bounce(long this_addr);

    public void set_m_bounce(btVector3 m_bounce) {
        internal_native_set_m_bounce(native_address, m_bounce.native_address);
    }

    /*[-JNI;-NATIVE]
btTranslationalLimitMotor2* nativeObject = (btTranslationalLimitMotor2*)this_addr;
nativeObject->m_bounce = *((btVector3*)m_bounce_addr);
*/
    public static native void internal_native_set_m_bounce(long this_addr, long m_bounce_addr);

    public btVector3 get_m_stopERP() {
        long pointer = internal_native_get_m_stopERP(native_address);
        if (pointer == 0)
            return btVector3.NULL;
        if (btVector3_TEMP_GEN_3 == null)
            btVector3_TEMP_GEN_3 = btVector3.native_new();
        btVector3_TEMP_GEN_3.internal_reset(pointer, false);
        return btVector3_TEMP_GEN_3;
    }

    /*[-JNI;-NATIVE]
btTranslationalLimitMotor2* nativeObject = (btTranslationalLimitMotor2*)this_addr;
return (jlong)&nativeObject->m_stopERP;
*/
    public static native long internal_native_get_m_stopERP(long this_addr);

    public void set_m_stopERP(btVector3 m_stopERP) {
        internal_native_set_m_stopERP(native_address, m_stopERP.native_address);
    }

    /*[-JNI;-NATIVE]
btTranslationalLimitMotor2* nativeObject = (btTranslationalLimitMotor2*)this_addr;
nativeObject->m_stopERP = *((btVector3*)m_stopERP_addr);
*/
    public static native void internal_native_set_m_stopERP(long this_addr, long m_stopERP_addr);

    public btVector3 get_m_stopCFM() {
        long pointer = internal_native_get_m_stopCFM(native_address);
        if (pointer == 0)
            return btVector3.NULL;
        if (btVector3_TEMP_GEN_4 == null)
            btVector3_TEMP_GEN_4 = btVector3.native_new();
        btVector3_TEMP_GEN_4.internal_reset(pointer, false);
        return btVector3_TEMP_GEN_4;
    }

    /*[-JNI;-NATIVE]
btTranslationalLimitMotor2* nativeObject = (btTranslationalLimitMotor2*)this_addr;
return (jlong)&nativeObject->m_stopCFM;
*/
    public static native long internal_native_get_m_stopCFM(long this_addr);

    public void set_m_stopCFM(btVector3 m_stopCFM) {
        internal_native_set_m_stopCFM(native_address, m_stopCFM.native_address);
    }

    /*[-JNI;-NATIVE]
btTranslationalLimitMotor2* nativeObject = (btTranslationalLimitMotor2*)this_addr;
nativeObject->m_stopCFM = *((btVector3*)m_stopCFM_addr);
*/
    public static native void internal_native_set_m_stopCFM(long this_addr, long m_stopCFM_addr);

    public btVector3 get_m_motorERP() {
        long pointer = internal_native_get_m_motorERP(native_address);
        if (pointer == 0)
            return btVector3.NULL;
        if (btVector3_TEMP_GEN_5 == null)
            btVector3_TEMP_GEN_5 = btVector3.native_new();
        btVector3_TEMP_GEN_5.internal_reset(pointer, false);
        return btVector3_TEMP_GEN_5;
    }

    /*[-JNI;-NATIVE]
btTranslationalLimitMotor2* nativeObject = (btTranslationalLimitMotor2*)this_addr;
return (jlong)&nativeObject->m_motorERP;
*/
    public static native long internal_native_get_m_motorERP(long this_addr);

    public void set_m_motorERP(btVector3 m_motorERP) {
        internal_native_set_m_motorERP(native_address, m_motorERP.native_address);
    }

    /*[-JNI;-NATIVE]
btTranslationalLimitMotor2* nativeObject = (btTranslationalLimitMotor2*)this_addr;
nativeObject->m_motorERP = *((btVector3*)m_motorERP_addr);
*/
    public static native void internal_native_set_m_motorERP(long this_addr, long m_motorERP_addr);

    public btVector3 get_m_motorCFM() {
        long pointer = internal_native_get_m_motorCFM(native_address);
        if (pointer == 0)
            return btVector3.NULL;
        if (btVector3_TEMP_GEN_6 == null)
            btVector3_TEMP_GEN_6 = btVector3.native_new();
        btVector3_TEMP_GEN_6.internal_reset(pointer, false);
        return btVector3_TEMP_GEN_6;
    }

    /*[-JNI;-NATIVE]
btTranslationalLimitMotor2* nativeObject = (btTranslationalLimitMotor2*)this_addr;
return (jlong)&nativeObject->m_motorCFM;
*/
    public static native long internal_native_get_m_motorCFM(long this_addr);

    public void set_m_motorCFM(btVector3 m_motorCFM) {
        internal_native_set_m_motorCFM(native_address, m_motorCFM.native_address);
    }

    /*[-JNI;-NATIVE]
btTranslationalLimitMotor2* nativeObject = (btTranslationalLimitMotor2*)this_addr;
nativeObject->m_motorCFM = *((btVector3*)m_motorCFM_addr);
*/
    public static native void internal_native_set_m_motorCFM(long this_addr, long m_motorCFM_addr);

    public btVector3 get_m_servoTarget() {
        long pointer = internal_native_get_m_servoTarget(native_address);
        if (pointer == 0)
            return btVector3.NULL;
        if (btVector3_TEMP_GEN_7 == null)
            btVector3_TEMP_GEN_7 = btVector3.native_new();
        btVector3_TEMP_GEN_7.internal_reset(pointer, false);
        return btVector3_TEMP_GEN_7;
    }

    /*[-JNI;-NATIVE]
btTranslationalLimitMotor2* nativeObject = (btTranslationalLimitMotor2*)this_addr;
return (jlong)&nativeObject->m_servoTarget;
*/
    public static native long internal_native_get_m_servoTarget(long this_addr);

    public void set_m_servoTarget(btVector3 m_servoTarget) {
        internal_native_set_m_servoTarget(native_address, m_servoTarget.native_address);
    }

    /*[-JNI;-NATIVE]
btTranslationalLimitMotor2* nativeObject = (btTranslationalLimitMotor2*)this_addr;
nativeObject->m_servoTarget = *((btVector3*)m_servoTarget_addr);
*/
    public static native void internal_native_set_m_servoTarget(long this_addr, long m_servoTarget_addr);

    public btVector3 get_m_springStiffness() {
        long pointer = internal_native_get_m_springStiffness(native_address);
        if (pointer == 0)
            return btVector3.NULL;
        if (btVector3_TEMP_GEN_8 == null)
            btVector3_TEMP_GEN_8 = btVector3.native_new();
        btVector3_TEMP_GEN_8.internal_reset(pointer, false);
        return btVector3_TEMP_GEN_8;
    }

    /*[-JNI;-NATIVE]
btTranslationalLimitMotor2* nativeObject = (btTranslationalLimitMotor2*)this_addr;
return (jlong)&nativeObject->m_springStiffness;
*/
    public static native long internal_native_get_m_springStiffness(long this_addr);

    public void set_m_springStiffness(btVector3 m_springStiffness) {
        internal_native_set_m_springStiffness(native_address, m_springStiffness.native_address);
    }

    /*[-JNI;-NATIVE]
btTranslationalLimitMotor2* nativeObject = (btTranslationalLimitMotor2*)this_addr;
nativeObject->m_springStiffness = *((btVector3*)m_springStiffness_addr);
*/
    public static native void internal_native_set_m_springStiffness(long this_addr, long m_springStiffness_addr);

    public btVector3 get_m_springDamping() {
        long pointer = internal_native_get_m_springDamping(native_address);
        if (pointer == 0)
            return btVector3.NULL;
        if (btVector3_TEMP_GEN_9 == null)
            btVector3_TEMP_GEN_9 = btVector3.native_new();
        btVector3_TEMP_GEN_9.internal_reset(pointer, false);
        return btVector3_TEMP_GEN_9;
    }

    /*[-JNI;-NATIVE]
btTranslationalLimitMotor2* nativeObject = (btTranslationalLimitMotor2*)this_addr;
return (jlong)&nativeObject->m_springDamping;
*/
    public static native long internal_native_get_m_springDamping(long this_addr);

    public void set_m_springDamping(btVector3 m_springDamping) {
        internal_native_set_m_springDamping(native_address, m_springDamping.native_address);
    }

    /*[-JNI;-NATIVE]
btTranslationalLimitMotor2* nativeObject = (btTranslationalLimitMotor2*)this_addr;
nativeObject->m_springDamping = *((btVector3*)m_springDamping_addr);
*/
    public static native void internal_native_set_m_springDamping(long this_addr, long m_springDamping_addr);

    public btVector3 get_m_equilibriumPoint() {
        long pointer = internal_native_get_m_equilibriumPoint(native_address);
        if (pointer == 0)
            return btVector3.NULL;
        if (btVector3_TEMP_GEN_10 == null)
            btVector3_TEMP_GEN_10 = btVector3.native_new();
        btVector3_TEMP_GEN_10.internal_reset(pointer, false);
        return btVector3_TEMP_GEN_10;
    }

    /*[-JNI;-NATIVE]
btTranslationalLimitMotor2* nativeObject = (btTranslationalLimitMotor2*)this_addr;
return (jlong)&nativeObject->m_equilibriumPoint;
*/
    public static native long internal_native_get_m_equilibriumPoint(long this_addr);

    public void set_m_equilibriumPoint(btVector3 m_equilibriumPoint) {
        internal_native_set_m_equilibriumPoint(native_address, m_equilibriumPoint.native_address);
    }

    /*[-JNI;-NATIVE]
btTranslationalLimitMotor2* nativeObject = (btTranslationalLimitMotor2*)this_addr;
nativeObject->m_equilibriumPoint = *((btVector3*)m_equilibriumPoint_addr);
*/
    public static native void internal_native_set_m_equilibriumPoint(long this_addr, long m_equilibriumPoint_addr);

    public btVector3 get_m_targetVelocity() {
        long pointer = internal_native_get_m_targetVelocity(native_address);
        if (pointer == 0)
            return btVector3.NULL;
        if (btVector3_TEMP_GEN_11 == null)
            btVector3_TEMP_GEN_11 = btVector3.native_new();
        btVector3_TEMP_GEN_11.internal_reset(pointer, false);
        return btVector3_TEMP_GEN_11;
    }

    /*[-JNI;-NATIVE]
btTranslationalLimitMotor2* nativeObject = (btTranslationalLimitMotor2*)this_addr;
return (jlong)&nativeObject->m_targetVelocity;
*/
    public static native long internal_native_get_m_targetVelocity(long this_addr);

    public void set_m_targetVelocity(btVector3 m_targetVelocity) {
        internal_native_set_m_targetVelocity(native_address, m_targetVelocity.native_address);
    }

    /*[-JNI;-NATIVE]
btTranslationalLimitMotor2* nativeObject = (btTranslationalLimitMotor2*)this_addr;
nativeObject->m_targetVelocity = *((btVector3*)m_targetVelocity_addr);
*/
    public static native void internal_native_set_m_targetVelocity(long this_addr, long m_targetVelocity_addr);

    public btVector3 get_m_maxMotorForce() {
        long pointer = internal_native_get_m_maxMotorForce(native_address);
        if (pointer == 0)
            return btVector3.NULL;
        if (btVector3_TEMP_GEN_12 == null)
            btVector3_TEMP_GEN_12 = btVector3.native_new();
        btVector3_TEMP_GEN_12.internal_reset(pointer, false);
        return btVector3_TEMP_GEN_12;
    }

    /*[-JNI;-NATIVE]
btTranslationalLimitMotor2* nativeObject = (btTranslationalLimitMotor2*)this_addr;
return (jlong)&nativeObject->m_maxMotorForce;
*/
    public static native long internal_native_get_m_maxMotorForce(long this_addr);

    public void set_m_maxMotorForce(btVector3 m_maxMotorForce) {
        internal_native_set_m_maxMotorForce(native_address, m_maxMotorForce.native_address);
    }

    /*[-JNI;-NATIVE]
btTranslationalLimitMotor2* nativeObject = (btTranslationalLimitMotor2*)this_addr;
nativeObject->m_maxMotorForce = *((btVector3*)m_maxMotorForce_addr);
*/
    public static native void internal_native_set_m_maxMotorForce(long this_addr, long m_maxMotorForce_addr);
}
