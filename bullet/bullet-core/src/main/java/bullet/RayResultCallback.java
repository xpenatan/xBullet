/*-------------------------------------------------------
 * This file was generated by JParser
 *
 * Do not make changes to this file
 *-------------------------------------------------------*/
package bullet;

import com.github.xpenatan.jParser.idl.IDLBase;
import bullet.bulletcollision.collisiondispatch.btCollisionObject;

public class RayResultCallback extends IDLBase {

    private btCollisionObject btCollisionObject_TEMP_GEN_0;

    static public final RayResultCallback NULL = RayResultCallback.native_new();

    /**
     * Dummy constructor, used internally to creates objects without C++ pointer
     */
    @Deprecated()
    protected RayResultCallback(byte b, char c) {
    }

    /**
     * @return An empty instance without a native address
     */
    public static RayResultCallback native_new() {
        return new RayResultCallback((byte) 0, (char) 0);
    }

    protected void deleteNative() {
        internal_native_deleteNative(native_address);
    }

    /*[-JNI;-NATIVE]
btCollisionWorld::RayResultCallback* nativeObject = (btCollisionWorld::RayResultCallback*)this_addr;
delete nativeObject;
*/
    public static native void internal_native_deleteNative(long this_addr);

    public boolean hasHit() {
        return internal_native_hasHit(native_address);
    }

    /*[-JNI;-NATIVE]
btCollisionWorld::RayResultCallback* nativeObject = (btCollisionWorld::RayResultCallback*)this_addr;
return nativeObject->hasHit();
*/
    public static native boolean internal_native_hasHit(long this_addr);

    public float addSingleResult(LocalRayResult rayResult, boolean normalInWorldSpace) {
        return internal_native_addSingleResult(native_address, rayResult.native_address, normalInWorldSpace);
    }

    /*[-JNI;-NATIVE]
btCollisionWorld::RayResultCallback* nativeObject = (btCollisionWorld::RayResultCallback*)this_addr;
return nativeObject->addSingleResult(*((btCollisionWorld::LocalRayResult* )rayResult_addr), normalInWorldSpace);
*/
    public static native float internal_native_addSingleResult(long this_addr, long rayResult_addr, boolean normalInWorldSpace);

    public float get_m_closestHitFraction() {
        return internal_native_get_m_closestHitFraction(native_address);
    }

    /*[-JNI;-NATIVE]
btCollisionWorld::RayResultCallback* nativeObject = (btCollisionWorld::RayResultCallback*)this_addr;
return nativeObject->m_closestHitFraction;
*/
    public static native float internal_native_get_m_closestHitFraction(long this_addr);

    public void set_m_closestHitFraction(float m_closestHitFraction) {
        internal_native_set_m_closestHitFraction(native_address, m_closestHitFraction);
    }

    /*[-JNI;-NATIVE]
btCollisionWorld::RayResultCallback* nativeObject = (btCollisionWorld::RayResultCallback*)this_addr;
nativeObject->m_closestHitFraction = m_closestHitFraction;
*/
    public static native void internal_native_set_m_closestHitFraction(long this_addr, float m_closestHitFraction);

    public int get_m_collisionFilterGroup() {
        return internal_native_get_m_collisionFilterGroup(native_address);
    }

    /*[-JNI;-NATIVE]
btCollisionWorld::RayResultCallback* nativeObject = (btCollisionWorld::RayResultCallback*)this_addr;
return nativeObject->m_collisionFilterGroup;
*/
    public static native int internal_native_get_m_collisionFilterGroup(long this_addr);

    public void set_m_collisionFilterGroup(int m_collisionFilterGroup) {
        internal_native_set_m_collisionFilterGroup(native_address, m_collisionFilterGroup);
    }

    /*[-JNI;-NATIVE]
btCollisionWorld::RayResultCallback* nativeObject = (btCollisionWorld::RayResultCallback*)this_addr;
nativeObject->m_collisionFilterGroup = m_collisionFilterGroup;
*/
    public static native void internal_native_set_m_collisionFilterGroup(long this_addr, int m_collisionFilterGroup);

    public int get_m_collisionFilterMask() {
        return internal_native_get_m_collisionFilterMask(native_address);
    }

    /*[-JNI;-NATIVE]
btCollisionWorld::RayResultCallback* nativeObject = (btCollisionWorld::RayResultCallback*)this_addr;
return nativeObject->m_collisionFilterMask;
*/
    public static native int internal_native_get_m_collisionFilterMask(long this_addr);

    public void set_m_collisionFilterMask(int m_collisionFilterMask) {
        internal_native_set_m_collisionFilterMask(native_address, m_collisionFilterMask);
    }

    /*[-JNI;-NATIVE]
btCollisionWorld::RayResultCallback* nativeObject = (btCollisionWorld::RayResultCallback*)this_addr;
nativeObject->m_collisionFilterMask = m_collisionFilterMask;
*/
    public static native void internal_native_set_m_collisionFilterMask(long this_addr, int m_collisionFilterMask);

    public btCollisionObject get_m_collisionObject() {
        long pointer = internal_native_get_m_collisionObject(native_address);
        if (pointer == 0)
            return btCollisionObject.NULL;
        if (btCollisionObject_TEMP_GEN_0 == null)
            btCollisionObject_TEMP_GEN_0 = btCollisionObject.native_new();
        btCollisionObject_TEMP_GEN_0.internal_reset(pointer, false);
        return btCollisionObject_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
btCollisionWorld::RayResultCallback* nativeObject = (btCollisionWorld::RayResultCallback*)this_addr;
const btCollisionObject* attr = nativeObject->m_collisionObject;
return (jlong)attr;
*/
    public static native long internal_native_get_m_collisionObject(long this_addr);

    public void set_m_collisionObject(btCollisionObject m_collisionObject) {
        internal_native_set_m_collisionObject(native_address, m_collisionObject.native_address);
    }

    /*[-JNI;-NATIVE]
btCollisionWorld::RayResultCallback* nativeObject = (btCollisionWorld::RayResultCallback*)this_addr;
nativeObject->m_collisionObject = (btCollisionObject*)m_collisionObject_addr;
*/
    public static native void internal_native_set_m_collisionObject(long this_addr, long m_collisionObject_addr);

    public int get_m_flags() {
        return internal_native_get_m_flags(native_address);
    }

    /*[-JNI;-NATIVE]
btCollisionWorld::RayResultCallback* nativeObject = (btCollisionWorld::RayResultCallback*)this_addr;
return nativeObject->m_flags;
*/
    public static native int internal_native_get_m_flags(long this_addr);

    public void set_m_flags(int m_flags) {
        internal_native_set_m_flags(native_address, m_flags);
    }

    /*[-JNI;-NATIVE]
btCollisionWorld::RayResultCallback* nativeObject = (btCollisionWorld::RayResultCallback*)this_addr;
nativeObject->m_flags = m_flags;
*/
    public static native void internal_native_set_m_flags(long this_addr, int m_flags);
}
