/*-------------------------------------------------------
 * This file was generated by JParser
 *
 * Do not make changes to this file
 *-------------------------------------------------------*/
package bullet.bulletcollision.collisiondispatch;

import com.github.xpenatan.jParser.idl.IDLBase;
import bullet.bulletcollision.collisionshapes.btCollisionShape;
import bullet.linearmath.btVector3;
import bullet.linearmath.btTransform;
import bullet.bulletcollision.broadphasecollision.btBroadphaseProxy;

public class btCollisionObject extends IDLBase {

    private btCollisionShape btCollisionShape_TEMP_GEN_0;

    private btVector3 btVector3_TEMP_GEN_0;

    private btTransform btTransform_TEMP_GEN_0;

    private btBroadphaseProxy btBroadphaseProxy_TEMP_GEN_0;

    private btTransform btTransform_TEMP_GEN_1;

    private btVector3 btVector3_TEMP_GEN_1;

    private btVector3 btVector3_TEMP_GEN_2;

    private IDLBase IDLBase_TEMP_GEN_0;

    static public final btCollisionObject NULL = btCollisionObject.native_new();

    public btCollisionObject() {
        long addr = internal_native_create();
        internal_reset(addr, true);
    }

    /*[-JNI;-NATIVE]
return (jlong)new btCollisionObject();
*/
    public static native long internal_native_create();

    /**
     * Dummy constructor, used internally to creates objects without C++ pointer
     */
    @Deprecated()
    protected btCollisionObject(byte b, char c) {
    }

    /**
     * @return An empty instance without a native address
     */
    public static btCollisionObject native_new() {
        return new btCollisionObject((byte) 0, (char) 0);
    }

    protected void deleteNative() {
        internal_native_deleteNative(native_address);
    }

    /*[-JNI;-NATIVE]
btCollisionObject* nativeObject = (btCollisionObject*)this_addr;
delete nativeObject;
*/
    public static native void internal_native_deleteNative(long this_addr);

    public btCollisionShape getCollisionShape() {
        long pointer = internal_native_getCollisionShape(native_address);
        if (pointer == 0)
            return btCollisionShape.NULL;
        if (btCollisionShape_TEMP_GEN_0 == null)
            btCollisionShape_TEMP_GEN_0 = btCollisionShape.native_new();
        btCollisionShape_TEMP_GEN_0.internal_reset(pointer, false);
        return btCollisionShape_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
btCollisionObject* nativeObject = (btCollisionObject*)this_addr;
btCollisionShape* obj = nativeObject->getCollisionShape();
return (jlong)obj;
*/
    public static native long internal_native_getCollisionShape(long this_addr);

    public boolean mergesSimulationIslands() {
        return internal_native_mergesSimulationIslands(native_address);
    }

    /*[-JNI;-NATIVE]
btCollisionObject* nativeObject = (btCollisionObject*)this_addr;
return nativeObject->mergesSimulationIslands();
*/
    public static native boolean internal_native_mergesSimulationIslands(long this_addr);

    public btVector3 getAnisotropicFriction() {
        long pointer = internal_native_getAnisotropicFriction(native_address);
        if (pointer == 0)
            return btVector3.NULL;
        if (btVector3_TEMP_GEN_0 == null)
            btVector3_TEMP_GEN_0 = btVector3.native_new();
        btVector3_TEMP_GEN_0.internal_reset(pointer, false);
        return btVector3_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
btCollisionObject* nativeObject = (btCollisionObject*)this_addr;
return (jlong)&nativeObject->getAnisotropicFriction();
*/
    public static native long internal_native_getAnisotropicFriction(long this_addr);

    public void setAnisotropicFriction(btVector3 anisotropicFriction, int frictionMode) {
        internal_native_setAnisotropicFriction(native_address, anisotropicFriction.native_address, frictionMode);
    }

    /*[-JNI;-NATIVE]
btCollisionObject* nativeObject = (btCollisionObject*)this_addr;
nativeObject->setAnisotropicFriction(*((btVector3* )anisotropicFriction_addr), (int)frictionMode);
*/
    public static native void internal_native_setAnisotropicFriction(long this_addr, long anisotropicFriction_addr, int frictionMode);

    public boolean hasAnisotropicFriction(int frictionMode) {
        return internal_native_hasAnisotropicFriction(native_address, frictionMode);
    }

    /*[-JNI;-NATIVE]
btCollisionObject* nativeObject = (btCollisionObject*)this_addr;
return nativeObject->hasAnisotropicFriction((int)frictionMode);
*/
    public static native boolean internal_native_hasAnisotropicFriction(long this_addr, int frictionMode);

    public boolean hasAnisotropicFriction() {
        return internal_native_hasAnisotropicFriction(native_address);
    }

    /*[-JNI;-NATIVE]
btCollisionObject* nativeObject = (btCollisionObject*)this_addr;
return nativeObject->hasAnisotropicFriction();
*/
    public static native boolean internal_native_hasAnisotropicFriction(long this_addr);

    public void setContactProcessingThreshold(float contactProcessingThreshold) {
        internal_native_setContactProcessingThreshold(native_address, contactProcessingThreshold);
    }

    /*[-JNI;-NATIVE]
btCollisionObject* nativeObject = (btCollisionObject*)this_addr;
nativeObject->setContactProcessingThreshold((float)contactProcessingThreshold);
*/
    public static native void internal_native_setContactProcessingThreshold(long this_addr, float contactProcessingThreshold);

    public float getContactProcessingThreshold() {
        return internal_native_getContactProcessingThreshold(native_address);
    }

    /*[-JNI;-NATIVE]
btCollisionObject* nativeObject = (btCollisionObject*)this_addr;
return nativeObject->getContactProcessingThreshold();
*/
    public static native float internal_native_getContactProcessingThreshold(long this_addr);

    public boolean isStaticObject() {
        return internal_native_isStaticObject(native_address);
    }

    /*[-JNI;-NATIVE]
btCollisionObject* nativeObject = (btCollisionObject*)this_addr;
return nativeObject->isStaticObject();
*/
    public static native boolean internal_native_isStaticObject(long this_addr);

    public boolean isKinematicObject() {
        return internal_native_isKinematicObject(native_address);
    }

    /*[-JNI;-NATIVE]
btCollisionObject* nativeObject = (btCollisionObject*)this_addr;
return nativeObject->isKinematicObject();
*/
    public static native boolean internal_native_isKinematicObject(long this_addr);

    public boolean isStaticOrKinematicObject() {
        return internal_native_isStaticOrKinematicObject(native_address);
    }

    /*[-JNI;-NATIVE]
btCollisionObject* nativeObject = (btCollisionObject*)this_addr;
return nativeObject->isStaticOrKinematicObject();
*/
    public static native boolean internal_native_isStaticOrKinematicObject(long this_addr);

    public boolean hasContactResponse() {
        return internal_native_hasContactResponse(native_address);
    }

    /*[-JNI;-NATIVE]
btCollisionObject* nativeObject = (btCollisionObject*)this_addr;
return nativeObject->hasContactResponse();
*/
    public static native boolean internal_native_hasContactResponse(long this_addr);

    public void setCollisionShape(btCollisionShape collisionShape) {
        internal_native_setCollisionShape(native_address, collisionShape.native_address);
    }

    /*[-JNI;-NATIVE]
btCollisionObject* nativeObject = (btCollisionObject*)this_addr;
nativeObject->setCollisionShape((btCollisionShape* )collisionShape_addr);
*/
    public static native void internal_native_setCollisionShape(long this_addr, long collisionShape_addr);

    public void setIgnoreCollisionCheck(btCollisionObject obj, boolean ignoreCollisionCheck) {
        internal_native_setIgnoreCollisionCheck(native_address, obj.native_address, ignoreCollisionCheck);
    }

    /*[-JNI;-NATIVE]
btCollisionObject* nativeObject = (btCollisionObject*)this_addr;
nativeObject->setIgnoreCollisionCheck((btCollisionObject* )obj_addr, ignoreCollisionCheck);
*/
    public static native void internal_native_setIgnoreCollisionCheck(long this_addr, long obj_addr, boolean ignoreCollisionCheck);

    public boolean checkCollideWithOverride(btCollisionObject obj) {
        return internal_native_checkCollideWithOverride(native_address, obj.native_address);
    }

    /*[-JNI;-NATIVE]
btCollisionObject* nativeObject = (btCollisionObject*)this_addr;
return nativeObject->checkCollideWithOverride((btCollisionObject* )obj_addr);
*/
    public static native boolean internal_native_checkCollideWithOverride(long this_addr, long obj_addr);

    public int getActivationState() {
        return internal_native_getActivationState(native_address);
    }

    /*[-JNI;-NATIVE]
btCollisionObject* nativeObject = (btCollisionObject*)this_addr;
return nativeObject->getActivationState();
*/
    public static native int internal_native_getActivationState(long this_addr);

    public void setActivationState(int newState) {
        internal_native_setActivationState(native_address, newState);
    }

    /*[-JNI;-NATIVE]
btCollisionObject* nativeObject = (btCollisionObject*)this_addr;
nativeObject->setActivationState((int)newState);
*/
    public static native void internal_native_setActivationState(long this_addr, int newState);

    public void setDeactivationTime(float time) {
        internal_native_setDeactivationTime(native_address, time);
    }

    /*[-JNI;-NATIVE]
btCollisionObject* nativeObject = (btCollisionObject*)this_addr;
nativeObject->setDeactivationTime((float)time);
*/
    public static native void internal_native_setDeactivationTime(long this_addr, float time);

    public float getDeactivationTime() {
        return internal_native_getDeactivationTime(native_address);
    }

    /*[-JNI;-NATIVE]
btCollisionObject* nativeObject = (btCollisionObject*)this_addr;
return nativeObject->getDeactivationTime();
*/
    public static native float internal_native_getDeactivationTime(long this_addr);

    public void forceActivationState(int newState) {
        internal_native_forceActivationState(native_address, newState);
    }

    /*[-JNI;-NATIVE]
btCollisionObject* nativeObject = (btCollisionObject*)this_addr;
nativeObject->forceActivationState((int)newState);
*/
    public static native void internal_native_forceActivationState(long this_addr, int newState);

    public void activate(boolean forceActivation) {
        internal_native_activate(native_address, forceActivation);
    }

    /*[-JNI;-NATIVE]
btCollisionObject* nativeObject = (btCollisionObject*)this_addr;
nativeObject->activate(forceActivation);
*/
    public static native void internal_native_activate(long this_addr, boolean forceActivation);

    public void activate() {
        internal_native_activate(native_address);
    }

    /*[-JNI;-NATIVE]
btCollisionObject* nativeObject = (btCollisionObject*)this_addr;
nativeObject->activate();
*/
    public static native void internal_native_activate(long this_addr);

    public boolean isActive() {
        return internal_native_isActive(native_address);
    }

    /*[-JNI;-NATIVE]
btCollisionObject* nativeObject = (btCollisionObject*)this_addr;
return nativeObject->isActive();
*/
    public static native boolean internal_native_isActive(long this_addr);

    public void setRestitution(float rest) {
        internal_native_setRestitution(native_address, rest);
    }

    /*[-JNI;-NATIVE]
btCollisionObject* nativeObject = (btCollisionObject*)this_addr;
nativeObject->setRestitution((float)rest);
*/
    public static native void internal_native_setRestitution(long this_addr, float rest);

    public float getRestitution() {
        return internal_native_getRestitution(native_address);
    }

    /*[-JNI;-NATIVE]
btCollisionObject* nativeObject = (btCollisionObject*)this_addr;
return nativeObject->getRestitution();
*/
    public static native float internal_native_getRestitution(long this_addr);

    public void setFriction(float frict) {
        internal_native_setFriction(native_address, frict);
    }

    /*[-JNI;-NATIVE]
btCollisionObject* nativeObject = (btCollisionObject*)this_addr;
nativeObject->setFriction((float)frict);
*/
    public static native void internal_native_setFriction(long this_addr, float frict);

    public float getFriction() {
        return internal_native_getFriction(native_address);
    }

    /*[-JNI;-NATIVE]
btCollisionObject* nativeObject = (btCollisionObject*)this_addr;
return nativeObject->getFriction();
*/
    public static native float internal_native_getFriction(long this_addr);

    public void setRollingFriction(float frict) {
        internal_native_setRollingFriction(native_address, frict);
    }

    /*[-JNI;-NATIVE]
btCollisionObject* nativeObject = (btCollisionObject*)this_addr;
nativeObject->setRollingFriction((float)frict);
*/
    public static native void internal_native_setRollingFriction(long this_addr, float frict);

    public float getRollingFriction() {
        return internal_native_getRollingFriction(native_address);
    }

    /*[-JNI;-NATIVE]
btCollisionObject* nativeObject = (btCollisionObject*)this_addr;
return nativeObject->getRollingFriction();
*/
    public static native float internal_native_getRollingFriction(long this_addr);

    public btTransform getWorldTransform() {
        long pointer = internal_native_getWorldTransform(native_address);
        if (pointer == 0)
            return btTransform.NULL;
        if (btTransform_TEMP_GEN_0 == null)
            btTransform_TEMP_GEN_0 = btTransform.native_new();
        btTransform_TEMP_GEN_0.internal_reset(pointer, false);
        return btTransform_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
btCollisionObject* nativeObject = (btCollisionObject*)this_addr;
return (jlong)&nativeObject->getWorldTransform();
*/
    public static native long internal_native_getWorldTransform(long this_addr);

    public void setWorldTransform(btTransform worldTrans) {
        internal_native_setWorldTransform(native_address, worldTrans.native_address);
    }

    /*[-JNI;-NATIVE]
btCollisionObject* nativeObject = (btCollisionObject*)this_addr;
nativeObject->setWorldTransform(*((btTransform* )worldTrans_addr));
*/
    public static native void internal_native_setWorldTransform(long this_addr, long worldTrans_addr);

    public btBroadphaseProxy getBroadphaseHandle() {
        long pointer = internal_native_getBroadphaseHandle(native_address);
        if (pointer == 0)
            return btBroadphaseProxy.NULL;
        if (btBroadphaseProxy_TEMP_GEN_0 == null)
            btBroadphaseProxy_TEMP_GEN_0 = btBroadphaseProxy.native_new();
        btBroadphaseProxy_TEMP_GEN_0.internal_reset(pointer, false);
        return btBroadphaseProxy_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
btCollisionObject* nativeObject = (btCollisionObject*)this_addr;
btBroadphaseProxy* obj = nativeObject->getBroadphaseHandle();
return (jlong)obj;
*/
    public static native long internal_native_getBroadphaseHandle(long this_addr);

    public void setBroadphaseHandle(btBroadphaseProxy handle) {
        internal_native_setBroadphaseHandle(native_address, handle.native_address);
    }

    /*[-JNI;-NATIVE]
btCollisionObject* nativeObject = (btCollisionObject*)this_addr;
nativeObject->setBroadphaseHandle((btBroadphaseProxy* )handle_addr);
*/
    public static native void internal_native_setBroadphaseHandle(long this_addr, long handle_addr);

    public btTransform getInterpolationWorldTransform() {
        long pointer = internal_native_getInterpolationWorldTransform(native_address);
        if (pointer == 0)
            return btTransform.NULL;
        if (btTransform_TEMP_GEN_1 == null)
            btTransform_TEMP_GEN_1 = btTransform.native_new();
        btTransform_TEMP_GEN_1.internal_reset(pointer, false);
        return btTransform_TEMP_GEN_1;
    }

    /*[-JNI;-NATIVE]
btCollisionObject* nativeObject = (btCollisionObject*)this_addr;
return (jlong)&nativeObject->getInterpolationWorldTransform();
*/
    public static native long internal_native_getInterpolationWorldTransform(long this_addr);

    public void setInterpolationWorldTransform(btTransform trans) {
        internal_native_setInterpolationWorldTransform(native_address, trans.native_address);
    }

    /*[-JNI;-NATIVE]
btCollisionObject* nativeObject = (btCollisionObject*)this_addr;
nativeObject->setInterpolationWorldTransform(*((btTransform* )trans_addr));
*/
    public static native void internal_native_setInterpolationWorldTransform(long this_addr, long trans_addr);

    public void setInterpolationLinearVelocity(btVector3 linvel) {
        internal_native_setInterpolationLinearVelocity(native_address, linvel.native_address);
    }

    /*[-JNI;-NATIVE]
btCollisionObject* nativeObject = (btCollisionObject*)this_addr;
nativeObject->setInterpolationLinearVelocity(*((btVector3* )linvel_addr));
*/
    public static native void internal_native_setInterpolationLinearVelocity(long this_addr, long linvel_addr);

    public void setInterpolationAngularVelocity(btVector3 angvel) {
        internal_native_setInterpolationAngularVelocity(native_address, angvel.native_address);
    }

    /*[-JNI;-NATIVE]
btCollisionObject* nativeObject = (btCollisionObject*)this_addr;
nativeObject->setInterpolationAngularVelocity(*((btVector3* )angvel_addr));
*/
    public static native void internal_native_setInterpolationAngularVelocity(long this_addr, long angvel_addr);

    public btVector3 getInterpolationLinearVelocity() {
        long pointer = internal_native_getInterpolationLinearVelocity(native_address);
        if (pointer == 0)
            return btVector3.NULL;
        if (btVector3_TEMP_GEN_1 == null)
            btVector3_TEMP_GEN_1 = btVector3.native_new();
        btVector3_TEMP_GEN_1.internal_reset(pointer, false);
        return btVector3_TEMP_GEN_1;
    }

    /*[-JNI;-NATIVE]
btCollisionObject* nativeObject = (btCollisionObject*)this_addr;
return (jlong)&nativeObject->getInterpolationLinearVelocity();
*/
    public static native long internal_native_getInterpolationLinearVelocity(long this_addr);

    public btVector3 getInterpolationAngularVelocity() {
        long pointer = internal_native_getInterpolationAngularVelocity(native_address);
        if (pointer == 0)
            return btVector3.NULL;
        if (btVector3_TEMP_GEN_2 == null)
            btVector3_TEMP_GEN_2 = btVector3.native_new();
        btVector3_TEMP_GEN_2.internal_reset(pointer, false);
        return btVector3_TEMP_GEN_2;
    }

    /*[-JNI;-NATIVE]
btCollisionObject* nativeObject = (btCollisionObject*)this_addr;
return (jlong)&nativeObject->getInterpolationAngularVelocity();
*/
    public static native long internal_native_getInterpolationAngularVelocity(long this_addr);

    public int getIslandTag() {
        return internal_native_getIslandTag(native_address);
    }

    /*[-JNI;-NATIVE]
btCollisionObject* nativeObject = (btCollisionObject*)this_addr;
return nativeObject->getIslandTag();
*/
    public static native int internal_native_getIslandTag(long this_addr);

    public void setIslandTag(int tag) {
        internal_native_setIslandTag(native_address, tag);
    }

    /*[-JNI;-NATIVE]
btCollisionObject* nativeObject = (btCollisionObject*)this_addr;
nativeObject->setIslandTag((int)tag);
*/
    public static native void internal_native_setIslandTag(long this_addr, int tag);

    public int getCompanionId() {
        return internal_native_getCompanionId(native_address);
    }

    /*[-JNI;-NATIVE]
btCollisionObject* nativeObject = (btCollisionObject*)this_addr;
return nativeObject->getCompanionId();
*/
    public static native int internal_native_getCompanionId(long this_addr);

    public void setCompanionId(int id) {
        internal_native_setCompanionId(native_address, id);
    }

    /*[-JNI;-NATIVE]
btCollisionObject* nativeObject = (btCollisionObject*)this_addr;
nativeObject->setCompanionId((int)id);
*/
    public static native void internal_native_setCompanionId(long this_addr, int id);

    public float getHitFraction() {
        return internal_native_getHitFraction(native_address);
    }

    /*[-JNI;-NATIVE]
btCollisionObject* nativeObject = (btCollisionObject*)this_addr;
return nativeObject->getHitFraction();
*/
    public static native float internal_native_getHitFraction(long this_addr);

    public void setHitFraction(float hitFraction) {
        internal_native_setHitFraction(native_address, hitFraction);
    }

    /*[-JNI;-NATIVE]
btCollisionObject* nativeObject = (btCollisionObject*)this_addr;
nativeObject->setHitFraction((float)hitFraction);
*/
    public static native void internal_native_setHitFraction(long this_addr, float hitFraction);

    public int getCollisionFlags() {
        return internal_native_getCollisionFlags(native_address);
    }

    /*[-JNI;-NATIVE]
btCollisionObject* nativeObject = (btCollisionObject*)this_addr;
return nativeObject->getCollisionFlags();
*/
    public static native int internal_native_getCollisionFlags(long this_addr);

    public void setCollisionFlags(int flags) {
        internal_native_setCollisionFlags(native_address, flags);
    }

    /*[-JNI;-NATIVE]
btCollisionObject* nativeObject = (btCollisionObject*)this_addr;
nativeObject->setCollisionFlags((int)flags);
*/
    public static native void internal_native_setCollisionFlags(long this_addr, int flags);

    public float getCcdSweptSphereRadius() {
        return internal_native_getCcdSweptSphereRadius(native_address);
    }

    /*[-JNI;-NATIVE]
btCollisionObject* nativeObject = (btCollisionObject*)this_addr;
return nativeObject->getCcdSweptSphereRadius();
*/
    public static native float internal_native_getCcdSweptSphereRadius(long this_addr);

    public void setCcdSweptSphereRadius(float radius) {
        internal_native_setCcdSweptSphereRadius(native_address, radius);
    }

    /*[-JNI;-NATIVE]
btCollisionObject* nativeObject = (btCollisionObject*)this_addr;
nativeObject->setCcdSweptSphereRadius((float)radius);
*/
    public static native void internal_native_setCcdSweptSphereRadius(long this_addr, float radius);

    public float getCcdMotionThreshold() {
        return internal_native_getCcdMotionThreshold(native_address);
    }

    /*[-JNI;-NATIVE]
btCollisionObject* nativeObject = (btCollisionObject*)this_addr;
return nativeObject->getCcdMotionThreshold();
*/
    public static native float internal_native_getCcdMotionThreshold(long this_addr);

    public float getCcdSquareMotionThreshold() {
        return internal_native_getCcdSquareMotionThreshold(native_address);
    }

    /*[-JNI;-NATIVE]
btCollisionObject* nativeObject = (btCollisionObject*)this_addr;
return nativeObject->getCcdSquareMotionThreshold();
*/
    public static native float internal_native_getCcdSquareMotionThreshold(long this_addr);

    public void setCcdMotionThreshold(float ccdMotionThreshold) {
        internal_native_setCcdMotionThreshold(native_address, ccdMotionThreshold);
    }

    /*[-JNI;-NATIVE]
btCollisionObject* nativeObject = (btCollisionObject*)this_addr;
nativeObject->setCcdMotionThreshold((float)ccdMotionThreshold);
*/
    public static native void internal_native_setCcdMotionThreshold(long this_addr, float ccdMotionThreshold);

    public IDLBase getUserPointer() {
        long pointer = internal_native_getUserPointer(native_address);
        if (pointer == 0)
            return IDLBase.NULL;
        if (IDLBase_TEMP_GEN_0 == null)
            IDLBase_TEMP_GEN_0 = IDLBase.native_new();
        IDLBase_TEMP_GEN_0.internal_reset(pointer, false);
        return IDLBase_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
btCollisionObject* nativeObject = (btCollisionObject*)this_addr;
return (jlong)nativeObject->getUserPointer();
*/
    public static native long internal_native_getUserPointer(long this_addr);

    public int getUserIndex() {
        return internal_native_getUserIndex(native_address);
    }

    /*[-JNI;-NATIVE]
btCollisionObject* nativeObject = (btCollisionObject*)this_addr;
return nativeObject->getUserIndex();
*/
    public static native int internal_native_getUserIndex(long this_addr);

    public void setUserPointer(IDLBase userPointer) {
        internal_native_setUserPointer(native_address, userPointer.native_void_address);
    }

    /*[-JNI;-NATIVE]
btCollisionObject* nativeObject = (btCollisionObject*)this_addr;
nativeObject->setUserPointer((void** )userPointer_addr);
*/
    public static native void internal_native_setUserPointer(long this_addr, long userPointer_addr);

    public void setUserIndex(int index) {
        internal_native_setUserIndex(native_address, index);
    }

    /*[-JNI;-NATIVE]
btCollisionObject* nativeObject = (btCollisionObject*)this_addr;
nativeObject->setUserIndex((int)index);
*/
    public static native void internal_native_setUserIndex(long this_addr, int index);

    public int getUpdateRevisionInternal() {
        return internal_native_getUpdateRevisionInternal(native_address);
    }

    /*[-JNI;-NATIVE]
btCollisionObject* nativeObject = (btCollisionObject*)this_addr;
return nativeObject->getUpdateRevisionInternal();
*/
    public static native int internal_native_getUpdateRevisionInternal(long this_addr);

    public boolean checkCollideWith(btCollisionObject co) {
        return internal_native_checkCollideWith(native_address, co.native_address);
    }

    /*[-JNI;-NATIVE]
btCollisionObject* nativeObject = (btCollisionObject*)this_addr;
return nativeObject->checkCollideWith((btCollisionObject* )co_addr);
*/
    public static native boolean internal_native_checkCollideWith(long this_addr, long co_addr);

    public int getInternalType() {
        return internal_native_getInternalType(native_address);
    }

    /*[-JNI;-NATIVE]
btCollisionObject* nativeObject = (btCollisionObject*)this_addr;
return nativeObject->getInternalType();
*/
    public static native int internal_native_getInternalType(long this_addr);
}
