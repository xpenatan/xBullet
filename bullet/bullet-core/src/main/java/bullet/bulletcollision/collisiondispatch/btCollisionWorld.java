/*-------------------------------------------------------
 * This file was generated by JParser
 *
 * Do not make changes to this file
 *-------------------------------------------------------*/
package bullet.bulletcollision.collisiondispatch;

import com.github.xpenatan.jParser.idl.IDLBase;
import bullet.bulletcollision.broadphasecollision.btDispatcher;
import bullet.bulletcollision.broadphasecollision.btBroadphaseInterface;
import bullet.bulletcollision.broadphasecollision.btOverlappingPairCache;
import bullet.btDispatcherInfo;
import bullet.linearmath.btIDebugDraw;
import bullet.linearmath.btTransform;
import bullet.bulletcollision.collisionshapes.btCollisionShape;
import bullet.linearmath.btVector3;
import bullet.RayResultCallback;
import bullet.bulletcollision.collisionshapes.btConvexShape;
import bullet.ConvexResultCallback;
import bullet.ContactResultCallback;
import bullet.btCollisionObjectArray;

public class btCollisionWorld extends IDLBase {

    private btBroadphaseInterface btBroadphaseInterface_TEMP_GEN_0;

    private btOverlappingPairCache btOverlappingPairCache_TEMP_GEN_0;

    private btDispatcher btDispatcher_TEMP_GEN_0;

    private btDispatcherInfo btDispatcherInfo_TEMP_GEN_0;

    private btIDebugDraw btIDebugDraw_TEMP_GEN_0;

    private btCollisionObjectArray btCollisionObjectArray_TEMP_GEN_0;

    static public final btCollisionWorld NULL = btCollisionWorld.native_new();

    public btCollisionWorld(btDispatcher dispatcher, btBroadphaseInterface pairCache, btCollisionConfiguration collisionConfiguration) {
        long addr = internal_native_create_btDispatcher_btBroadphaseInterface_btCollisionConfiguration(dispatcher.native_address, pairCache.native_address, collisionConfiguration.native_address);
        internal_reset(addr, true);
    }

    /*[-JNI;-NATIVE]
return (jlong)new btCollisionWorld((btDispatcher* )dispatcher_addr, (btBroadphaseInterface* )pairCache_addr, (btCollisionConfiguration* )collisionConfiguration_addr);
*/
    public static native long internal_native_create_btDispatcher_btBroadphaseInterface_btCollisionConfiguration(long dispatcher_addr, long pairCache_addr, long collisionConfiguration_addr);

    /**
     * Dummy constructor, used internally to creates objects without C++ pointer
     */
    @Deprecated()
    protected btCollisionWorld(byte b, char c) {
    }

    /**
     * @return An empty instance without a native address
     */
    public static btCollisionWorld native_new() {
        return new btCollisionWorld((byte) 0, (char) 0);
    }

    protected void deleteNative() {
        internal_native_deleteNative(native_address);
    }

    /*[-JNI;-NATIVE]
btCollisionWorld* nativeObject = (btCollisionWorld*)this_addr;
delete nativeObject;
*/
    public static native void internal_native_deleteNative(long this_addr);

    public void setBroadphase(btBroadphaseInterface pairCache) {
        internal_native_setBroadphase(native_address, pairCache.native_address);
    }

    /*[-JNI;-NATIVE]
btCollisionWorld* nativeObject = (btCollisionWorld*)this_addr;
nativeObject->setBroadphase((btBroadphaseInterface* )pairCache_addr);
*/
    public static native void internal_native_setBroadphase(long this_addr, long pairCache_addr);

    public btBroadphaseInterface getBroadphase() {
        long pointer = internal_native_getBroadphase(native_address);
        if (pointer == 0)
            return btBroadphaseInterface.NULL;
        if (btBroadphaseInterface_TEMP_GEN_0 == null)
            btBroadphaseInterface_TEMP_GEN_0 = btBroadphaseInterface.native_new();
        btBroadphaseInterface_TEMP_GEN_0.internal_reset(pointer, false);
        return btBroadphaseInterface_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
btCollisionWorld* nativeObject = (btCollisionWorld*)this_addr;
btBroadphaseInterface* obj = nativeObject->getBroadphase();
return (jlong)obj;
*/
    public static native long internal_native_getBroadphase(long this_addr);

    public btOverlappingPairCache getPairCache() {
        long pointer = internal_native_getPairCache(native_address);
        if (pointer == 0)
            return btOverlappingPairCache.NULL;
        if (btOverlappingPairCache_TEMP_GEN_0 == null)
            btOverlappingPairCache_TEMP_GEN_0 = btOverlappingPairCache.native_new();
        btOverlappingPairCache_TEMP_GEN_0.internal_reset(pointer, false);
        return btOverlappingPairCache_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
btCollisionWorld* nativeObject = (btCollisionWorld*)this_addr;
btOverlappingPairCache* obj = nativeObject->getPairCache();
return (jlong)obj;
*/
    public static native long internal_native_getPairCache(long this_addr);

    public btDispatcher getDispatcher() {
        long pointer = internal_native_getDispatcher(native_address);
        if (pointer == 0)
            return btDispatcher.NULL;
        if (btDispatcher_TEMP_GEN_0 == null)
            btDispatcher_TEMP_GEN_0 = btDispatcher.native_new();
        btDispatcher_TEMP_GEN_0.internal_reset(pointer, false);
        return btDispatcher_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
btCollisionWorld* nativeObject = (btCollisionWorld*)this_addr;
btDispatcher* obj = nativeObject->getDispatcher();
return (jlong)obj;
*/
    public static native long internal_native_getDispatcher(long this_addr);

    public btDispatcherInfo getDispatchInfo() {
        long pointer = internal_native_getDispatchInfo(native_address);
        if (pointer == 0)
            return btDispatcherInfo.NULL;
        if (btDispatcherInfo_TEMP_GEN_0 == null)
            btDispatcherInfo_TEMP_GEN_0 = btDispatcherInfo.native_new();
        btDispatcherInfo_TEMP_GEN_0.internal_reset(pointer, false);
        return btDispatcherInfo_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
btCollisionWorld* nativeObject = (btCollisionWorld*)this_addr;
return (jlong)&nativeObject->getDispatchInfo();
*/
    public static native long internal_native_getDispatchInfo(long this_addr);

    public btIDebugDraw getDebugDrawer() {
        long pointer = internal_native_getDebugDrawer(native_address);
        if (pointer == 0)
            return btIDebugDraw.NULL;
        if (btIDebugDraw_TEMP_GEN_0 == null)
            btIDebugDraw_TEMP_GEN_0 = btIDebugDraw.native_new();
        btIDebugDraw_TEMP_GEN_0.internal_reset(pointer, false);
        return btIDebugDraw_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
btCollisionWorld* nativeObject = (btCollisionWorld*)this_addr;
btIDebugDraw* obj = nativeObject->getDebugDrawer();
return (jlong)obj;
*/
    public static native long internal_native_getDebugDrawer(long this_addr);

    public void updateSingleAabb(btCollisionObject colObj) {
        internal_native_updateSingleAabb(native_address, colObj.native_address);
    }

    /*[-JNI;-NATIVE]
btCollisionWorld* nativeObject = (btCollisionWorld*)this_addr;
nativeObject->updateSingleAabb((btCollisionObject* )colObj_addr);
*/
    public static native void internal_native_updateSingleAabb(long this_addr, long colObj_addr);

    public void updateAabbs() {
        internal_native_updateAabbs(native_address);
    }

    /*[-JNI;-NATIVE]
btCollisionWorld* nativeObject = (btCollisionWorld*)this_addr;
nativeObject->updateAabbs();
*/
    public static native void internal_native_updateAabbs(long this_addr);

    public void computeOverlappingPairs() {
        internal_native_computeOverlappingPairs(native_address);
    }

    /*[-JNI;-NATIVE]
btCollisionWorld* nativeObject = (btCollisionWorld*)this_addr;
nativeObject->computeOverlappingPairs();
*/
    public static native void internal_native_computeOverlappingPairs(long this_addr);

    public void setDebugDrawer(btIDebugDraw debugDrawer) {
        internal_native_setDebugDrawer(native_address, debugDrawer.native_address);
    }

    /*[-JNI;-NATIVE]
btCollisionWorld* nativeObject = (btCollisionWorld*)this_addr;
nativeObject->setDebugDrawer((btIDebugDraw* )debugDrawer_addr);
*/
    public static native void internal_native_setDebugDrawer(long this_addr, long debugDrawer_addr);

    public void debugDrawWorld() {
        internal_native_debugDrawWorld(native_address);
    }

    /*[-JNI;-NATIVE]
btCollisionWorld* nativeObject = (btCollisionWorld*)this_addr;
nativeObject->debugDrawWorld();
*/
    public static native void internal_native_debugDrawWorld(long this_addr);

    public void debugDrawObject(btTransform worldTransform, btCollisionShape shape, btVector3 color) {
        internal_native_debugDrawObject(native_address, worldTransform.native_address, shape.native_address, color.native_address);
    }

    /*[-JNI;-NATIVE]
btCollisionWorld* nativeObject = (btCollisionWorld*)this_addr;
nativeObject->debugDrawObject(*((btTransform* )worldTransform_addr), (btCollisionShape* )shape_addr, *((btVector3* )color_addr));
*/
    public static native void internal_native_debugDrawObject(long this_addr, long worldTransform_addr, long shape_addr, long color_addr);

    public int getNumCollisionObjects() {
        return internal_native_getNumCollisionObjects(native_address);
    }

    /*[-JNI;-NATIVE]
btCollisionWorld* nativeObject = (btCollisionWorld*)this_addr;
return nativeObject->getNumCollisionObjects();
*/
    public static native int internal_native_getNumCollisionObjects(long this_addr);

    public void rayTest(btVector3 rayFromWorld, btVector3 rayToWorld, RayResultCallback resultCallback) {
        internal_native_rayTest(native_address, rayFromWorld.native_address, rayToWorld.native_address, resultCallback.native_address);
    }

    /*[-JNI;-NATIVE]
btCollisionWorld* nativeObject = (btCollisionWorld*)this_addr;
nativeObject->rayTest(*((btVector3* )rayFromWorld_addr), *((btVector3* )rayToWorld_addr), *((btCollisionWorld::RayResultCallback* )resultCallback_addr));
*/
    public static native void internal_native_rayTest(long this_addr, long rayFromWorld_addr, long rayToWorld_addr, long resultCallback_addr);

    public void convexSweepTest(btConvexShape castShape, btTransform from, btTransform to, ConvexResultCallback resultCallback, float allowedCcdPenetration) {
        internal_native_convexSweepTest(native_address, castShape.native_address, from.native_address, to.native_address, resultCallback.native_address, allowedCcdPenetration);
    }

    /*[-JNI;-NATIVE]
btCollisionWorld* nativeObject = (btCollisionWorld*)this_addr;
nativeObject->convexSweepTest((btConvexShape* )castShape_addr, *((btTransform* )from_addr), *((btTransform* )to_addr), *((btCollisionWorld::ConvexResultCallback* )resultCallback_addr), (float)allowedCcdPenetration);
*/
    public static native void internal_native_convexSweepTest(long this_addr, long castShape_addr, long from_addr, long to_addr, long resultCallback_addr, float allowedCcdPenetration);

    public void convexSweepTest(btConvexShape castShape, btTransform from, btTransform to, ConvexResultCallback resultCallback) {
        internal_native_convexSweepTest(native_address, castShape.native_address, from.native_address, to.native_address, resultCallback.native_address);
    }

    /*[-JNI;-NATIVE]
btCollisionWorld* nativeObject = (btCollisionWorld*)this_addr;
nativeObject->convexSweepTest((btConvexShape* )castShape_addr, *((btTransform* )from_addr), *((btTransform* )to_addr), *((btCollisionWorld::ConvexResultCallback* )resultCallback_addr));
*/
    public static native void internal_native_convexSweepTest(long this_addr, long castShape_addr, long from_addr, long to_addr, long resultCallback_addr);

    public void contactTest(btCollisionObject colObj, ContactResultCallback resultCallback) {
        internal_native_contactTest(native_address, colObj.native_address, resultCallback.native_address);
    }

    /*[-JNI;-NATIVE]
btCollisionWorld* nativeObject = (btCollisionWorld*)this_addr;
nativeObject->contactTest((btCollisionObject* )colObj_addr, *((btCollisionWorld::ContactResultCallback* )resultCallback_addr));
*/
    public static native void internal_native_contactTest(long this_addr, long colObj_addr, long resultCallback_addr);

    public void contactPairTest(btCollisionObject colObjA, btCollisionObject colObjB, ContactResultCallback resultCallback) {
        internal_native_contactPairTest(native_address, colObjA.native_address, colObjB.native_address, resultCallback.native_address);
    }

    /*[-JNI;-NATIVE]
btCollisionWorld* nativeObject = (btCollisionWorld*)this_addr;
nativeObject->contactPairTest((btCollisionObject* )colObjA_addr, (btCollisionObject* )colObjB_addr, *((btCollisionWorld::ContactResultCallback* )resultCallback_addr));
*/
    public static native void internal_native_contactPairTest(long this_addr, long colObjA_addr, long colObjB_addr, long resultCallback_addr);

    public void addCollisionObject(btCollisionObject collisionObject, int collisionFilterGroup, int collisionFilterMask) {
        internal_native_addCollisionObject(native_address, collisionObject.native_address, collisionFilterGroup, collisionFilterMask);
    }

    /*[-JNI;-NATIVE]
btCollisionWorld* nativeObject = (btCollisionWorld*)this_addr;
nativeObject->addCollisionObject((btCollisionObject* )collisionObject_addr, (int)collisionFilterGroup, (int)collisionFilterMask);
*/
    public static native void internal_native_addCollisionObject(long this_addr, long collisionObject_addr, int collisionFilterGroup, int collisionFilterMask);

    public void addCollisionObject(btCollisionObject collisionObject, int collisionFilterGroup) {
        internal_native_addCollisionObject(native_address, collisionObject.native_address, collisionFilterGroup);
    }

    /*[-JNI;-NATIVE]
btCollisionWorld* nativeObject = (btCollisionWorld*)this_addr;
nativeObject->addCollisionObject((btCollisionObject* )collisionObject_addr, (int)collisionFilterGroup);
*/
    public static native void internal_native_addCollisionObject(long this_addr, long collisionObject_addr, int collisionFilterGroup);

    public void addCollisionObject(btCollisionObject collisionObject) {
        internal_native_addCollisionObject(native_address, collisionObject.native_address);
    }

    /*[-JNI;-NATIVE]
btCollisionWorld* nativeObject = (btCollisionWorld*)this_addr;
nativeObject->addCollisionObject((btCollisionObject* )collisionObject_addr);
*/
    public static native void internal_native_addCollisionObject(long this_addr, long collisionObject_addr);

    public btCollisionObjectArray getCollisionObjectArray() {
        long pointer = internal_native_getCollisionObjectArray(native_address);
        if (pointer == 0)
            return btCollisionObjectArray.NULL;
        if (btCollisionObjectArray_TEMP_GEN_0 == null)
            btCollisionObjectArray_TEMP_GEN_0 = btCollisionObjectArray.native_new();
        btCollisionObjectArray_TEMP_GEN_0.internal_reset(pointer, false);
        return btCollisionObjectArray_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
btCollisionWorld* nativeObject = (btCollisionWorld*)this_addr;
return (jlong)&nativeObject->getCollisionObjectArray();
*/
    public static native long internal_native_getCollisionObjectArray(long this_addr);

    public void removeCollisionObject(btCollisionObject collisionObject) {
        internal_native_removeCollisionObject(native_address, collisionObject.native_address);
    }

    /*[-JNI;-NATIVE]
btCollisionWorld* nativeObject = (btCollisionWorld*)this_addr;
nativeObject->removeCollisionObject((btCollisionObject* )collisionObject_addr);
*/
    public static native void internal_native_removeCollisionObject(long this_addr, long collisionObject_addr);

    public void performDiscreteCollisionDetection() {
        internal_native_performDiscreteCollisionDetection(native_address);
    }

    /*[-JNI;-NATIVE]
btCollisionWorld* nativeObject = (btCollisionWorld*)this_addr;
nativeObject->performDiscreteCollisionDetection();
*/
    public static native void internal_native_performDiscreteCollisionDetection(long this_addr);

    public boolean getForceUpdateAllAabbs() {
        return internal_native_getForceUpdateAllAabbs(native_address);
    }

    /*[-JNI;-NATIVE]
btCollisionWorld* nativeObject = (btCollisionWorld*)this_addr;
return nativeObject->getForceUpdateAllAabbs();
*/
    public static native boolean internal_native_getForceUpdateAllAabbs(long this_addr);

    public void setForceUpdateAllAabbs(boolean f) {
        internal_native_setForceUpdateAllAabbs(native_address, f);
    }

    /*[-JNI;-NATIVE]
btCollisionWorld* nativeObject = (btCollisionWorld*)this_addr;
nativeObject->setForceUpdateAllAabbs(f);
*/
    public static native void internal_native_setForceUpdateAllAabbs(long this_addr, boolean f);
}
