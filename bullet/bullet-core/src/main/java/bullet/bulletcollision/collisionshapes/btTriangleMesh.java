/*-------------------------------------------------------
 * This file was generated by JParser
 *
 * Do not make changes to this file
 *-------------------------------------------------------*/
package bullet.bulletcollision.collisionshapes;

import bullet.linearmath.btVector3;

public class btTriangleMesh extends btStridingMeshInterface {

    static public final btTriangleMesh NULL = btTriangleMesh.native_new();

    public btTriangleMesh(boolean use32bitIndices, boolean use4componentVertices) {
        super((byte) 1, (char) 1);
        long addr = internal_native_create_boolean_boolean(use32bitIndices, use4componentVertices);
        internal_reset(addr, true);
    }

    /*[-JNI;-NATIVE]
return (jlong)new btTriangleMesh(use32bitIndices, use4componentVertices);
*/
    public static native long internal_native_create_boolean_boolean(boolean use32bitIndices, boolean use4componentVertices);

    public btTriangleMesh(boolean use32bitIndices) {
        super((byte) 1, (char) 1);
        long addr = internal_native_create_boolean(use32bitIndices);
        internal_reset(addr, true);
    }

    /*[-JNI;-NATIVE]
return (jlong)new btTriangleMesh(use32bitIndices);
*/
    public static native long internal_native_create_boolean(boolean use32bitIndices);

    public btTriangleMesh() {
        super((byte) 1, (char) 1);
        long addr = internal_native_create();
        internal_reset(addr, true);
    }

    /*[-JNI;-NATIVE]
return (jlong)new btTriangleMesh();
*/
    public static native long internal_native_create();

    /**
     * Dummy constructor, used internally to creates objects without C++ pointer
     */
    @Deprecated()
    protected btTriangleMesh(byte b, char c) {
        super((byte) 1, (char) 1);
    }

    /**
     * @return An empty instance without a native address
     */
    public static btTriangleMesh native_new() {
        return new btTriangleMesh((byte) 0, (char) 0);
    }

    protected void deleteNative() {
        internal_native_deleteNative(native_address);
    }

    /*[-JNI;-NATIVE]
btTriangleMesh* nativeObject = (btTriangleMesh*)this_addr;
delete nativeObject;
*/
    public static native void internal_native_deleteNative(long this_addr);

    public void addTriangle(btVector3 vertex0, btVector3 vertex1, btVector3 vertex2, boolean removeDuplicateVertices) {
        internal_native_addTriangle(native_address, vertex0.native_address, vertex1.native_address, vertex2.native_address, removeDuplicateVertices);
    }

    /*[-JNI;-NATIVE]
btTriangleMesh* nativeObject = (btTriangleMesh*)this_addr;
nativeObject->addTriangle(*((btVector3* )vertex0_addr), *((btVector3* )vertex1_addr), *((btVector3* )vertex2_addr), removeDuplicateVertices);
*/
    public static native void internal_native_addTriangle(long this_addr, long vertex0_addr, long vertex1_addr, long vertex2_addr, boolean removeDuplicateVertices);

    public void addTriangle(btVector3 vertex0, btVector3 vertex1, btVector3 vertex2) {
        internal_native_addTriangle(native_address, vertex0.native_address, vertex1.native_address, vertex2.native_address);
    }

    /*[-JNI;-NATIVE]
btTriangleMesh* nativeObject = (btTriangleMesh*)this_addr;
nativeObject->addTriangle(*((btVector3* )vertex0_addr), *((btVector3* )vertex1_addr), *((btVector3* )vertex2_addr));
*/
    public static native void internal_native_addTriangle(long this_addr, long vertex0_addr, long vertex1_addr, long vertex2_addr);

    public void findOrAddVertex(btVector3 vertex, boolean removeDuplicateVertices) {
        internal_native_findOrAddVertex(native_address, vertex.native_address, removeDuplicateVertices);
    }

    /*[-JNI;-NATIVE]
btTriangleMesh* nativeObject = (btTriangleMesh*)this_addr;
nativeObject->findOrAddVertex(*((btVector3* )vertex_addr), removeDuplicateVertices);
*/
    public static native void internal_native_findOrAddVertex(long this_addr, long vertex_addr, boolean removeDuplicateVertices);

    public void addIndex(int index) {
        internal_native_addIndex(native_address, index);
    }

    /*[-JNI;-NATIVE]
btTriangleMesh* nativeObject = (btTriangleMesh*)this_addr;
nativeObject->addIndex((int)index);
*/
    public static native void internal_native_addIndex(long this_addr, int index);
}
