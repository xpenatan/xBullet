/*-------------------------------------------------------
 * This file was generated by JParser
 *
 * Do not make changes to this file
 *-------------------------------------------------------*/
package bullet.bulletcollision.collisionshapes;

import com.github.xpenatan.jParser.idl.IDLBase;
import bullet.linearmath.btVector3;
import bullet.linearmath.btTransform;

public class btCollisionShape extends IDLBase {

    static public final btCollisionShape NULL = btCollisionShape.native_new();

    /**
     * Dummy constructor, used internally to creates objects without C++ pointer
     */
    @Deprecated()
    protected btCollisionShape(byte b, char c) {
    }

    /**
     * @return An empty instance without a native address
     */
    public static btCollisionShape native_new() {
        return new btCollisionShape((byte) 0, (char) 0);
    }

    protected void deleteNative() {
        internal_native_deleteNative(native_address);
    }

    /*[-JNI;-NATIVE]
btCollisionShape* nativeObject = (btCollisionShape*)this_addr;
delete nativeObject;
*/
    public static native void internal_native_deleteNative(long this_addr);

    public void setLocalScaling(btVector3 scaling) {
        internal_native_setLocalScaling(native_address, scaling.native_address);
    }

    /*[-JNI;-NATIVE]
btCollisionShape* nativeObject = (btCollisionShape*)this_addr;
nativeObject->setLocalScaling(*((btVector3* )scaling_addr));
*/
    public static native void internal_native_setLocalScaling(long this_addr, long scaling_addr);

    public void calculateLocalInertia(float mass, btVector3 inertia) {
        internal_native_calculateLocalInertia(native_address, mass, inertia.native_address);
    }

    /*[-JNI;-NATIVE]
btCollisionShape* nativeObject = (btCollisionShape*)this_addr;
nativeObject->calculateLocalInertia((float)mass, *((btVector3* )inertia_addr));
*/
    public static native void internal_native_calculateLocalInertia(long this_addr, float mass, long inertia_addr);

    public void setMargin(float margin) {
        internal_native_setMargin(native_address, margin);
    }

    /*[-JNI;-NATIVE]
btCollisionShape* nativeObject = (btCollisionShape*)this_addr;
nativeObject->setMargin((float)margin);
*/
    public static native void internal_native_setMargin(long this_addr, float margin);

    public float getMargin() {
        return internal_native_getMargin(native_address);
    }

    /*[-JNI;-NATIVE]
btCollisionShape* nativeObject = (btCollisionShape*)this_addr;
return nativeObject->getMargin();
*/
    public static native float internal_native_getMargin(long this_addr);

    public int getShapeType() {
        return internal_native_getShapeType(native_address);
    }

    /*[-JNI;-NATIVE]
btCollisionShape* nativeObject = (btCollisionShape*)this_addr;
return nativeObject->getShapeType();
*/
    public static native int internal_native_getShapeType(long this_addr);

    public void getAabb(btTransform t, btVector3 aabbMin, btVector3 aabbMax) {
        internal_native_getAabb(native_address, t.native_address, aabbMin.native_address, aabbMax.native_address);
    }

    /*[-JNI;-NATIVE]
btCollisionShape* nativeObject = (btCollisionShape*)this_addr;
nativeObject->getAabb(*((btTransform* )t_addr), *((btVector3* )aabbMin_addr), *((btVector3* )aabbMax_addr));
*/
    public static native void internal_native_getAabb(long this_addr, long t_addr, long aabbMin_addr, long aabbMax_addr);

    public boolean isPolyhedral() {
        return internal_native_isPolyhedral(native_address);
    }

    /*[-JNI;-NATIVE]
btCollisionShape* nativeObject = (btCollisionShape*)this_addr;
return nativeObject->isPolyhedral();
*/
    public static native boolean internal_native_isPolyhedral(long this_addr);

    public boolean isConvex2d() {
        return internal_native_isConvex2d(native_address);
    }

    /*[-JNI;-NATIVE]
btCollisionShape* nativeObject = (btCollisionShape*)this_addr;
return nativeObject->isConvex2d();
*/
    public static native boolean internal_native_isConvex2d(long this_addr);

    public boolean isConvex() {
        return internal_native_isConvex(native_address);
    }

    /*[-JNI;-NATIVE]
btCollisionShape* nativeObject = (btCollisionShape*)this_addr;
return nativeObject->isConvex();
*/
    public static native boolean internal_native_isConvex(long this_addr);

    public boolean isNonMoving() {
        return internal_native_isNonMoving(native_address);
    }

    /*[-JNI;-NATIVE]
btCollisionShape* nativeObject = (btCollisionShape*)this_addr;
return nativeObject->isNonMoving();
*/
    public static native boolean internal_native_isNonMoving(long this_addr);

    public boolean isConcave() {
        return internal_native_isConcave(native_address);
    }

    /*[-JNI;-NATIVE]
btCollisionShape* nativeObject = (btCollisionShape*)this_addr;
return nativeObject->isConcave();
*/
    public static native boolean internal_native_isConcave(long this_addr);

    public boolean isCompound() {
        return internal_native_isCompound(native_address);
    }

    /*[-JNI;-NATIVE]
btCollisionShape* nativeObject = (btCollisionShape*)this_addr;
return nativeObject->isCompound();
*/
    public static native boolean internal_native_isCompound(long this_addr);

    public boolean isSoftBody() {
        return internal_native_isSoftBody(native_address);
    }

    /*[-JNI;-NATIVE]
btCollisionShape* nativeObject = (btCollisionShape*)this_addr;
return nativeObject->isSoftBody();
*/
    public static native boolean internal_native_isSoftBody(long this_addr);

    public boolean isInfinite() {
        return internal_native_isInfinite(native_address);
    }

    /*[-JNI;-NATIVE]
btCollisionShape* nativeObject = (btCollisionShape*)this_addr;
return nativeObject->isInfinite();
*/
    public static native boolean internal_native_isInfinite(long this_addr);
}
