/*-------------------------------------------------------
 * This file was generated by JParser
 *
 * Do not make changes to this file
 *-------------------------------------------------------*/
package bullet;

import com.github.xpenatan.jParser.idl.IDLBase;
import bullet.linearmath.btVector3;

public class RaycastInfo extends IDLBase {

    private btVector3 btVector3_TEMP_GEN_0;

    private btVector3 btVector3_TEMP_GEN_1;

    private btVector3 btVector3_TEMP_GEN_2;

    private btVector3 btVector3_TEMP_GEN_3;

    private btVector3 btVector3_TEMP_GEN_4;

    private IDLBase IDLBase_TEMP_GEN_0;

    static public final RaycastInfo NULL = RaycastInfo.native_new();

    public RaycastInfo() {
        long addr = internal_native_create();
        internal_reset(addr, true);
    }

    /*[-JNI;-NATIVE]
return (jlong)new btWheelInfo::RaycastInfo();
*/
    public static native long internal_native_create();

    /**
     * Dummy constructor, used internally to creates objects without C++ pointer
     */
    @Deprecated()
    protected RaycastInfo(byte b, char c) {
    }

    /**
     * @return An empty instance without a native address
     */
    public static RaycastInfo native_new() {
        return new RaycastInfo((byte) 0, (char) 0);
    }

    protected void deleteNative() {
        internal_native_deleteNative(native_address);
    }

    /*[-JNI;-NATIVE]
btWheelInfo::RaycastInfo* nativeObject = (btWheelInfo::RaycastInfo*)this_addr;
delete nativeObject;
*/
    public static native void internal_native_deleteNative(long this_addr);

    public btVector3 get_m_contactNormalWS() {
        long pointer = internal_native_get_m_contactNormalWS(native_address);
        if (pointer == 0)
            return btVector3.NULL;
        if (btVector3_TEMP_GEN_0 == null)
            btVector3_TEMP_GEN_0 = btVector3.native_new();
        btVector3_TEMP_GEN_0.internal_reset(pointer, false);
        return btVector3_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
btWheelInfo::RaycastInfo* nativeObject = (btWheelInfo::RaycastInfo*)this_addr;
return (jlong)&nativeObject->m_contactNormalWS;
*/
    public static native long internal_native_get_m_contactNormalWS(long this_addr);

    public void set_m_contactNormalWS(btVector3 m_contactNormalWS) {
        internal_native_set_m_contactNormalWS(native_address, m_contactNormalWS.native_address);
    }

    /*[-JNI;-NATIVE]
btWheelInfo::RaycastInfo* nativeObject = (btWheelInfo::RaycastInfo*)this_addr;
nativeObject->m_contactNormalWS = *((btVector3*)m_contactNormalWS_addr);
*/
    public static native void internal_native_set_m_contactNormalWS(long this_addr, long m_contactNormalWS_addr);

    public btVector3 get_m_contactPointWS() {
        long pointer = internal_native_get_m_contactPointWS(native_address);
        if (pointer == 0)
            return btVector3.NULL;
        if (btVector3_TEMP_GEN_1 == null)
            btVector3_TEMP_GEN_1 = btVector3.native_new();
        btVector3_TEMP_GEN_1.internal_reset(pointer, false);
        return btVector3_TEMP_GEN_1;
    }

    /*[-JNI;-NATIVE]
btWheelInfo::RaycastInfo* nativeObject = (btWheelInfo::RaycastInfo*)this_addr;
return (jlong)&nativeObject->m_contactPointWS;
*/
    public static native long internal_native_get_m_contactPointWS(long this_addr);

    public void set_m_contactPointWS(btVector3 m_contactPointWS) {
        internal_native_set_m_contactPointWS(native_address, m_contactPointWS.native_address);
    }

    /*[-JNI;-NATIVE]
btWheelInfo::RaycastInfo* nativeObject = (btWheelInfo::RaycastInfo*)this_addr;
nativeObject->m_contactPointWS = *((btVector3*)m_contactPointWS_addr);
*/
    public static native void internal_native_set_m_contactPointWS(long this_addr, long m_contactPointWS_addr);

    public float get_m_suspensionLength() {
        return internal_native_get_m_suspensionLength(native_address);
    }

    /*[-JNI;-NATIVE]
btWheelInfo::RaycastInfo* nativeObject = (btWheelInfo::RaycastInfo*)this_addr;
return nativeObject->m_suspensionLength;
*/
    public static native float internal_native_get_m_suspensionLength(long this_addr);

    public void set_m_suspensionLength(float m_suspensionLength) {
        internal_native_set_m_suspensionLength(native_address, m_suspensionLength);
    }

    /*[-JNI;-NATIVE]
btWheelInfo::RaycastInfo* nativeObject = (btWheelInfo::RaycastInfo*)this_addr;
nativeObject->m_suspensionLength = m_suspensionLength;
*/
    public static native void internal_native_set_m_suspensionLength(long this_addr, float m_suspensionLength);

    public btVector3 get_m_hardPointWS() {
        long pointer = internal_native_get_m_hardPointWS(native_address);
        if (pointer == 0)
            return btVector3.NULL;
        if (btVector3_TEMP_GEN_2 == null)
            btVector3_TEMP_GEN_2 = btVector3.native_new();
        btVector3_TEMP_GEN_2.internal_reset(pointer, false);
        return btVector3_TEMP_GEN_2;
    }

    /*[-JNI;-NATIVE]
btWheelInfo::RaycastInfo* nativeObject = (btWheelInfo::RaycastInfo*)this_addr;
return (jlong)&nativeObject->m_hardPointWS;
*/
    public static native long internal_native_get_m_hardPointWS(long this_addr);

    public void set_m_hardPointWS(btVector3 m_hardPointWS) {
        internal_native_set_m_hardPointWS(native_address, m_hardPointWS.native_address);
    }

    /*[-JNI;-NATIVE]
btWheelInfo::RaycastInfo* nativeObject = (btWheelInfo::RaycastInfo*)this_addr;
nativeObject->m_hardPointWS = *((btVector3*)m_hardPointWS_addr);
*/
    public static native void internal_native_set_m_hardPointWS(long this_addr, long m_hardPointWS_addr);

    public btVector3 get_m_wheelDirectionWS() {
        long pointer = internal_native_get_m_wheelDirectionWS(native_address);
        if (pointer == 0)
            return btVector3.NULL;
        if (btVector3_TEMP_GEN_3 == null)
            btVector3_TEMP_GEN_3 = btVector3.native_new();
        btVector3_TEMP_GEN_3.internal_reset(pointer, false);
        return btVector3_TEMP_GEN_3;
    }

    /*[-JNI;-NATIVE]
btWheelInfo::RaycastInfo* nativeObject = (btWheelInfo::RaycastInfo*)this_addr;
return (jlong)&nativeObject->m_wheelDirectionWS;
*/
    public static native long internal_native_get_m_wheelDirectionWS(long this_addr);

    public void set_m_wheelDirectionWS(btVector3 m_wheelDirectionWS) {
        internal_native_set_m_wheelDirectionWS(native_address, m_wheelDirectionWS.native_address);
    }

    /*[-JNI;-NATIVE]
btWheelInfo::RaycastInfo* nativeObject = (btWheelInfo::RaycastInfo*)this_addr;
nativeObject->m_wheelDirectionWS = *((btVector3*)m_wheelDirectionWS_addr);
*/
    public static native void internal_native_set_m_wheelDirectionWS(long this_addr, long m_wheelDirectionWS_addr);

    public btVector3 get_m_wheelAxleWS() {
        long pointer = internal_native_get_m_wheelAxleWS(native_address);
        if (pointer == 0)
            return btVector3.NULL;
        if (btVector3_TEMP_GEN_4 == null)
            btVector3_TEMP_GEN_4 = btVector3.native_new();
        btVector3_TEMP_GEN_4.internal_reset(pointer, false);
        return btVector3_TEMP_GEN_4;
    }

    /*[-JNI;-NATIVE]
btWheelInfo::RaycastInfo* nativeObject = (btWheelInfo::RaycastInfo*)this_addr;
return (jlong)&nativeObject->m_wheelAxleWS;
*/
    public static native long internal_native_get_m_wheelAxleWS(long this_addr);

    public void set_m_wheelAxleWS(btVector3 m_wheelAxleWS) {
        internal_native_set_m_wheelAxleWS(native_address, m_wheelAxleWS.native_address);
    }

    /*[-JNI;-NATIVE]
btWheelInfo::RaycastInfo* nativeObject = (btWheelInfo::RaycastInfo*)this_addr;
nativeObject->m_wheelAxleWS = *((btVector3*)m_wheelAxleWS_addr);
*/
    public static native void internal_native_set_m_wheelAxleWS(long this_addr, long m_wheelAxleWS_addr);

    public boolean get_m_isInContact() {
        return internal_native_get_m_isInContact(native_address);
    }

    /*[-JNI;-NATIVE]
btWheelInfo::RaycastInfo* nativeObject = (btWheelInfo::RaycastInfo*)this_addr;
return nativeObject->m_isInContact;
*/
    public static native boolean internal_native_get_m_isInContact(long this_addr);

    public void set_m_isInContact(boolean m_isInContact) {
        internal_native_set_m_isInContact(native_address, m_isInContact);
    }

    /*[-JNI;-NATIVE]
btWheelInfo::RaycastInfo* nativeObject = (btWheelInfo::RaycastInfo*)this_addr;
nativeObject->m_isInContact = m_isInContact;
*/
    public static native void internal_native_set_m_isInContact(long this_addr, boolean m_isInContact);

    public IDLBase get_m_groundObject() {
        long pointer = internal_native_get_m_groundObject(native_address);
        if (pointer == 0)
            return IDLBase.NULL;
        if (IDLBase_TEMP_GEN_0 == null)
            IDLBase_TEMP_GEN_0 = IDLBase.native_new();
        IDLBase_TEMP_GEN_0.internal_reset(pointer, false);
        return IDLBase_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
btWheelInfo::RaycastInfo* nativeObject = (btWheelInfo::RaycastInfo*)this_addr;
return (jlong)nativeObject->m_groundObject;
*/
    public static native long internal_native_get_m_groundObject(long this_addr);

    public void set_m_groundObject(IDLBase m_groundObject) {
        internal_native_set_m_groundObject(native_address, m_groundObject.native_void_address);
    }

    /*[-JNI;-NATIVE]
btWheelInfo::RaycastInfo* nativeObject = (btWheelInfo::RaycastInfo*)this_addr;
nativeObject->m_groundObject = (void**)m_groundObject_addr;
*/
    public static native void internal_native_set_m_groundObject(long this_addr, long m_groundObject_addr);
}
