/*-------------------------------------------------------
 * This file was generated by JParser
 *
 * Do not make changes to this file
 *-------------------------------------------------------*/
package bullet;

import com.github.xpenatan.jParser.idl.IDLBase;

public class btRotationalLimitMotor2 extends IDLBase {

    static public final btRotationalLimitMotor2 NULL = btRotationalLimitMotor2.native_new();

    /**
     * Dummy constructor, used internally to creates objects without C++ pointer
     */
    @Deprecated()
    protected btRotationalLimitMotor2(byte b, char c) {
    }

    /**
     * @return An empty instance without a native address
     */
    public static btRotationalLimitMotor2 native_new() {
        return new btRotationalLimitMotor2((byte) 0, (char) 0);
    }

    protected void deleteNative() {
        internal_native_deleteNative(native_address);
    }

    /*[-JNI;-NATIVE]
btRotationalLimitMotor2* nativeObject = (btRotationalLimitMotor2*)this_addr;
delete nativeObject;
*/
    public static native void internal_native_deleteNative(long this_addr);

    public boolean isLimited() {
        return internal_native_isLimited(native_address);
    }

    /*[-JNI;-NATIVE]
btRotationalLimitMotor2* nativeObject = (btRotationalLimitMotor2*)this_addr;
return nativeObject->isLimited();
*/
    public static native boolean internal_native_isLimited(long this_addr);

    public void testLimitValue(float test_value) {
        internal_native_testLimitValue(native_address, test_value);
    }

    /*[-JNI;-NATIVE]
btRotationalLimitMotor2* nativeObject = (btRotationalLimitMotor2*)this_addr;
nativeObject->testLimitValue((float)test_value);
*/
    public static native void internal_native_testLimitValue(long this_addr, float test_value);

    public float get_m_loLimit() {
        return internal_native_get_m_loLimit(native_address);
    }

    /*[-JNI;-NATIVE]
btRotationalLimitMotor2* nativeObject = (btRotationalLimitMotor2*)this_addr;
return nativeObject->m_loLimit;
*/
    public static native float internal_native_get_m_loLimit(long this_addr);

    public void set_m_loLimit(float m_loLimit) {
        internal_native_set_m_loLimit(native_address, m_loLimit);
    }

    /*[-JNI;-NATIVE]
btRotationalLimitMotor2* nativeObject = (btRotationalLimitMotor2*)this_addr;
nativeObject->m_loLimit = m_loLimit;
*/
    public static native void internal_native_set_m_loLimit(long this_addr, float m_loLimit);

    public float get_m_hiLimit() {
        return internal_native_get_m_hiLimit(native_address);
    }

    /*[-JNI;-NATIVE]
btRotationalLimitMotor2* nativeObject = (btRotationalLimitMotor2*)this_addr;
return nativeObject->m_hiLimit;
*/
    public static native float internal_native_get_m_hiLimit(long this_addr);

    public void set_m_hiLimit(float m_hiLimit) {
        internal_native_set_m_hiLimit(native_address, m_hiLimit);
    }

    /*[-JNI;-NATIVE]
btRotationalLimitMotor2* nativeObject = (btRotationalLimitMotor2*)this_addr;
nativeObject->m_hiLimit = m_hiLimit;
*/
    public static native void internal_native_set_m_hiLimit(long this_addr, float m_hiLimit);

    public float get_m_bounce() {
        return internal_native_get_m_bounce(native_address);
    }

    /*[-JNI;-NATIVE]
btRotationalLimitMotor2* nativeObject = (btRotationalLimitMotor2*)this_addr;
return nativeObject->m_bounce;
*/
    public static native float internal_native_get_m_bounce(long this_addr);

    public void set_m_bounce(float m_bounce) {
        internal_native_set_m_bounce(native_address, m_bounce);
    }

    /*[-JNI;-NATIVE]
btRotationalLimitMotor2* nativeObject = (btRotationalLimitMotor2*)this_addr;
nativeObject->m_bounce = m_bounce;
*/
    public static native void internal_native_set_m_bounce(long this_addr, float m_bounce);

    public float get_m_stopERP() {
        return internal_native_get_m_stopERP(native_address);
    }

    /*[-JNI;-NATIVE]
btRotationalLimitMotor2* nativeObject = (btRotationalLimitMotor2*)this_addr;
return nativeObject->m_stopERP;
*/
    public static native float internal_native_get_m_stopERP(long this_addr);

    public void set_m_stopERP(float m_stopERP) {
        internal_native_set_m_stopERP(native_address, m_stopERP);
    }

    /*[-JNI;-NATIVE]
btRotationalLimitMotor2* nativeObject = (btRotationalLimitMotor2*)this_addr;
nativeObject->m_stopERP = m_stopERP;
*/
    public static native void internal_native_set_m_stopERP(long this_addr, float m_stopERP);

    public float get_m_stopCFM() {
        return internal_native_get_m_stopCFM(native_address);
    }

    /*[-JNI;-NATIVE]
btRotationalLimitMotor2* nativeObject = (btRotationalLimitMotor2*)this_addr;
return nativeObject->m_stopCFM;
*/
    public static native float internal_native_get_m_stopCFM(long this_addr);

    public void set_m_stopCFM(float m_stopCFM) {
        internal_native_set_m_stopCFM(native_address, m_stopCFM);
    }

    /*[-JNI;-NATIVE]
btRotationalLimitMotor2* nativeObject = (btRotationalLimitMotor2*)this_addr;
nativeObject->m_stopCFM = m_stopCFM;
*/
    public static native void internal_native_set_m_stopCFM(long this_addr, float m_stopCFM);

    public float get_m_motorERP() {
        return internal_native_get_m_motorERP(native_address);
    }

    /*[-JNI;-NATIVE]
btRotationalLimitMotor2* nativeObject = (btRotationalLimitMotor2*)this_addr;
return nativeObject->m_motorERP;
*/
    public static native float internal_native_get_m_motorERP(long this_addr);

    public void set_m_motorERP(float m_motorERP) {
        internal_native_set_m_motorERP(native_address, m_motorERP);
    }

    /*[-JNI;-NATIVE]
btRotationalLimitMotor2* nativeObject = (btRotationalLimitMotor2*)this_addr;
nativeObject->m_motorERP = m_motorERP;
*/
    public static native void internal_native_set_m_motorERP(long this_addr, float m_motorERP);

    public float get_m_motorCFM() {
        return internal_native_get_m_motorCFM(native_address);
    }

    /*[-JNI;-NATIVE]
btRotationalLimitMotor2* nativeObject = (btRotationalLimitMotor2*)this_addr;
return nativeObject->m_motorCFM;
*/
    public static native float internal_native_get_m_motorCFM(long this_addr);

    public void set_m_motorCFM(float m_motorCFM) {
        internal_native_set_m_motorCFM(native_address, m_motorCFM);
    }

    /*[-JNI;-NATIVE]
btRotationalLimitMotor2* nativeObject = (btRotationalLimitMotor2*)this_addr;
nativeObject->m_motorCFM = m_motorCFM;
*/
    public static native void internal_native_set_m_motorCFM(long this_addr, float m_motorCFM);

    public boolean get_m_enableMotor() {
        return internal_native_get_m_enableMotor(native_address);
    }

    /*[-JNI;-NATIVE]
btRotationalLimitMotor2* nativeObject = (btRotationalLimitMotor2*)this_addr;
return nativeObject->m_enableMotor;
*/
    public static native boolean internal_native_get_m_enableMotor(long this_addr);

    public void set_m_enableMotor(boolean m_enableMotor) {
        internal_native_set_m_enableMotor(native_address, m_enableMotor);
    }

    /*[-JNI;-NATIVE]
btRotationalLimitMotor2* nativeObject = (btRotationalLimitMotor2*)this_addr;
nativeObject->m_enableMotor = m_enableMotor;
*/
    public static native void internal_native_set_m_enableMotor(long this_addr, boolean m_enableMotor);

    public float get_m_targetVelocity() {
        return internal_native_get_m_targetVelocity(native_address);
    }

    /*[-JNI;-NATIVE]
btRotationalLimitMotor2* nativeObject = (btRotationalLimitMotor2*)this_addr;
return nativeObject->m_targetVelocity;
*/
    public static native float internal_native_get_m_targetVelocity(long this_addr);

    public void set_m_targetVelocity(float m_targetVelocity) {
        internal_native_set_m_targetVelocity(native_address, m_targetVelocity);
    }

    /*[-JNI;-NATIVE]
btRotationalLimitMotor2* nativeObject = (btRotationalLimitMotor2*)this_addr;
nativeObject->m_targetVelocity = m_targetVelocity;
*/
    public static native void internal_native_set_m_targetVelocity(long this_addr, float m_targetVelocity);

    public float get_m_maxMotorForce() {
        return internal_native_get_m_maxMotorForce(native_address);
    }

    /*[-JNI;-NATIVE]
btRotationalLimitMotor2* nativeObject = (btRotationalLimitMotor2*)this_addr;
return nativeObject->m_maxMotorForce;
*/
    public static native float internal_native_get_m_maxMotorForce(long this_addr);

    public void set_m_maxMotorForce(float m_maxMotorForce) {
        internal_native_set_m_maxMotorForce(native_address, m_maxMotorForce);
    }

    /*[-JNI;-NATIVE]
btRotationalLimitMotor2* nativeObject = (btRotationalLimitMotor2*)this_addr;
nativeObject->m_maxMotorForce = m_maxMotorForce;
*/
    public static native void internal_native_set_m_maxMotorForce(long this_addr, float m_maxMotorForce);

    public boolean get_m_servoMotor() {
        return internal_native_get_m_servoMotor(native_address);
    }

    /*[-JNI;-NATIVE]
btRotationalLimitMotor2* nativeObject = (btRotationalLimitMotor2*)this_addr;
return nativeObject->m_servoMotor;
*/
    public static native boolean internal_native_get_m_servoMotor(long this_addr);

    public void set_m_servoMotor(boolean m_servoMotor) {
        internal_native_set_m_servoMotor(native_address, m_servoMotor);
    }

    /*[-JNI;-NATIVE]
btRotationalLimitMotor2* nativeObject = (btRotationalLimitMotor2*)this_addr;
nativeObject->m_servoMotor = m_servoMotor;
*/
    public static native void internal_native_set_m_servoMotor(long this_addr, boolean m_servoMotor);

    public float get_m_servoTarget() {
        return internal_native_get_m_servoTarget(native_address);
    }

    /*[-JNI;-NATIVE]
btRotationalLimitMotor2* nativeObject = (btRotationalLimitMotor2*)this_addr;
return nativeObject->m_servoTarget;
*/
    public static native float internal_native_get_m_servoTarget(long this_addr);

    public void set_m_servoTarget(float m_servoTarget) {
        internal_native_set_m_servoTarget(native_address, m_servoTarget);
    }

    /*[-JNI;-NATIVE]
btRotationalLimitMotor2* nativeObject = (btRotationalLimitMotor2*)this_addr;
nativeObject->m_servoTarget = m_servoTarget;
*/
    public static native void internal_native_set_m_servoTarget(long this_addr, float m_servoTarget);

    public boolean get_m_enableSpring() {
        return internal_native_get_m_enableSpring(native_address);
    }

    /*[-JNI;-NATIVE]
btRotationalLimitMotor2* nativeObject = (btRotationalLimitMotor2*)this_addr;
return nativeObject->m_enableSpring;
*/
    public static native boolean internal_native_get_m_enableSpring(long this_addr);

    public void set_m_enableSpring(boolean m_enableSpring) {
        internal_native_set_m_enableSpring(native_address, m_enableSpring);
    }

    /*[-JNI;-NATIVE]
btRotationalLimitMotor2* nativeObject = (btRotationalLimitMotor2*)this_addr;
nativeObject->m_enableSpring = m_enableSpring;
*/
    public static native void internal_native_set_m_enableSpring(long this_addr, boolean m_enableSpring);

    public float get_m_springStiffness() {
        return internal_native_get_m_springStiffness(native_address);
    }

    /*[-JNI;-NATIVE]
btRotationalLimitMotor2* nativeObject = (btRotationalLimitMotor2*)this_addr;
return nativeObject->m_springStiffness;
*/
    public static native float internal_native_get_m_springStiffness(long this_addr);

    public void set_m_springStiffness(float m_springStiffness) {
        internal_native_set_m_springStiffness(native_address, m_springStiffness);
    }

    /*[-JNI;-NATIVE]
btRotationalLimitMotor2* nativeObject = (btRotationalLimitMotor2*)this_addr;
nativeObject->m_springStiffness = m_springStiffness;
*/
    public static native void internal_native_set_m_springStiffness(long this_addr, float m_springStiffness);

    public boolean get_m_springStiffnessLimited() {
        return internal_native_get_m_springStiffnessLimited(native_address);
    }

    /*[-JNI;-NATIVE]
btRotationalLimitMotor2* nativeObject = (btRotationalLimitMotor2*)this_addr;
return nativeObject->m_springStiffnessLimited;
*/
    public static native boolean internal_native_get_m_springStiffnessLimited(long this_addr);

    public void set_m_springStiffnessLimited(boolean m_springStiffnessLimited) {
        internal_native_set_m_springStiffnessLimited(native_address, m_springStiffnessLimited);
    }

    /*[-JNI;-NATIVE]
btRotationalLimitMotor2* nativeObject = (btRotationalLimitMotor2*)this_addr;
nativeObject->m_springStiffnessLimited = m_springStiffnessLimited;
*/
    public static native void internal_native_set_m_springStiffnessLimited(long this_addr, boolean m_springStiffnessLimited);

    public float get_m_springDamping() {
        return internal_native_get_m_springDamping(native_address);
    }

    /*[-JNI;-NATIVE]
btRotationalLimitMotor2* nativeObject = (btRotationalLimitMotor2*)this_addr;
return nativeObject->m_springDamping;
*/
    public static native float internal_native_get_m_springDamping(long this_addr);

    public void set_m_springDamping(float m_springDamping) {
        internal_native_set_m_springDamping(native_address, m_springDamping);
    }

    /*[-JNI;-NATIVE]
btRotationalLimitMotor2* nativeObject = (btRotationalLimitMotor2*)this_addr;
nativeObject->m_springDamping = m_springDamping;
*/
    public static native void internal_native_set_m_springDamping(long this_addr, float m_springDamping);

    public boolean get_m_springDampingLimited() {
        return internal_native_get_m_springDampingLimited(native_address);
    }

    /*[-JNI;-NATIVE]
btRotationalLimitMotor2* nativeObject = (btRotationalLimitMotor2*)this_addr;
return nativeObject->m_springDampingLimited;
*/
    public static native boolean internal_native_get_m_springDampingLimited(long this_addr);

    public void set_m_springDampingLimited(boolean m_springDampingLimited) {
        internal_native_set_m_springDampingLimited(native_address, m_springDampingLimited);
    }

    /*[-JNI;-NATIVE]
btRotationalLimitMotor2* nativeObject = (btRotationalLimitMotor2*)this_addr;
nativeObject->m_springDampingLimited = m_springDampingLimited;
*/
    public static native void internal_native_set_m_springDampingLimited(long this_addr, boolean m_springDampingLimited);

    public float get_m_equilibriumPoint() {
        return internal_native_get_m_equilibriumPoint(native_address);
    }

    /*[-JNI;-NATIVE]
btRotationalLimitMotor2* nativeObject = (btRotationalLimitMotor2*)this_addr;
return nativeObject->m_equilibriumPoint;
*/
    public static native float internal_native_get_m_equilibriumPoint(long this_addr);

    public void set_m_equilibriumPoint(float m_equilibriumPoint) {
        internal_native_set_m_equilibriumPoint(native_address, m_equilibriumPoint);
    }

    /*[-JNI;-NATIVE]
btRotationalLimitMotor2* nativeObject = (btRotationalLimitMotor2*)this_addr;
nativeObject->m_equilibriumPoint = m_equilibriumPoint;
*/
    public static native void internal_native_set_m_equilibriumPoint(long this_addr, float m_equilibriumPoint);
}
