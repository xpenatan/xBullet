/*-------------------------------------------------------
 * This file was generated by JParser
 *
 * Do not make changes to this file
 *-------------------------------------------------------*/
package gen.bullet;

import java.util.Map;
import java.util.HashMap;
import com.github.xpenatan.jParser.idl.IDLEnum;

public enum AnisotropicFrictionFlags implements IDLEnum<AnisotropicFrictionFlags> {

    CUSTOM(0), CF_ANISOTROPIC_FRICTION_DISABLED(CF_ANISOTROPIC_FRICTION_DISABLED_NATIVE()), CF_ANISOTROPIC_FRICTION(CF_ANISOTROPIC_FRICTION_NATIVE()), CF_ANISOTROPIC_ROLLING_FRICTION(CF_ANISOTROPIC_ROLLING_FRICTION_NATIVE());

    private int value;

    private AnisotropicFrictionFlags(int value) {
        this.value = value;
    }

    public int getValue() {
        return value;
    }

    public AnisotropicFrictionFlags setValue(int value) {
        if (this != CUSTOM) {
            throw new RuntimeException("Cannot change none CUSTOM value");
        }
        this.value = value;
        return this;
    }

    public AnisotropicFrictionFlags getCustom() {
        return CUSTOM;
    }

    public static final Map<Integer, AnisotropicFrictionFlags> MAP = new HashMap<>();

    static {
        for (AnisotropicFrictionFlags value : values()) {
            if (value != CUSTOM) {
                MAP.put(value.value, value);
            }
        }
    }

    /*[-TEAVM;-NATIVE]
return bullet.CF_ANISOTROPIC_FRICTION_DISABLED;
*/
    @org.teavm.jso.JSBody(script = "return bullet.CF_ANISOTROPIC_FRICTION_DISABLED;")
    private static native int CF_ANISOTROPIC_FRICTION_DISABLED_NATIVE();

    /*[-TEAVM;-NATIVE]
return bullet.CF_ANISOTROPIC_FRICTION;
*/
    @org.teavm.jso.JSBody(script = "return bullet.CF_ANISOTROPIC_FRICTION;")
    private static native int CF_ANISOTROPIC_FRICTION_NATIVE();

    /*[-TEAVM;-NATIVE]
return bullet.CF_ANISOTROPIC_ROLLING_FRICTION;
*/
    @org.teavm.jso.JSBody(script = "return bullet.CF_ANISOTROPIC_ROLLING_FRICTION;")
    private static native int CF_ANISOTROPIC_ROLLING_FRICTION_NATIVE();
}
