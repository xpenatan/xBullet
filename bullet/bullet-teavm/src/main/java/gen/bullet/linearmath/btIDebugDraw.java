/*-------------------------------------------------------
 * This file was generated by JParser
 *
 * Do not make changes to this file
 *-------------------------------------------------------*/
package gen.bullet.linearmath;

import gen.com.github.xpenatan.jParser.idl.IDLBase;
import gen.bullet.idl.helper.IDLUtils;

public class btIDebugDraw extends IDLBase {

    static private btVector3 btVector3_TEMP_STATIC_GEN_0;

    static private btVector3 btVector3_TEMP_STATIC_GEN_1;

    static private btVector3 btVector3_TEMP_STATIC_GEN_2;

    static private btVector3 btVector3_TEMP_STATIC_GEN_3;

    static private btVector3 btVector3_TEMP_STATIC_GEN_4;

    static private btVector3 btVector3_TEMP_STATIC_GEN_5;

    static private btVector3 btVector3_TEMP_STATIC_GEN_6;

    static public final btIDebugDraw NULL = btIDebugDraw.native_new();

    /**
     * Dummy constructor, used internally to creates objects without C++ pointer
     */
    @Deprecated()
    protected btIDebugDraw(byte b, char c) {
    }

    /**
     * @return An empty instance without a native address
     */
    public static btIDebugDraw native_new() {
        return new btIDebugDraw((byte) 0, (char) 0);
    }

    protected void deleteNative() {
        internal_native_deleteNative(native_address);
    }

    /*[-TEAVM;-NATIVE]
var jsObj = bullet.wrapPointer(this_addr, bullet.DebugDrawImpl);
bullet.destroy(jsObj);
*/
    @org.teavm.jso.JSBody(params = {"this_addr"}, script = "var jsObj = bullet.wrapPointer(this_addr, bullet.DebugDrawImpl);bullet.destroy(jsObj);")
    public static native void internal_native_deleteNative(int this_addr);

    public btIDebugDraw() {
        int addr = internal_native_create();
        internal_reset(addr, true);
        setupCallback();
    }

    private void setupCallback() {
        drawLine drawLine = new drawLine() {

            public void drawLine(int vecFrom_addr, int vecTo_addr, int color_addr) {
                internal_drawLine(vecFrom_addr, vecTo_addr, color_addr);
            }
        };
        drawContactPoint drawContactPoint = new drawContactPoint() {

            public void drawContactPoint(int PointOnB_addr, int normalOnB_addr, float distance, int lifeTime, int color_addr) {
                internal_drawContactPoint(PointOnB_addr, normalOnB_addr, distance, lifeTime, color_addr);
            }
        };
        reportErrorWarning reportErrorWarning = new reportErrorWarning() {

            public void reportErrorWarning(int warningString_addr) {
                internal_reportErrorWarning(IDLUtils.getJSString(warningString_addr));
            }
        };
        draw3dText draw3dText = new draw3dText() {

            public void draw3dText(int location_addr, int textString_addr) {
                internal_draw3dText(location_addr, IDLUtils.getJSString(textString_addr));
            }
        };
        setDebugMode setDebugMode = new setDebugMode() {

            public void setDebugMode(int debugMode) {
                internal_setDebugMode(debugMode);
            }
        };
        getDebugMode getDebugMode = new getDebugMode() {

            public int getDebugMode() {
                return internal_getDebugMode();
            }
        };
        internal_native_setupCallback(native_address, drawLine, drawContactPoint, reportErrorWarning, draw3dText, setDebugMode, getDebugMode);
    }

    protected void drawLine(btVector3 vecFrom, btVector3 vecTo, btVector3 color) {
    }

    private void internal_drawLine(int vecFrom_addr, int vecTo_addr, int color_addr) {
        if (btVector3_TEMP_STATIC_GEN_0 == null)
            btVector3_TEMP_STATIC_GEN_0 = btVector3.native_new();
        btVector3_TEMP_STATIC_GEN_0.internal_reset(vecFrom_addr, false);
        if (btVector3_TEMP_STATIC_GEN_1 == null)
            btVector3_TEMP_STATIC_GEN_1 = btVector3.native_new();
        btVector3_TEMP_STATIC_GEN_1.internal_reset(vecTo_addr, false);
        if (btVector3_TEMP_STATIC_GEN_2 == null)
            btVector3_TEMP_STATIC_GEN_2 = btVector3.native_new();
        btVector3_TEMP_STATIC_GEN_2.internal_reset(color_addr, false);
        drawLine(btVector3_TEMP_STATIC_GEN_0, btVector3_TEMP_STATIC_GEN_1, btVector3_TEMP_STATIC_GEN_2);
    }

    protected void drawContactPoint(btVector3 PointOnB, btVector3 normalOnB, float distance, int lifeTime, btVector3 color) {
    }

    private void internal_drawContactPoint(int PointOnB_addr, int normalOnB_addr, float distance, int lifeTime, int color_addr) {
        if (btVector3_TEMP_STATIC_GEN_3 == null)
            btVector3_TEMP_STATIC_GEN_3 = btVector3.native_new();
        btVector3_TEMP_STATIC_GEN_3.internal_reset(PointOnB_addr, false);
        if (btVector3_TEMP_STATIC_GEN_4 == null)
            btVector3_TEMP_STATIC_GEN_4 = btVector3.native_new();
        btVector3_TEMP_STATIC_GEN_4.internal_reset(normalOnB_addr, false);
        if (btVector3_TEMP_STATIC_GEN_5 == null)
            btVector3_TEMP_STATIC_GEN_5 = btVector3.native_new();
        btVector3_TEMP_STATIC_GEN_5.internal_reset(color_addr, false);
        drawContactPoint(btVector3_TEMP_STATIC_GEN_3, btVector3_TEMP_STATIC_GEN_4, distance, lifeTime, btVector3_TEMP_STATIC_GEN_5);
    }

    protected void reportErrorWarning(String warningString) {
    }

    private void internal_reportErrorWarning(String warningString_addr) {
        reportErrorWarning(warningString_addr);
    }

    protected void draw3dText(btVector3 location, String textString) {
    }

    private void internal_draw3dText(int location_addr, String textString_addr) {
        if (btVector3_TEMP_STATIC_GEN_6 == null)
            btVector3_TEMP_STATIC_GEN_6 = btVector3.native_new();
        btVector3_TEMP_STATIC_GEN_6.internal_reset(location_addr, false);
        draw3dText(btVector3_TEMP_STATIC_GEN_6, textString_addr);
    }

    protected void setDebugMode(int debugMode) {
    }

    private void internal_setDebugMode(int debugMode) {
        setDebugMode(debugMode);
    }

    protected int getDebugMode() {
        return 0;
    }

    private int internal_getDebugMode() {
        return getDebugMode();
    }

    /*[-TEAVM;-NATIVE]
var jsObj = new bullet.DebugDrawImpl();
return bullet.getPointer(jsObj);
*/
    @org.teavm.jso.JSBody(script = "var jsObj = new bullet.DebugDrawImpl();return bullet.getPointer(jsObj);")
    public static native int internal_native_create();

    @org.teavm.jso.JSBody(params = { "this_addr", "drawLine", "drawContactPoint", "reportErrorWarning", "draw3dText", "setDebugMode", "getDebugMode" }, script = "var DebugDrawImpl = bullet.wrapPointer(this_addr, bullet.DebugDrawImpl); DebugDrawImpl.drawLine = drawLine; DebugDrawImpl.drawContactPoint = drawContactPoint; DebugDrawImpl.reportErrorWarning = reportErrorWarning; DebugDrawImpl.draw3dText = draw3dText; DebugDrawImpl.setDebugMode = setDebugMode; DebugDrawImpl.getDebugMode = getDebugMode;")
    public static native void internal_native_setupCallback(int this_addr, drawLine drawLine, drawContactPoint drawContactPoint, reportErrorWarning reportErrorWarning, draw3dText draw3dText, setDebugMode setDebugMode, getDebugMode getDebugMode);

    @org.teavm.jso.JSFunctor()
    public interface drawLine extends org.teavm.jso.JSObject {

        void drawLine(int vecFrom_addr, int vecTo_addr, int color_addr);
    }

    @org.teavm.jso.JSFunctor()
    public interface drawContactPoint extends org.teavm.jso.JSObject {

        void drawContactPoint(int PointOnB_addr, int normalOnB_addr, float distance, int lifeTime, int color_addr);
    }

    @org.teavm.jso.JSFunctor()
    public interface reportErrorWarning extends org.teavm.jso.JSObject {

        void reportErrorWarning(int warningString_addr);
    }

    @org.teavm.jso.JSFunctor()
    public interface draw3dText extends org.teavm.jso.JSObject {

        void draw3dText(int location_addr, int textString_addr);
    }

    @org.teavm.jso.JSFunctor()
    public interface setDebugMode extends org.teavm.jso.JSObject {

        void setDebugMode(int debugMode);
    }

    @org.teavm.jso.JSFunctor()
    public interface getDebugMode extends org.teavm.jso.JSObject {

        int getDebugMode();
    }
}
